var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
define("jriapp_shared/consts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DUMY_ERROR = exports.APP_NAME = exports.SIDE = exports.BRACKETS = exports.DEBUG_LEVEL = void 0;
    var DEBUG_LEVEL;
    (function (DEBUG_LEVEL) {
        DEBUG_LEVEL[DEBUG_LEVEL["NONE"] = 0] = "NONE";
        DEBUG_LEVEL[DEBUG_LEVEL["NORMAL"] = 1] = "NORMAL";
        DEBUG_LEVEL[DEBUG_LEVEL["HIGH"] = 2] = "HIGH";
    })(DEBUG_LEVEL = exports.DEBUG_LEVEL || (exports.DEBUG_LEVEL = {}));
    var BRACKETS;
    (function (BRACKETS) {
        BRACKETS[BRACKETS["ROUND"] = 0] = "ROUND";
        BRACKETS[BRACKETS["CURLY"] = 1] = "CURLY";
        BRACKETS[BRACKETS["SQUARE"] = 2] = "SQUARE";
    })(BRACKETS = exports.BRACKETS || (exports.BRACKETS = {}));
    var SIDE;
    (function (SIDE) {
        SIDE[SIDE["BOTH"] = 0] = "BOTH";
        SIDE[SIDE["LEFT"] = 1] = "LEFT";
        SIDE[SIDE["RIGHT"] = 2] = "RIGHT";
    })(SIDE = exports.SIDE || (exports.SIDE = {}));
    exports.APP_NAME = "app";
    exports.DUMY_ERROR = "DUMMY_ERROR";
});
define("jriapp_shared/utils/ipromise", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PromiseState = void 0;
    var PromiseState;
    (function (PromiseState) {
        PromiseState[PromiseState["Pending"] = 0] = "Pending";
        PromiseState[PromiseState["ResolutionInProgress"] = 1] = "ResolutionInProgress";
        PromiseState[PromiseState["Resolved"] = 2] = "Resolved";
        PromiseState[PromiseState["Rejected"] = 3] = "Rejected";
    })(PromiseState = exports.PromiseState || (exports.PromiseState = {}));
});
define("jriapp_shared/int", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TPriority = exports.DebugLevel = exports.Config = void 0;
    exports.Config = jriapp_config || {};
    exports.DebugLevel = (!exports.Config.debugLevel) ? 0 : exports.Config.debugLevel;
    var TPriority;
    (function (TPriority) {
        TPriority[TPriority["Normal"] = 0] = "Normal";
        TPriority[TPriority["AboveNormal"] = 1] = "AboveNormal";
        TPriority[TPriority["High"] = 2] = "High";
    })(TPriority = exports.TPriority || (exports.TPriority = {}));
});
define("jriapp_shared/utils/checks", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Checks = void 0;
    var GUID_RX = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    var _undefined = void (0);
    function isNt(a) {
        return (a === null || a === _undefined);
    }
    function isFunc(a) {
        return (isNt(a)) ? false : ((typeof a === "function") || (typeof a === "object" && a instanceof Function));
    }
    function isString(a) {
        return (isNt(a)) ? false : ((typeof a === "string") || (typeof a === "object" && a instanceof String));
    }
    function isNumber(a) {
        return (isNt(a)) ? false : (typeof a === "number" || (typeof a === "object" && a instanceof Number));
    }
    var Checks = (function () {
        function Checks() {
        }
        Checks.isHasProp = function (obj, prop) {
            return (!obj) ? false : (prop in obj);
        };
        Checks.isNull = function (a) {
            return a === null;
        };
        Checks.isUndefined = function (a) {
            return a === _undefined;
        };
        Checks.isObject = function (a) {
            return (isNt(a)) ? false : (typeof a === "object");
        };
        Checks.isPlainObject = function (a) {
            if (!!a && typeof a == 'object') {
                var proto = Object.getPrototypeOf(a);
                return proto === Object.prototype || proto === null;
            }
            return false;
        };
        Checks.isBoolean = function (a) {
            return (isNt(a)) ? false : ((typeof a === "boolean") || (typeof a === "object" && a instanceof Boolean));
        };
        Checks.isDate = function (a) {
            return (isNt(a)) ? false : (typeof a === "object" && a instanceof Date);
        };
        Checks.isNumeric = function (a) {
            return isNumber(a) || (isString(a) && !isNaN(Number(a)));
        };
        Checks.isBoolString = function (a) {
            return (isNt(a)) ? false : (a === "true" || a === "false");
        };
        Checks.isGuid = function (a) {
            return isString(a) && GUID_RX.test(a);
        };
        Checks.isArray = function (a) {
            return (!a) ? false : Array.isArray(a);
        };
        Checks.isThenable = function (a) {
            return (!a) ? false : ((typeof (a) === "object") && isFunc(a.then));
        };
        Checks._undefined = _undefined;
        Checks.isNt = isNt;
        Checks.isString = isString;
        Checks.isFunc = isFunc;
        Checks.isNumber = isNumber;
        return Checks;
    }());
    exports.Checks = Checks;
});
define("jriapp_shared/utils/strutils", ["require", "exports", "jriapp_shared/utils/checks"], function (require, exports, checks_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringUtils = void 0;
    var _undefined = void (0), hasNativeTrim = !!("".trim), spaceChars = [" ", "\t", "\r", "\n"];
    var ERR_STRING_FORMAT_INVALID = "String format has invalid expression value: ";
    var isFunc = checks_1.Checks.isFunc, isNt = checks_1.Checks.isNt;
    var StringUtils = (function () {
        function StringUtils() {
        }
        StringUtils.endsWith = function (str, suffix) {
            return (!str || !suffix) ? false : (str.substr(str.length - suffix.length) === suffix);
        };
        StringUtils.startsWith = function (str, prefix) {
            return (!str || !prefix) ? false : (str.substr(0, prefix.length) === prefix);
        };
        StringUtils.fastTrim = function (str) {
            if (!str) {
                return "";
            }
            return hasNativeTrim ? str.trim() : trim(str, spaceChars, 0);
        };
        StringUtils.trim = function (str, chars, side) {
            if (chars === void 0) { chars = null; }
            if (side === void 0) { side = 0; }
            if (!str) {
                return "";
            }
            if (side === 0 && !chars && hasNativeTrim) {
                return str.trim();
            }
            var len = str.length, arr = !chars ? spaceChars : chars;
            var start = 0, end = len, ch;
            if (side === 0 || side === 1) {
                for (var i = 0; i < len; i += 1) {
                    ch = str.charAt(i);
                    if (arr.indexOf(ch) > -1) {
                        start = i + 1;
                    }
                    else {
                        break;
                    }
                }
            }
            if (side === 0 || side === 2) {
                for (var j = len - 1; j >= start; j -= 1) {
                    ch = str.charAt(j);
                    if (arr.indexOf(ch) > -1) {
                        end = j;
                    }
                    else {
                        break;
                    }
                }
            }
            if (start === 0 && end === len) {
                return str;
            }
            else {
                return (end > start) ? str.substring(start, end) : "";
            }
        };
        StringUtils.ltrim = function (str, chars) {
            return trim(str, chars, 1);
        };
        StringUtils.rtrim = function (str, chars) {
            return trim(str, chars, 2);
        };
        StringUtils.format = function (formatStr) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var result = "";
            for (var i = 0;;) {
                var open_1 = formatStr.indexOf("{", i);
                var close_1 = formatStr.indexOf("}", i);
                if ((open_1 < 0) && (close_1 < 0)) {
                    result += formatStr.slice(i);
                    break;
                }
                if ((close_1 > 0) && ((close_1 < open_1) || (open_1 < 0))) {
                    if (formatStr.charAt(close_1 + 1) !== "}") {
                        throw new Error(ERR_STRING_FORMAT_INVALID + formatStr);
                    }
                    result += formatStr.slice(i, close_1 + 1);
                    i = close_1 + 2;
                    continue;
                }
                result += formatStr.slice(i, open_1);
                i = open_1 + 1;
                if (formatStr.charAt(i) === "{") {
                    result += "{";
                    i++;
                    continue;
                }
                if (close_1 < 0) {
                    throw new Error(ERR_STRING_FORMAT_INVALID + formatStr);
                }
                var brace = formatStr.substring(i, close_1);
                var colonIndex = brace.indexOf(":");
                var argNumber = parseInt((colonIndex < 0) ? brace : brace.substring(0, colonIndex), 10);
                if (isNaN(argNumber)) {
                    throw new Error(ERR_STRING_FORMAT_INVALID + formatStr);
                }
                var argFormat = (colonIndex < 0) ? "" : brace.substring(colonIndex + 1);
                var arg = args[argNumber];
                if (isNt(arg)) {
                    arg = "";
                }
                if (isFunc(arg.format)) {
                    result += arg.format(argFormat);
                }
                else {
                    result += arg.toString();
                }
                i = close_1 + 1;
            }
            return result;
        };
        StringUtils.formatNumber = function (num, decimals, decPoint, thousandsSep) {
            num = (num + "").replace(/[^0-9+-Ee.]/g, "");
            var n = !isFinite(+num) ? 0 : +num, dec = (decPoint === _undefined) ? "." : decPoint, sep = (thousandsSep === _undefined) ? "," : thousandsSep;
            var prec = !isFinite(+decimals) ? 0 : Math.abs(decimals), s = [""];
            var toFixedFix = function (n, prec) {
                var k = Math.pow(10, prec);
                return "" + Math.round(n * k) / k;
            };
            if (decimals === null || decimals === _undefined) {
                s = ("" + n).split(".");
                prec = 2;
            }
            else {
                s = (prec ? toFixedFix(n, prec) : "" + Math.round(n)).split(".");
            }
            var i, s0 = "";
            var len = s[0].length;
            if (len > 3) {
                for (i = 0; i < len; i += 1) {
                    s0 = s0 + s[0].charAt(i);
                    if (i < (len - 1) && (len - i - 1) % 3 === 0) {
                        s0 = s0 + sep;
                    }
                }
                s[0] = s0;
            }
            if ((s[1] || "").length < prec) {
                s[1] = s[1] || "";
                s[1] += new Array(prec - s[1].length + 1).join("0");
            }
            return s.join(dec);
        };
        StringUtils.stripNonNumeric = function (str) {
            str += "";
            var rgx = /^\d|\.|-$/;
            var out = "";
            for (var i = 0; i < str.length; i++) {
                if (rgx.test(str.charAt(i))) {
                    if (!((str.charAt(i) === "." && out.indexOf(".") !== -1) ||
                        (str.charAt(i) === "-" && out.length !== 0))) {
                        out += str.charAt(i);
                    }
                }
            }
            return out;
        };
        StringUtils.padLeft = function (val, len, pad) {
            if (!val) {
                val = "";
            }
            pad = pad || " ";
            if (val.length >= len) {
                return val;
            }
            var str = new Array(len).join(pad[0]);
            return (str + val).slice(-len);
        };
        StringUtils.fastPadLeft = function (val, pad) {
            if (!val) {
                val = "";
            }
            if (val.length >= pad.length) {
                return val;
            }
            return (pad + val).slice(-pad.length);
        };
        StringUtils.trimQuotes = function (val) {
            if (!val) {
                return "";
            }
            var len = val.length;
            var start = 0, end = len, ch;
            for (var i = 0; i < len; i += 1) {
                ch = val.charAt(i);
                if (ch === " " || ch === "'" || ch === '"') {
                    start = i + 1;
                }
                else {
                    break;
                }
            }
            for (var j = len - 1; j >= start; j -= 1) {
                ch = val.charAt(j);
                if (ch === " " || ch === "'" || ch === '"') {
                    end = j;
                }
                else {
                    break;
                }
            }
            if (start === 0 && end === len) {
                return val;
            }
            else {
                return (end > start) ? val.substring(start, end) : "";
            }
        };
        StringUtils.trimBrackets = function (val) {
            if (!val) {
                return "";
            }
            var len = val.length;
            var start = 0, end = len, ch;
            for (var i = 0; i < len; i += 1) {
                ch = val.charAt(i);
                if (ch === " " || ch === "[") {
                    start = i + 1;
                }
                else {
                    break;
                }
            }
            for (var j = len - 1; j >= start; j -= 1) {
                ch = val.charAt(j);
                if (ch === " " || ch === "]") {
                    end = j;
                }
                else {
                    break;
                }
            }
            if (start === 0 && end === len) {
                return val;
            }
            else {
                return (end > start) ? val.substring(start, end) : "";
            }
        };
        return StringUtils;
    }());
    exports.StringUtils = StringUtils;
    var trim = StringUtils.trim;
});
define("jriapp_shared/utils/coreutils", ["require", "exports", "jriapp_shared/utils/strutils", "jriapp_shared/utils/checks"], function (require, exports, strutils_1, checks_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CoreUtils = void 0;
    var isHasProp = checks_2.Checks.isHasProp, _undefined = checks_2.Checks._undefined, isBoolean = checks_2.Checks.isBoolean, isArray = checks_2.Checks.isArray, isPlainObject = checks_2.Checks.isPlainObject, isNt = checks_2.Checks.isNt, isString = checks_2.Checks.isString, formatStr = strutils_1.StringUtils.format, trim = strutils_1.StringUtils.fastTrim, getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, objectKeys = Object.keys;
    var UUID_CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
    var NEWID_MAP = Indexer();
    function Indexer() {
        return Object.create(null);
    }
    function clone(obj, target) {
        if (!obj) {
            return obj;
        }
        var res;
        if (isArray(obj)) {
            res = [];
            var len = obj.length;
            for (var i = 0; i < len; i += 1) {
                res.push(clone(obj[i], null));
            }
        }
        else if (isPlainObject(obj)) {
            res = target || {};
            var keys = getOwnPropertyNames(obj), len = keys.length;
            for (var i = 0; i < len; i += 1) {
                var p = keys[i];
                res[p] = clone(obj[p], null);
            }
        }
        else {
            res = obj;
        }
        return res;
    }
    function extend(target) {
        var source = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            source[_i - 1] = arguments[_i];
        }
        if (isNt(target)) {
            throw new TypeError("extend: Cannot convert first argument to object");
        }
        var to = Object(target);
        for (var i = 0; i < source.length; i++) {
            var nextSource = source[i];
            if (nextSource === _undefined || nextSource === null) {
                continue;
            }
            var keys = objectKeys(Object(nextSource)), len = keys.length;
            for (var nextIndex = 0; nextIndex < len; nextIndex++) {
                var nextKey = keys[nextIndex], desc = getOwnPropertyDescriptor(nextSource, nextKey);
                if (desc !== _undefined && desc.enumerable) {
                    to[nextKey] = nextSource[nextKey];
                }
            }
        }
        return to;
    }
    function assignStrings(target, source) {
        if (isNt(target)) {
            target = {};
        }
        if (!isPlainObject(source)) {
            return target;
        }
        var keys = objectKeys(source), len = keys.length;
        for (var i = 0; i < len; i += 1) {
            var p = keys[i], tval = target[p], sval = source[p];
            if (isPlainObject(sval)) {
                target[p] = assignStrings(tval, sval);
            }
            else if (isString(sval)) {
                target[p] = sval;
            }
        }
        return target;
    }
    var ERR_OBJ_ALREADY_REGISTERED = "an Object with the name: {0} is already registered and can not be overwritten";
    var CoreUtils = (function () {
        function CoreUtils() {
        }
        CoreUtils.getNewID = function (prefix) {
            if (prefix === void 0) { prefix = "*"; }
            var id = NEWID_MAP[prefix] || 0;
            NEWID_MAP[prefix] = id + 1;
            return (prefix === "*") ? id.toString(36) : (prefix + "_" + id.toString(36));
        };
        CoreUtils.setValue = function (root, namePath, val, checkOverwrite) {
            if (checkOverwrite === void 0) { checkOverwrite = false; }
            var parts = namePath.split("."), len = parts.length;
            var parent = root;
            for (var i = 0; i < len - 1; i += 1) {
                if (!parent[parts[i]]) {
                    parent[parts[i]] = Indexer();
                }
                parent = parent[parts[i]];
            }
            var n = parts[len - 1];
            if (!!checkOverwrite && (parent[n] !== _undefined)) {
                throw new Error(formatStr(ERR_OBJ_ALREADY_REGISTERED, namePath));
            }
            parent[n] = val;
        };
        CoreUtils.getValue = function (root, namePath) {
            var parts = namePath.split(".");
            var res, parent = root;
            for (var i = 0; i < parts.length; i += 1) {
                res = parent[parts[i]];
                if (res === _undefined) {
                    return null;
                }
                parent = res;
            }
            return res;
        };
        CoreUtils.removeValue = function (root, namePath) {
            var parts = namePath.split(".");
            var parent = root;
            for (var i = 0; i < parts.length - 1; i += 1) {
                if (!parent[parts[i]]) {
                    return null;
                }
                parent = parent[parts[i]];
            }
            var n = parts[parts.length - 1], val = parent[n];
            if (val !== _undefined) {
                delete parent[n];
            }
            return val;
        };
        CoreUtils.uuid = function (len, radix) {
            var i;
            var chars = UUID_CHARS, uuid = [], rnd = Math.random;
            radix = radix || chars.length;
            if (!!len) {
                for (i = 0; i < len; i += 1) {
                    uuid[i] = chars[0 | rnd() * radix];
                }
            }
            else {
                var r = void 0;
                uuid[8] = uuid[13] = uuid[18] = uuid[23] = "-";
                uuid[14] = "4";
                for (i = 0; i < 36; i += 1) {
                    if (!uuid[i]) {
                        r = 0 | rnd() * 16;
                        uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r & 0xf];
                    }
                }
            }
            return uuid.join("");
        };
        CoreUtils.parseBool = function (a) {
            if (isBoolean(a)) {
                return a;
            }
            var v = trim(a).toLowerCase();
            if (v === "false") {
                return false;
            }
            else if (v === "true") {
                return true;
            }
            else {
                throw new Error(formatStr("parseBool, argument: {0} is not a valid boolean string", a));
            }
        };
        CoreUtils.round = function (num, decimals) {
            return parseFloat(num.toFixed(decimals));
        };
        CoreUtils.merge = function (source, target) {
            if (!target) {
                target = {};
            }
            if (!source) {
                return target;
            }
            return extend(target, source);
        };
        CoreUtils.memoize = function (fn) {
            var memo = Indexer();
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var key = "__dummy";
                if (!!args && args.length > 0) {
                    key = args.join(':');
                }
                if (key in memo) {
                    return memo[key];
                }
                else {
                    memo[key] = fn.apply(void 0, args);
                    return memo[key];
                }
            };
        };
        CoreUtils.forEach = function (map, fn) {
            if (!map) {
                return;
            }
            for (var key in map) {
                fn(key, map[key]);
            }
        };
        CoreUtils.toArray = function (map) {
            var r = [];
            if (!map) {
                return r;
            }
            for (var key in map) {
                r.push(map[key]);
            }
            return r;
        };
        CoreUtils.pipe = function (fn1) {
            var fns = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                fns[_i - 1] = arguments[_i];
            }
            var piped = fns.reduce(function (prevFn, nextFn) { return function (value) { return nextFn(prevFn(value)); }; }, function (value) { return value; });
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return piped(fn1.apply(void 0, args));
            };
        };
        CoreUtils.compose = function (fn1) {
            var fns = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                fns[_i - 1] = arguments[_i];
            }
            return fns.reduce(function (prevFn, nextFn) { return function (value) { return prevFn(nextFn(value)); }; }, fn1);
        };
        CoreUtils.getTimeZoneOffset = (function () {
            var dt = new Date(), tz = dt.getTimezoneOffset();
            return function () { return tz; };
        })();
        CoreUtils.hasProp = isHasProp;
        CoreUtils.clone = clone;
        CoreUtils.extend = extend;
        CoreUtils.Indexer = Indexer;
        CoreUtils.assignStrings = assignStrings;
        return CoreUtils;
    }());
    exports.CoreUtils = CoreUtils;
});
define("jriapp_shared/lang", ["require", "exports", "jriapp_shared/utils/coreutils"], function (require, exports, coreutils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STRS = exports.ERRS = exports.assign = void 0;
    var coreUtils = coreutils_1.CoreUtils;
    function assign(target, source) {
        return coreUtils.assignStrings(target, source);
    }
    exports.assign = assign;
    var _ERRS = {
        ERR_OBJ_ALREADY_REGISTERED: "Object with the name: {0} is already registered and can not be overwritten",
        ERR_OPTIONS_ALREADY_REGISTERED: "Options with the name: {0} are already registered and can not be overwritten",
        ERR_APP_NEED_JQUERY: "The project is dependent on JQuery and can not function properly without it",
        ERR_ASSERTION_FAILED: 'The Assertion "{0}" failed',
        ERR_BINDING_CONTENT_NOT_FOUND: "BindingContent is not found",
        ERR_DBSET_READONLY: "TDbSet: {0} is readOnly and can not be edited",
        ERR_DBSET_INVALID_FIELDNAME: "TDbSet: {0} has no field with the name: {1}",
        ERR_FIELD_READONLY: "Field is readOnly and can not be edited",
        ERR_FIELD_ISNOT_NULLABLE: "Field must not be empty",
        ERR_FIELD_WRONG_TYPE: "Value {0} has a wrong datatype. It must have {1} datatype.",
        ERR_FIELD_MAXLEN: "Value exceeds maximum field length: {0}",
        ERR_FIELD_DATATYPE: "Unknown field data type: {0}",
        ERR_FIELD_REGEX: "Value {0} is not validated for correctness",
        ERR_FIELD_RANGE: "Value {0} is outside the allowed range {1}",
        ERR_EVENT_INVALID: "Invalid event name: {0}",
        ERR_EVENT_INVALID_FUNC: "Invalid event function value",
        ERR_MODULE_NOT_REGISTERED: "Module: {0} is not registered",
        ERR_MODULE_ALREDY_REGISTERED: "Module: {0} is already registered",
        ERR_PROP_NAME_EMPTY: "Empty property name parameter",
        ERR_PROP_NAME_INVALID: 'The object does not have a property with a name: "{0}"',
        ERR_GLOBAL_SINGLTON: "There must be only one instance of Global object",
        ERR_TEMPLATE_ALREADY_REGISTERED: "TEMPLATE with the name: {0} is already registered",
        ERR_TEMPLATE_NOTREGISTERED: "TEMPLATE with the name: {0} is not registered",
        ERR_TEMPLATE_GROUP_NOTREGISTERED: "TEMPLATE's group: {0} is not registered",
        ERR_TEMPLATE_HAS_NO_ID: "TEMPLATE inside SCRIPT tag must have an ID attribute",
        ERR_OPTIONS_HAS_NO_ID: "OPTIONS inside SCRIPT tag must have an ID attribute",
        ERR_CONVERTER_NOTREGISTERED: "Converter: {0} is not registered",
        ERR_OPTIONS_NOTREGISTERED: "Options: {0} is not registered",
        ERR_JQUERY_DATEPICKER_NOTFOUND: "Application is dependent on JQuery.UI.datepicker",
        ERR_PARAM_INVALID: "Parameter: {0} has invalid value: {1}",
        ERR_PARAM_INVALID_TYPE: "Parameter: {0} has invalid type. It must be {1}",
        ERR_KEY_IS_EMPTY: "Key value must not be empty",
        ERR_KEY_IS_NOTFOUND: "Can not find an item with the key: {0}",
        ERR_ITEM_IS_ATTACHED: "Operation invalid. The reason: Item already has been attached",
        ERR_ITEM_IS_DETACHED: "Operation invalid. The reason: Item is detached",
        ERR_ITEM_IS_NOTFOUND: "Operation invalid. The reason: Item is not found",
        ERR_ITEM_NAME_COLLISION: 'The "{0}" TDbSet\'s field name: "{1}" is invalid, because a property with that name already exists on the entity',
        ERR_DICTKEY_IS_NOTFOUND: "Dictionary keyName: {0} does not exist in item's properties",
        ERR_DICTKEY_IS_EMPTY: "Dictionary key property: {0} must be not empty",
        ERR_CONV_INVALID_DATE: "Cannot parse string value: {0} to a valid Date",
        ERR_CONV_INVALID_NUM: "Cannot parse string value: {0} to a valid Numeric",
        ERR_QUERY_NAME_NOTFOUND: "Can not find Query with the name: {0}",
        ERR_QUERY_BETWEEN: '"BETWEEN" Query operator expects two values',
        ERR_QUERY_OPERATOR_INVALID: "Invalid query operator {0}",
        ERR_OPER_REFRESH_INVALID: "Refresh operation can not be done with items in Detached or Added State",
        ERR_CALC_FIELD_DEFINE: 'Field: "{0}" definition error: Calculated fields can be dependent only on items fields',
        ERR_CALC_FIELD_SELF_DEPEND: 'Field: "{0}" definition error: Calculated fields can not be dependent on themselves',
        ERR_DOMAIN_CONTEXT_INITIALIZED: "DbContext already initialized",
        ERR_DOMAIN_CONTEXT_NOT_INITIALIZED: "DbContext is not initialized",
        ERR_SVC_METH_PARAM_INVALID: "Invalid parameter {0} value {1} for service method: {2} invocation",
        ERR_DB_LOAD_NO_QUERY: "Query parameter is not supplied",
        ERR_DBSET_NAME_INVALID: "Invalid dbSet Name: {0}",
        ERR_APP_NAME_NOT_UNIQUE: "Application instance with the name: {0} already exists",
        ERR_ELVIEW_NOT_REGISTERED: "Can not find registered element view with the name: {0}",
        ERR_ELVIEW_NOT_CREATED: "Can not create element view for element with Tag Name: {0}",
        ERR_BIND_TARGET_EMPTY: "Binding target is empty",
        ERR_BIND_TGTPATH_INVALID: "Binding targetPath has invalid value: {0}",
        ERR_BIND_MODE_INVALID: "Binding mode has invalid value: {0}",
        ERR_BIND_TARGET_INVALID: "Binding target must be a descendant of BaseObject",
        ERR_EXPR_BRACES_INVALID: "Expression {0} has no closing braces",
        ERR_APP_SETUP_INVALID: "Application's setUp method parameter must be a valid function",
        ERR_GRID_DATASRC_INVALID: "DataGrid's datasource must be a descendant of Collection type",
        ERR_COLLECTION_CHANGETYPE_INVALID: "Invalid Collection change type value: {0}",
        ERR_GRID_COLTYPE_INVALID: "Invalid Column type type value: {0}",
        ERR_PAGER_DATASRC_INVALID: "Pager datasource must be a descendant of Collection type",
        ERR_STACKPNL_DATASRC_INVALID: "StackPanel datasource must be a descendant of Collection type",
        ERR_STACKPNL_TEMPLATE_INVALID: "StackPanel templateID is not provided in the options",
        ERR_LISTBOX_DATASRC_INVALID: "ListBox datasource must be a descendant of Collection type",
        ERR_DATAFRM_DCTX_INVALID: "DataForm's dataContext must be a descendant of BaseObject type",
        ERR_DCTX_HAS_NO_FIELDINFO: "DataContext has no getFieldInfo method",
        ERR_TEMPLATE_ID_INVALID: "Element can not be found by its TemplateID: {0}",
        ERR_ITEM_DELETED_BY_ANOTHER_USER: "The record have been deleted by another user",
        ERR_ACCESS_DENIED: "The access is denied. Please, ask administrator to assign user rights to your account",
        ERR_CONCURRENCY: "The record has been modified by another user. Please, refresh record before editing",
        ERR_VALIDATION: "Data validation error",
        ERR_SVC_VALIDATION: "Data validation error: {0}",
        ERR_SVC_ERROR: "Service error: {0}",
        ERR_UNEXPECTED_SVC_ERROR: "Unexpected service error: {0}",
        ERR_ASSOC_NAME_INVALID: "Invalid association name: {0}",
        ERR_DATAVIEW_DATASRC_INVALID: "TDataView datasource must not be null and should be descendant of Collection type",
        ERR_DATAVIEW_FILTER_INVALID: "TDataView fn_filter option must be valid function which accepts entity and returns boolean value"
    };
    var PAGER = {
        firstText: "<<",
        lastText: ">>",
        previousText: "<",
        nextText: ">",
        pageInfo: "Rows from <span class='ria-pager-info-num'>{0}</span> to <span class='ria-pager-info-num'>{1}</span> of <span class='ria-pager-info-num'>{2}</span>",
        firstPageTip: "to first page",
        prevPageTip: "back to page {0}",
        nextPageTip: "next to page {0}",
        lastPageTip: "last page",
        showingTip: "showing result {0} to {1} of {2}",
        showTip: "show result {0} to {1} of {2}"
    };
    var VALIDATE = {
        errorInfo: "Validation errors:",
        errorField: "field:"
    };
    var TEXT = {
        txtEdit: "Edit",
        txtAddNew: "Add new",
        txtDelete: "Delete",
        txtCancel: "Cancel",
        txtOk: "Ok",
        txtRefresh: "Refresh",
        txtAskDelete: "Are you sure, you want to delete row?",
        txtSubmitting: "Submitting data ...",
        txtSave: "Save",
        txtClose: "Close",
        txtField: "Field"
    };
    var _STRS = {
        PAGER: PAGER,
        VALIDATE: VALIDATE,
        TEXT: TEXT
    };
    exports.ERRS = _ERRS;
    exports.STRS = _STRS;
});
define("jriapp_shared/collection/const", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VALS_VERSION = exports.ITEM_STATUS = exports.COLL_CHANGE_OPER = exports.COLL_CHANGE_REASON = exports.COLL_CHANGE_TYPE = exports.FILTER_TYPE = exports.SORT_ORDER = exports.FIELD_TYPE = exports.DATA_TYPE = exports.DATE_CONVERSION = void 0;
    var DATE_CONVERSION;
    (function (DATE_CONVERSION) {
        DATE_CONVERSION[DATE_CONVERSION["None"] = 0] = "None";
        DATE_CONVERSION[DATE_CONVERSION["ServerLocalToClientLocal"] = 1] = "ServerLocalToClientLocal";
        DATE_CONVERSION[DATE_CONVERSION["UtcToClientLocal"] = 2] = "UtcToClientLocal";
    })(DATE_CONVERSION = exports.DATE_CONVERSION || (exports.DATE_CONVERSION = {}));
    var DATA_TYPE;
    (function (DATA_TYPE) {
        DATA_TYPE[DATA_TYPE["None"] = 0] = "None";
        DATA_TYPE[DATA_TYPE["String"] = 1] = "String";
        DATA_TYPE[DATA_TYPE["Bool"] = 2] = "Bool";
        DATA_TYPE[DATA_TYPE["Integer"] = 3] = "Integer";
        DATA_TYPE[DATA_TYPE["Decimal"] = 4] = "Decimal";
        DATA_TYPE[DATA_TYPE["Float"] = 5] = "Float";
        DATA_TYPE[DATA_TYPE["DateTime"] = 6] = "DateTime";
        DATA_TYPE[DATA_TYPE["Date"] = 7] = "Date";
        DATA_TYPE[DATA_TYPE["Time"] = 8] = "Time";
        DATA_TYPE[DATA_TYPE["Guid"] = 9] = "Guid";
        DATA_TYPE[DATA_TYPE["Binary"] = 10] = "Binary";
    })(DATA_TYPE = exports.DATA_TYPE || (exports.DATA_TYPE = {}));
    var FIELD_TYPE;
    (function (FIELD_TYPE) {
        FIELD_TYPE[FIELD_TYPE["None"] = 0] = "None";
        FIELD_TYPE[FIELD_TYPE["ClientOnly"] = 1] = "ClientOnly";
        FIELD_TYPE[FIELD_TYPE["Calculated"] = 2] = "Calculated";
        FIELD_TYPE[FIELD_TYPE["Navigation"] = 3] = "Navigation";
        FIELD_TYPE[FIELD_TYPE["RowTimeStamp"] = 4] = "RowTimeStamp";
        FIELD_TYPE[FIELD_TYPE["Object"] = 5] = "Object";
        FIELD_TYPE[FIELD_TYPE["ServerCalculated"] = 6] = "ServerCalculated";
    })(FIELD_TYPE = exports.FIELD_TYPE || (exports.FIELD_TYPE = {}));
    var SORT_ORDER;
    (function (SORT_ORDER) {
        SORT_ORDER[SORT_ORDER["ASC"] = 0] = "ASC";
        SORT_ORDER[SORT_ORDER["DESC"] = 1] = "DESC";
    })(SORT_ORDER = exports.SORT_ORDER || (exports.SORT_ORDER = {}));
    var FILTER_TYPE;
    (function (FILTER_TYPE) {
        FILTER_TYPE[FILTER_TYPE["Equals"] = 0] = "Equals";
        FILTER_TYPE[FILTER_TYPE["Between"] = 1] = "Between";
        FILTER_TYPE[FILTER_TYPE["StartsWith"] = 2] = "StartsWith";
        FILTER_TYPE[FILTER_TYPE["EndsWith"] = 3] = "EndsWith";
        FILTER_TYPE[FILTER_TYPE["Contains"] = 4] = "Contains";
        FILTER_TYPE[FILTER_TYPE["Gt"] = 5] = "Gt";
        FILTER_TYPE[FILTER_TYPE["Lt"] = 6] = "Lt";
        FILTER_TYPE[FILTER_TYPE["GtEq"] = 7] = "GtEq";
        FILTER_TYPE[FILTER_TYPE["LtEq"] = 8] = "LtEq";
        FILTER_TYPE[FILTER_TYPE["NotEq"] = 9] = "NotEq";
    })(FILTER_TYPE = exports.FILTER_TYPE || (exports.FILTER_TYPE = {}));
    var COLL_CHANGE_TYPE;
    (function (COLL_CHANGE_TYPE) {
        COLL_CHANGE_TYPE[COLL_CHANGE_TYPE["Remove"] = 0] = "Remove";
        COLL_CHANGE_TYPE[COLL_CHANGE_TYPE["Add"] = 1] = "Add";
        COLL_CHANGE_TYPE[COLL_CHANGE_TYPE["Reset"] = 2] = "Reset";
        COLL_CHANGE_TYPE[COLL_CHANGE_TYPE["Remap"] = 3] = "Remap";
    })(COLL_CHANGE_TYPE = exports.COLL_CHANGE_TYPE || (exports.COLL_CHANGE_TYPE = {}));
    var COLL_CHANGE_REASON;
    (function (COLL_CHANGE_REASON) {
        COLL_CHANGE_REASON[COLL_CHANGE_REASON["None"] = 0] = "None";
        COLL_CHANGE_REASON[COLL_CHANGE_REASON["PageChange"] = 1] = "PageChange";
        COLL_CHANGE_REASON[COLL_CHANGE_REASON["Sorting"] = 2] = "Sorting";
        COLL_CHANGE_REASON[COLL_CHANGE_REASON["Refresh"] = 3] = "Refresh";
    })(COLL_CHANGE_REASON = exports.COLL_CHANGE_REASON || (exports.COLL_CHANGE_REASON = {}));
    var COLL_CHANGE_OPER;
    (function (COLL_CHANGE_OPER) {
        COLL_CHANGE_OPER[COLL_CHANGE_OPER["None"] = 0] = "None";
        COLL_CHANGE_OPER[COLL_CHANGE_OPER["Fill"] = 1] = "Fill";
        COLL_CHANGE_OPER[COLL_CHANGE_OPER["AddNew"] = 2] = "AddNew";
        COLL_CHANGE_OPER[COLL_CHANGE_OPER["Remove"] = 3] = "Remove";
        COLL_CHANGE_OPER[COLL_CHANGE_OPER["Commit"] = 4] = "Commit";
        COLL_CHANGE_OPER[COLL_CHANGE_OPER["Sort"] = 5] = "Sort";
    })(COLL_CHANGE_OPER = exports.COLL_CHANGE_OPER || (exports.COLL_CHANGE_OPER = {}));
    var ITEM_STATUS;
    (function (ITEM_STATUS) {
        ITEM_STATUS[ITEM_STATUS["None"] = 0] = "None";
        ITEM_STATUS[ITEM_STATUS["Added"] = 1] = "Added";
        ITEM_STATUS[ITEM_STATUS["Updated"] = 2] = "Updated";
        ITEM_STATUS[ITEM_STATUS["Deleted"] = 3] = "Deleted";
    })(ITEM_STATUS = exports.ITEM_STATUS || (exports.ITEM_STATUS = {}));
    var VALS_VERSION;
    (function (VALS_VERSION) {
        VALS_VERSION[VALS_VERSION["Current"] = 0] = "Current";
        VALS_VERSION[VALS_VERSION["Temporary"] = 1] = "Temporary";
        VALS_VERSION[VALS_VERSION["Original"] = 2] = "Original";
    })(VALS_VERSION = exports.VALS_VERSION || (exports.VALS_VERSION = {}));
});
define("jriapp_shared/collection/int", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ITEM_EVENTS = exports.PROP_NAME = void 0;
    exports.PROP_NAME = {
        isEditing: "isEditing",
        currentItem: "currentItem",
        count: "count",
        totalCount: "totalCount",
        pageCount: "pageCount",
        pageSize: "pageSize",
        pageIndex: "pageIndex",
        isUpdating: "isUpdating",
        isLoading: "isLoading",
        isRefreshing: "isRefreshing"
    };
    var ITEM_EVENTS;
    (function (ITEM_EVENTS) {
        ITEM_EVENTS["errors_changed"] = "errors_changed";
        ITEM_EVENTS["destroyed"] = "destroyed";
    })(ITEM_EVENTS = exports.ITEM_EVENTS || (exports.ITEM_EVENTS = {}));
});
define("jriapp_shared/utils/sysutils", ["require", "exports", "jriapp_shared/lang", "jriapp_shared/utils/checks", "jriapp_shared/utils/strutils"], function (require, exports, lang_1, checks_3, strUtils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SysUtils = void 0;
    var isFunc = checks_3.Checks.isFunc, isHasProp = checks_3.Checks.isHasProp, isArray = checks_3.Checks.isArray, isNt = checks_3.Checks.isNt, _undefined = checks_3.Checks._undefined, startsWith = strUtils_1.StringUtils.startsWith, trim = strUtils_1.StringUtils.fastTrim, trimBrackets = strUtils_1.StringUtils.trimBrackets, format = strUtils_1.StringUtils.format, trimQuotes = strUtils_1.StringUtils.trimQuotes;
    function dummyIsBaseObj(_obj) {
        return false;
    }
    function dummyIsCollection(_obj) {
        return false;
    }
    function dummyIsValidationError(_obj) {
        return false;
    }
    function isPropBag(obj) {
        return !!obj && obj.isPropertyBag;
    }
    var SysUtils = (function () {
        function SysUtils() {
        }
        SysUtils.isEditable = function (obj) {
            return sys.isBaseObj(obj) && isHasProp(obj, "isEditing") && isFunc(obj.beginEdit) && isFunc(obj.endEdit) && isFunc(obj.cancelEdit);
        };
        SysUtils.isSubmittable = function (obj) {
            return sys.isBaseObj(obj) && isHasProp(obj, "isCanSubmit") && isFunc(obj.submitChanges);
        };
        SysUtils.isErrorNotification = function (obj) {
            if (!obj) {
                return false;
            }
            if (!isFunc(obj.getIErrorNotification)) {
                return false;
            }
            var tmp = obj.getIErrorNotification();
            return !!tmp && isFunc(tmp.getIErrorNotification);
        };
        SysUtils.isValidatable = function (obj) {
            if (!obj) {
                return false;
            }
            return "validationErrors" in obj;
        };
        SysUtils.getErrorNotification = function (obj) {
            if (!obj) {
                return null;
            }
            if (!!obj._aspect && sys.isErrorNotification(obj._aspect)) {
                return obj._aspect.getIErrorNotification();
            }
            else if (sys.isErrorNotification(obj)) {
                return obj.getIErrorNotification();
            }
            return null;
        };
        SysUtils.getEditable = function (obj) {
            if (!obj) {
                return null;
            }
            if (!!obj._aspect && sys.isEditable(obj._aspect)) {
                return obj._aspect;
            }
            else if (sys.isEditable(obj)) {
                return obj;
            }
            return null;
        };
        SysUtils.getSubmittable = function (obj) {
            if (!obj) {
                return null;
            }
            if (!!obj._aspect && sys.isSubmittable(obj._aspect)) {
                return obj._aspect;
            }
            else if (sys.isSubmittable(obj)) {
                return obj;
            }
            return null;
        };
        SysUtils.getBraceLen = function (val, start, brace) {
            var i, cnt = 0, ch, literal, test = 0;
            var len = val.length;
            var br1, br2;
            switch (brace) {
                case 0:
                    br1 = "(";
                    br2 = ")";
                    break;
                case 1:
                    br1 = "{";
                    br2 = "}";
                    break;
                case 2:
                    br1 = "[";
                    br2 = "]";
                    break;
            }
            for (i = start; i < len; i += 1) {
                ch = val.charAt(i);
                if (!literal) {
                    switch (ch) {
                        case "'":
                        case '"':
                            literal = ch;
                            cnt += 1;
                            break;
                        case br1:
                            test += 1;
                            cnt += 1;
                            break;
                        case br2:
                            test -= 1;
                            cnt += 1;
                            if (test === 0) {
                                return cnt;
                            }
                            break;
                        default:
                            if (test > 0) {
                                cnt += 1;
                            }
                            break;
                    }
                }
                else {
                    switch (ch) {
                        case "'":
                        case '"':
                            if (literal === ch) {
                                var i1 = i + 1, next = i1 < len ? val.charAt(i1) : null;
                                if (next === ch) {
                                    i += 1;
                                    cnt += 2;
                                }
                                else {
                                    literal = null;
                                    cnt += 1;
                                }
                            }
                            else {
                                cnt += 1;
                            }
                            break;
                        default:
                            if (test > 0) {
                                cnt += 1;
                            }
                            break;
                    }
                }
            }
            if (test !== 0) {
                throw new Error(format(lang_1.ERRS.ERR_EXPR_BRACES_INVALID, val));
            }
            return cnt;
        };
        SysUtils.getPathParts = function (path) {
            if (!path) {
                return [];
            }
            var i, start = 0, ch, val;
            var parts = [], len = path.length;
            for (i = 0; i < len; i += 1) {
                if (start < 0) {
                    start = i;
                }
                ch = path.charAt(i);
                switch (ch) {
                    case ".":
                        val = trim(path.substring(start, i));
                        if (!val && parts.length === 0) {
                            throw new Error("Invalid property path: " + path);
                        }
                        if (!!val) {
                            parts.push(val);
                        }
                        start = -1;
                        break;
                    case "[":
                        val = trim(path.substring(start, i));
                        if (!!val) {
                            parts.push(val);
                        }
                        var braceLen = sys.getBraceLen(path, i, 2);
                        val = trimQuotes(path.substring(i + 1, i + braceLen - 1));
                        if (!val) {
                            throw new Error("Invalid property path: " + path);
                        }
                        parts.push("[" + val + "]");
                        i += (braceLen - 1);
                        start = -1;
                        break;
                }
            }
            if (start > -1 && start < i) {
                val = trim(path.substring(start, i));
                if (!!val) {
                    parts.push(val);
                }
            }
            return parts;
        };
        SysUtils.getProp = function (obj, prop) {
            if (!prop) {
                return obj;
            }
            if (sys.isBaseObj(obj) && obj.getIsStateDirty()) {
                return _undefined;
            }
            if (startsWith(prop, "[")) {
                if (sys.isCollection(obj)) {
                    prop = trimBrackets(prop);
                    return sys.getItemByProp(obj, prop);
                }
                else if (isArray(obj)) {
                    prop = trimBrackets(prop);
                    return obj[parseInt(prop, 10)];
                }
                else if (sys.isPropBag(obj)) {
                    return obj.getProp(prop);
                }
            }
            return obj[prop];
        };
        SysUtils.setProp = function (obj, prop, val) {
            if (!prop) {
                throw new Error("Invalid operation: Empty Property name");
            }
            if (sys.isBaseObj(obj) && obj.getIsStateDirty()) {
                return;
            }
            if (startsWith(prop, "[")) {
                if (isArray(obj)) {
                    prop = trimBrackets(prop);
                    obj[parseInt(prop, 10)] = val;
                    return;
                }
                else if (sys.isPropBag(obj)) {
                    obj.setProp(prop, val);
                    return;
                }
            }
            obj[prop] = val;
        };
        SysUtils.resolveOwner = function (root, path) {
            if (!path) {
                return root;
            }
            var parts = sys.getPathParts(path), maxindex = parts.length - 1;
            var res = root;
            for (var i = 0; i < maxindex; i += 1) {
                res = sys.getProp(res, parts[i]);
                if (isNt(res)) {
                    return res;
                }
            }
            return res;
        };
        SysUtils.resolvePath = function (root, path) {
            return sys.resolvePath2(root, sys.getPathParts(path));
        };
        SysUtils.resolvePath2 = function (root, srcParts) {
            if (isNt(root)) {
                return root;
            }
            if (!srcParts || srcParts.length === 0) {
                return root;
            }
            var obj = root;
            for (var i = 0; i < srcParts.length; i += 1) {
                obj = sys.getProp(obj, srcParts[i]);
                if (isNt(obj)) {
                    return obj;
                }
            }
            return obj;
        };
        SysUtils.raiseProp = function (obj, path) {
            var parts = sys.getPathParts(path), lastName = parts[parts.length - 1];
            if (parts.length > 1) {
                var owner = sys.resolveOwner(obj, path);
                if (!!sys.isBaseObj(owner)) {
                    owner.objEvents.raiseProp(lastName);
                }
            }
            else {
                obj.objEvents.raiseProp(lastName);
            }
        };
        SysUtils.isBinding = function () { return false; };
        SysUtils.isPropBag = isPropBag;
        SysUtils.isCollection = dummyIsCollection;
        SysUtils.getItemByProp = function () { return null; };
        SysUtils.isValidationError = dummyIsValidationError;
        SysUtils.isBaseObj = dummyIsBaseObj;
        return SysUtils;
    }());
    exports.SysUtils = SysUtils;
    var sys = SysUtils;
});
define("jriapp_shared/errors", ["require", "exports", "jriapp_shared/consts", "jriapp_shared/utils/sysutils", "jriapp_shared/utils/coreutils", "jriapp_shared/lang"], function (require, exports, consts_1, sysutils_1, coreutils_2, lang_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationError = exports.AggregateError = exports.AbortError = exports.DummyError = exports.BaseError = void 0;
    var sys = sysutils_1.SysUtils, Indexer = coreutils_2.CoreUtils.Indexer;
    var BaseError = (function () {
        function BaseError(message) {
            this._message = message || "Error";
        }
        BaseError.prototype.toString = function () {
            return this._message;
        };
        Object.defineProperty(BaseError.prototype, "isDummy", {
            get: function () {
                return false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseError.prototype, "message", {
            get: function () {
                return this._message;
            },
            enumerable: false,
            configurable: true
        });
        return BaseError;
    }());
    exports.BaseError = BaseError;
    var DummyError = (function (_super) {
        __extends(DummyError, _super);
        function DummyError(originalError) {
            var _this = _super.call(this, consts_1.DUMY_ERROR) || this;
            _this._origError = originalError;
            return _this;
        }
        Object.defineProperty(DummyError.prototype, "isDummy", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DummyError.prototype, "origError", {
            get: function () {
                return this._origError;
            },
            enumerable: false,
            configurable: true
        });
        return DummyError;
    }(BaseError));
    exports.DummyError = DummyError;
    var AbortError = (function (_super) {
        __extends(AbortError, _super);
        function AbortError(reason) {
            var _this = _super.call(this, consts_1.DUMY_ERROR) || this;
            _this._reason = reason || "Operation Aborted";
            return _this;
        }
        Object.defineProperty(AbortError.prototype, "isDummy", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbortError.prototype, "reason", {
            get: function () {
                return this._reason;
            },
            enumerable: false,
            configurable: true
        });
        return AbortError;
    }(BaseError));
    exports.AbortError = AbortError;
    var AggregateError = (function (_super) {
        __extends(AggregateError, _super);
        function AggregateError(errors) {
            var _this = _super.call(this, "AggregateError") || this;
            _this._errors = errors || [];
            return _this;
        }
        Object.defineProperty(AggregateError.prototype, "errors", {
            get: function () {
                return this._errors;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AggregateError.prototype, "count", {
            get: function () {
                return this._errors.length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AggregateError.prototype, "message", {
            get: function () {
                var hashMap = Indexer();
                for (var _i = 0, _a = this._errors; _i < _a.length; _i++) {
                    var err = _a[_i];
                    if (!!err) {
                        var str = "";
                        if (err instanceof AggregateError) {
                            str = err.message;
                        }
                        else if (err instanceof Error) {
                            str = err.message;
                        }
                        else if (!!err.message) {
                            str = "" + err.message;
                        }
                        else {
                            str = "" + err;
                        }
                        hashMap[str] = "";
                    }
                }
                var msg = "";
                var errs = Object.keys(hashMap);
                for (var _b = 0, errs_1 = errs; _b < errs_1.length; _b++) {
                    var err = errs_1[_b];
                    if (!!msg) {
                        msg += "\r\n";
                    }
                    msg += "" + err;
                }
                if (!msg) {
                    msg = "Aggregate Error";
                }
                return msg;
            },
            enumerable: false,
            configurable: true
        });
        AggregateError.prototype.toString = function () {
            return "AggregateError: " + "\r\n" + this.message;
        };
        return AggregateError;
    }(BaseError));
    exports.AggregateError = AggregateError;
    sys.isValidationError = function (obj) {
        return (!!obj && obj instanceof ValidationError);
    };
    var ValidationError = (function (_super) {
        __extends(ValidationError, _super);
        function ValidationError(validations, item) {
            var _this = this;
            var message = lang_2.ERRS.ERR_VALIDATION + "\r\n";
            validations.forEach(function (err, i) {
                if (i > 0) {
                    message = message + "\r\n";
                }
                if (!!err.fieldName) {
                    message = message + " " + lang_2.STRS.TEXT.txtField + ": '" + err.fieldName + "'  " + err.errors.join(", ");
                }
                else {
                    message = message + err.errors.join(", ");
                }
            });
            _this = _super.call(this, message) || this;
            _this._validations = validations;
            _this._item = item;
            return _this;
        }
        Object.defineProperty(ValidationError.prototype, "item", {
            get: function () {
                return this._item;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ValidationError.prototype, "validations", {
            get: function () {
                return this._validations;
            },
            enumerable: false,
            configurable: true
        });
        return ValidationError;
    }(BaseError));
    exports.ValidationError = ValidationError;
});
define("jriapp_shared/utils/error", ["require", "exports", "jriapp_shared/consts", "jriapp_shared/errors", "jriapp_shared/utils/coreutils"], function (require, exports, consts_2, errors_1, coreutils_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERROR = void 0;
    var Indexer = coreutils_3.CoreUtils.Indexer;
    var ERROR = (function () {
        function ERROR() {
        }
        ERROR.addHandler = function (name, handler) {
            ERROR._handlers[name] = handler;
        };
        ERROR.removeHandler = function (name) {
            delete ERROR._handlers[name];
        };
        ERROR.handleError = function (sender, error, source) {
            if (ERROR.checkIsDummy(error)) {
                return true;
            }
            var handler, isHandled = false;
            handler = ERROR._handlers[consts_2.APP_NAME];
            if (!!handler) {
                if (handler === sender) {
                    handler = null;
                }
                else {
                    isHandled = handler.handleError(error, source);
                }
            }
            if (!isHandled) {
                handler = ERROR._handlers["*"];
                if (!!handler) {
                    if (handler === sender) {
                        handler = null;
                    }
                    else {
                        isHandled = handler.handleError(error, source);
                    }
                }
            }
            return isHandled;
        };
        ERROR.throwDummy = function (err) {
            if (ERROR.checkIsDummy(err)) {
                throw err;
            }
            else {
                throw new errors_1.DummyError(err);
            }
        };
        ERROR.checkIsDummy = function (error) {
            return !!error && !!error.isDummy;
        };
        ERROR.checkIsAbort = function (error) {
            return !!error && (error instanceof errors_1.AbortError);
        };
        ERROR.reThrow = function (ex, isHandled) {
            if (!isHandled) {
                throw ex;
            }
            else {
                return ERROR.throwDummy(ex);
            }
        };
        ERROR.abort = function (reason) {
            throw new errors_1.AbortError(reason);
        };
        ERROR._handlers = Indexer();
        return ERROR;
    }());
    exports.ERROR = ERROR;
});
define("jriapp_shared/utils/debug", ["require", "exports", "jriapp_shared/int"], function (require, exports, int_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEBUG = void 0;
    var DEBUG = (function () {
        function DEBUG() {
        }
        DEBUG.checkStartDebugger = function () {
            if (int_1.DebugLevel === 2) {
                debugger;
            }
        };
        DEBUG.isDebugging = function () {
            return int_1.DebugLevel > 0;
        };
        return DEBUG;
    }());
    exports.DEBUG = DEBUG;
});
define("jriapp_shared/utils/eventhelper", ["require", "exports", "jriapp_shared/lang", "jriapp_shared/utils/checks", "jriapp_shared/utils/strutils", "jriapp_shared/utils/coreutils", "jriapp_shared/utils/debug"], function (require, exports, lang_3, checks_4, strutils_2, coreutils_4, debug_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventHelper = void 0;
    var Indexer = coreutils_4.CoreUtils.Indexer, isFunc = checks_4.Checks.isFunc, format = strutils_2.StringUtils.format, debug = debug_1.DEBUG;
    var EventList = (function () {
        function EventList() {
        }
        EventList.Create = function () {
            return {};
        };
        EventList.Node = function (handler, context) {
            return { fn: handler, context: !context ? null : context };
        };
        EventList.count = function (list) {
            if (!list) {
                return 0;
            }
            var nsKeys, cnt = 0, obj;
            for (var j = 0; j <= 2; ++j) {
                obj = list[j];
                if (!!obj) {
                    nsKeys = Object.keys(obj);
                    for (var i = 0; i < nsKeys.length; ++i) {
                        cnt += obj[nsKeys[i]].length;
                    }
                }
            }
            return cnt;
        };
        EventList.append = function (list, node, ns, priority) {
            if (priority === void 0) { priority = 0; }
            if (!ns) {
                ns = "*";
            }
            var obj = list[priority];
            if (!obj) {
                list[priority] = obj = Indexer();
            }
            var arr = obj[ns];
            if (!arr) {
                obj[ns] = arr = [];
            }
            arr.push(node);
        };
        EventList.remove = function (list, ns) {
            if (!list) {
                return;
            }
            var nsKeys, obj;
            if (!ns) {
                ns = "*";
            }
            for (var j = 0; j <= 2; ++j) {
                obj = list[j];
                if (!!obj) {
                    if (ns === "*") {
                        nsKeys = Object.keys(obj);
                        for (var i = 0; i < nsKeys.length; ++i) {
                            delete obj[nsKeys[i]];
                        }
                    }
                    else {
                        delete obj[ns];
                    }
                }
            }
        };
        EventList.toArray = function (list) {
            if (!list) {
                return [];
            }
            var res = [];
            for (var k = 2; k >= 0; k -= 1) {
                var obj = list[k];
                if (!!obj) {
                    var nsKeys = Object.keys(obj);
                    for (var i = 0; i < nsKeys.length; ++i) {
                        var arr = obj[nsKeys[i]];
                        for (var j = 0; j < arr.length; ++j) {
                            res.push(arr[j]);
                        }
                    }
                }
            }
            return res;
        };
        return EventList;
    }());
    var evList = EventList;
    var EventHelper = (function () {
        function EventHelper() {
        }
        EventHelper.removeNS = function (ev, ns) {
            if (!ev) {
                return;
            }
            if (!ns) {
                ns = "*";
            }
            var keys = Object.keys(ev);
            for (var i = 0; i < keys.length; i += 1) {
                if (ns === "*") {
                    delete ev[keys[i]];
                }
                else {
                    evList.remove(ev[keys[i]], ns);
                }
            }
        };
        EventHelper.add = function (ev, name, handler, nmspace, context, priority) {
            if (!ev) {
                debug.checkStartDebugger();
                throw new Error(format(lang_3.ERRS.ERR_ASSERTION_FAILED, "ev is a valid object"));
            }
            if (!isFunc(handler)) {
                throw new Error(lang_3.ERRS.ERR_EVENT_INVALID_FUNC);
            }
            if (!name) {
                throw new Error(format(lang_3.ERRS.ERR_EVENT_INVALID, "[Empty]"));
            }
            var n = name, ns = !nmspace ? "*" : "" + nmspace;
            var list = ev[n];
            var node = evList.Node(handler, context);
            if (!list) {
                ev[n] = list = evList.Create();
            }
            evList.append(list, node, ns, priority);
        };
        EventHelper.remove = function (ev, name, nmspace) {
            if (!ev) {
                return null;
            }
            var ns = !nmspace ? "*" : "" + nmspace;
            if (!name) {
                EventHelper.removeNS(ev, ns);
            }
            else {
                if (ns === "*") {
                    delete ev[name];
                }
                else {
                    evList.remove(ev[name], ns);
                }
            }
        };
        EventHelper.count = function (ev, name) {
            if (!ev) {
                return 0;
            }
            return (!name) ? 0 : evList.toArray(ev[name]).length;
        };
        EventHelper.raise = function (sender, ev, name, args) {
            if (!ev) {
                return;
            }
            if (!!name) {
                var arr = evList.toArray(ev[name]), len = arr.length;
                for (var i = 0; i < len; i++) {
                    var node = arr[i];
                    node.fn.apply(node.context, [sender, args]);
                }
            }
        };
        EventHelper.raiseProp = function (sender, ev, prop, args) {
            if (!ev) {
                return;
            }
            if (!!prop) {
                var isAllProp = prop === "*";
                if (!isAllProp) {
                    EventHelper.raise(sender, ev, "0*", args);
                }
                EventHelper.raise(sender, ev, "0" + prop, args);
            }
        };
        return EventHelper;
    }());
    exports.EventHelper = EventHelper;
});
define("jriapp_shared/object", ["require", "exports", "jriapp_shared/lang", "jriapp_shared/utils/sysutils", "jriapp_shared/utils/coreutils", "jriapp_shared/utils/checks", "jriapp_shared/utils/error", "jriapp_shared/utils/eventhelper"], function (require, exports, lang_4, sysutils_2, coreutils_5, checks_5, error_1, eventhelper_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseObject = exports.ObjectEvents = exports.dummyEvents = exports.createObjectEvents = exports.OBJ_EVENTS = exports.ObjState = exports.objSignature = void 0;
    var isHasProp = checks_5.Checks.isHasProp, evHelper = eventhelper_1.EventHelper, sys = sysutils_2.SysUtils, Indexer = coreutils_5.CoreUtils.Indexer, signature = { signature: "BaseObject" };
    exports.objSignature = signature;
    sys.isBaseObj = function (obj) {
        return (!!obj && obj.__objSig === signature);
    };
    var ObjState;
    (function (ObjState) {
        ObjState[ObjState["None"] = 0] = "None";
        ObjState[ObjState["Disposing"] = 1] = "Disposing";
        ObjState[ObjState["Disposed"] = 2] = "Disposed";
    })(ObjState = exports.ObjState || (exports.ObjState = {}));
    var OBJ_EVENTS;
    (function (OBJ_EVENTS) {
        OBJ_EVENTS["error"] = "error";
        OBJ_EVENTS["disposed"] = "disposed";
    })(OBJ_EVENTS = exports.OBJ_EVENTS || (exports.OBJ_EVENTS = {}));
    function createObjectEvents(owner) {
        return new ObjectEvents(owner);
    }
    exports.createObjectEvents = createObjectEvents;
    exports.dummyEvents = {
        canRaise: function (_name) { return false; },
        on: function (_name, _handler, _nmspace, _context, _priority) {
            throw new Error("Object disposed");
        },
        off: function (_name, _nmspace) { return void 0; },
        offNS: function (_nmspace) { return void 0; },
        raise: function (_name, _args) { return void 0; },
        raiseProp: function (_name) { return void 0; },
        onProp: function (_prop, _handler, _nmspace, _context, _priority) {
            throw new Error("Object disposed");
        },
        offProp: function (_prop, _nmspace) { return void 0; },
        addOnDisposed: function (_handler, _nmspace, _context, _priority) {
            throw new Error("Object disposed");
        },
        offOnDisposed: function (_nmspace) {
            throw new Error("Object disposed");
        },
        addOnError: function (_handler, _nmspace, _context, _priority) {
            throw new Error("Object disposed");
        },
        offOnError: function (_nmspace) {
            throw new Error("Object disposed");
        },
        get owner() {
            return null;
        }
    };
    var ObjectEvents = (function () {
        function ObjectEvents(owner) {
            this._events = null;
            this._owner = owner;
        }
        ObjectEvents.prototype.canRaise = function (name) {
            return !!this._events && evHelper.count(this._events, name) > 0;
        };
        ObjectEvents.prototype.on = function (name, handler, nmspace, context, priority) {
            if (!this._events) {
                this._events = Indexer();
            }
            evHelper.add(this._events, name, handler, nmspace, context, priority);
        };
        ObjectEvents.prototype.off = function (name, nmspace) {
            evHelper.remove(this._events, name, nmspace);
            if (!name && !nmspace) {
                this._events = null;
            }
        };
        ObjectEvents.prototype.offNS = function (nmspace) {
            this.off(null, nmspace);
        };
        ObjectEvents.prototype.raise = function (name, args) {
            if (!name) {
                throw new Error(lang_4.ERRS.ERR_EVENT_INVALID);
            }
            evHelper.raise(this._owner, this._events, name, args);
        };
        ObjectEvents.prototype.raiseProp = function (name) {
            if (!name) {
                throw new Error(lang_4.ERRS.ERR_PROP_NAME_EMPTY);
            }
            evHelper.raiseProp(this._owner, this._events, name, { property: name });
        };
        ObjectEvents.prototype.onProp = function (prop, handler, nmspace, context, priority) {
            if (!prop) {
                throw new Error(lang_4.ERRS.ERR_PROP_NAME_EMPTY);
            }
            if (!this._events) {
                this._events = Indexer();
            }
            evHelper.add(this._events, "0" + prop, handler, nmspace, context, priority);
        };
        ObjectEvents.prototype.offProp = function (prop, nmspace) {
            if (this._owner.getIsDisposed()) {
                return;
            }
            if (!!prop) {
                evHelper.remove(this._events, "0" + prop, nmspace);
            }
            else {
                evHelper.removeNS(this._events, nmspace);
            }
        };
        ObjectEvents.prototype.addOnDisposed = function (handler, nmspace, context, priority) {
            this.on("disposed", handler, nmspace, context, priority);
        };
        ObjectEvents.prototype.offOnDisposed = function (nmspace) {
            this.off("disposed", nmspace);
        };
        ObjectEvents.prototype.addOnError = function (handler, nmspace, context, priority) {
            this.on("error", handler, nmspace, context, priority);
        };
        ObjectEvents.prototype.offOnError = function (nmspace) {
            this.off("error", nmspace);
        };
        Object.defineProperty(ObjectEvents.prototype, "owner", {
            get: function () {
                return this._owner;
            },
            enumerable: false,
            configurable: true
        });
        return ObjectEvents;
    }());
    exports.ObjectEvents = ObjectEvents;
    var BaseObject = (function () {
        function BaseObject() {
            this._objState = 0;
            this._objEvents = null;
        }
        BaseObject.prototype.setDisposing = function () {
            this._objState = 1;
        };
        BaseObject.prototype._createObjEvents = function () {
            return new ObjectEvents(this);
        };
        BaseObject.prototype.isHasProp = function (prop) {
            return isHasProp(this, prop);
        };
        BaseObject.prototype.handleError = function (error, source) {
            if (error_1.ERROR.checkIsDummy(error)) {
                return true;
            }
            if (!error.message) {
                error = new Error("Error: " + error);
            }
            var args = { error: error, source: source, isHandled: false };
            this.objEvents.raise("error", args);
            var isHandled = args.isHandled;
            if (!isHandled) {
                isHandled = error_1.ERROR.handleError(this, error, source);
            }
            return isHandled;
        };
        BaseObject.prototype.getIsDisposed = function () {
            return this._objState === 2;
        };
        BaseObject.prototype.getIsStateDirty = function () {
            return this._objState !== 0;
        };
        BaseObject.prototype.dispose = function () {
            if (this._objState === 2) {
                return;
            }
            try {
                if (!!this._objEvents) {
                    this._objEvents.raise("disposed", {});
                    this._objEvents.off();
                    this._objEvents = null;
                }
            }
            finally {
                this._objState = 2;
            }
        };
        Object.defineProperty(BaseObject.prototype, "objEvents", {
            get: function () {
                if (this._objState === 2) {
                    return exports.dummyEvents;
                }
                if (!this._objEvents) {
                    this._objEvents = this._createObjEvents();
                }
                return this._objEvents;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseObject.prototype, "__objSig", {
            get: function () {
                return signature;
            },
            enumerable: false,
            configurable: true
        });
        return BaseObject;
    }());
    exports.BaseObject = BaseObject;
});
define("jriapp_shared/utils/queue", ["require", "exports", "jriapp_shared/utils/error", "jriapp_shared/utils/promise", "jriapp_shared/utils/coreutils"], function (require, exports, error_2, promise_1, coreutils_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createQueue = void 0;
    var Indexer = coreutils_6.CoreUtils.Indexer, error = error_2.ERROR, MAX_NUM = 99999900000;
    function createQueue(interval) {
        if (interval === void 0) { interval = 0; }
        var _tasks = [], _taskMap = Indexer(), _timer = null, _newTaskId = 1;
        var _queue = {
            cancel: function (taskId) {
                var task = _taskMap[taskId];
                if (!!task) {
                    task.func = null;
                }
            },
            enque: function (func) {
                var taskId = _newTaskId;
                _newTaskId += 1;
                var task = { taskId: taskId, func: func };
                _tasks.push(task);
                _taskMap[taskId] = task;
                if (!_timer) {
                    _timer = setTimeout(function () {
                        var arr = _tasks;
                        _timer = null;
                        _tasks = [];
                        if (_newTaskId > MAX_NUM) {
                            _newTaskId = 1;
                        }
                        try {
                            arr.forEach(function (task) {
                                try {
                                    if (!!task.func) {
                                        task.func();
                                    }
                                }
                                catch (err) {
                                    error.handleError(_queue, err, _queue);
                                }
                            });
                        }
                        finally {
                            _taskMap = Indexer();
                            for (var i = 0; i < _tasks.length; i += 1) {
                                _taskMap[_tasks[i].taskId] = _tasks[i];
                            }
                            ;
                        }
                    }, interval);
                }
                return taskId;
            },
            execAsync: function (func) {
                var deferred = promise_1.createDefer(true);
                var fn = function () {
                    try {
                        deferred.resolve(func());
                    }
                    catch (err) {
                        deferred.reject(err);
                    }
                };
                _queue.enque(fn);
                return deferred.promise();
            }
        };
        return _queue;
    }
    exports.createQueue = createQueue;
});
define("jriapp_shared/utils/promise", ["require", "exports", "jriapp_shared/utils/error", "jriapp_shared/errors", "jriapp_shared/utils/checks", "jriapp_shared/utils/queue", "jriapp_shared/utils/ipromise"], function (require, exports, error_3, errors_2, checks_6, queue_1, ipromise_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbortablePromise = exports.CancellationTokenSource = exports.StatefulPromise = exports.promiseSerial = exports.race = exports.whenAll = exports.getTaskQueue = exports.createSyncDefer = exports.createDefer = void 0;
    __exportStar(ipromise_1, exports);
    var _undefined = checks_6.Checks._undefined, isFunc = checks_6.Checks.isFunc, isThenable = checks_6.Checks.isThenable, isArray = checks_6.Checks.isArray;
    var taskQueue = null;
    function createDefer(isSync) {
        return new StatefulPromise(null, isSync).deferred();
    }
    exports.createDefer = createDefer;
    function createSyncDefer() {
        return createDefer(true);
    }
    exports.createSyncDefer = createSyncDefer;
    function getTaskQueue() {
        if (!taskQueue) {
            taskQueue = new TaskQueue();
        }
        return taskQueue;
    }
    exports.getTaskQueue = getTaskQueue;
    function whenAll(promises) {
        var results = [], resolved = createDefer().resolve(null);
        var merged = promises.reduce(function (acc, p) { return acc.then(function () { return p; }).then(function (r) { results.push(r); return r; }); }, resolved);
        return merged.then(function () { return results; });
    }
    exports.whenAll = whenAll;
    function race(promises) {
        return new StatefulPromise(function (res, rej) {
            promises.forEach(function (p) { return p.then(res).then(_undefined, rej); });
        });
    }
    exports.race = race;
    function promiseSerial(funcs) {
        return funcs.reduce(function (promise, func) { return promise.then(function (result) { return func().then(function (res) { return result.concat(res); }); }); }, StatefulPromise.resolve([]));
    }
    exports.promiseSerial = promiseSerial;
    function dispatch(isSync, task) {
        if (!isSync) {
            getTaskQueue().enque(task);
        }
        else {
            task();
        }
    }
    var TaskQueue = (function () {
        function TaskQueue() {
            this._queue = queue_1.createQueue(0);
        }
        TaskQueue.prototype.enque = function (task) {
            return this._queue.enque(task);
        };
        TaskQueue.prototype.cancel = function (taskId) {
            this._queue.cancel(taskId);
        };
        return TaskQueue;
    }());
    var Callback = (function () {
        function Callback(isSync, successCB, errorCB) {
            this._isSync = isSync;
            this._successCB = successCB;
            this._errorCB = errorCB;
            this._deferred = new StatefulPromise(null, isSync).deferred();
        }
        Callback.prototype.resolve = function (value, defer) {
            var _this = this;
            if (!isFunc(this._successCB)) {
                this._deferred.resolve(value);
                return;
            }
            if (!defer) {
                this._dispatch(this._successCB, value);
            }
            else {
                dispatch(this._isSync, function () { return _this._dispatch(_this._successCB, value); });
            }
        };
        Callback.prototype.reject = function (error, defer) {
            var _this = this;
            if (!isFunc(this._errorCB)) {
                this._deferred.reject(error);
                return;
            }
            if (!defer) {
                this._dispatch(this._errorCB, error);
            }
            else {
                dispatch(this._isSync, function () { return _this._dispatch(_this._errorCB, error); });
            }
        };
        Callback.prototype._dispatch = function (callback, arg) {
            try {
                var result = callback(arg);
                this._deferred.resolve(result);
            }
            catch (err) {
                this._deferred.reject(err);
            }
        };
        Object.defineProperty(Callback.prototype, "deferred", {
            get: function () {
                return this._deferred;
            },
            enumerable: false,
            configurable: true
        });
        return Callback;
    }());
    var Deferred = (function () {
        function Deferred(promise, isSync) {
            if (isSync === void 0) { isSync = false; }
            this._promise = promise;
            this._isSync = isSync;
            this._value = _undefined;
            this._error = _undefined;
            this._state = 0;
            this._stack = [];
        }
        Deferred.prototype._resolve = function (value) {
            var _this = this;
            var pending = true;
            try {
                if (isThenable(value)) {
                    if (value === this._promise) {
                        throw new TypeError("recursive resolution");
                    }
                    var fnThen = value.then;
                    this._state = 1;
                    fnThen.call(value, function (result) {
                        if (pending) {
                            pending = false;
                            _this._resolve(result);
                        }
                    }, function (error) {
                        if (pending) {
                            pending = false;
                            _this._reject(error);
                        }
                    });
                }
                else {
                    this._state = 1;
                    dispatch(this._isSync, function () {
                        _this._state = 2;
                        _this._value = value;
                        var stackSize = _this._stack.length;
                        for (var i = 0; i < stackSize; i++) {
                            _this._stack[i].resolve(value, false);
                        }
                        _this._stack.splice(0, stackSize);
                    });
                }
            }
            catch (err) {
                if (pending) {
                    this._reject(err);
                }
            }
            return this;
        };
        Deferred.prototype._reject = function (error) {
            var _this = this;
            this._state = 1;
            dispatch(this._isSync, function () {
                _this._state = 3;
                _this._error = error;
                var stackSize = _this._stack.length;
                for (var i = 0; i < stackSize; i++) {
                    _this._stack[i].reject(error, false);
                }
                _this._stack.splice(0, stackSize);
            });
            return this;
        };
        Deferred.prototype._then = function (successCB, errorCB) {
            if (!isFunc(successCB) && !isFunc(errorCB)) {
                return this._promise;
            }
            var cb = new Callback(this._isSync, successCB, errorCB);
            switch (this._state) {
                case 0:
                case 1:
                    this._stack.push(cb);
                    break;
                case 2:
                    cb.resolve(this._value, true);
                    break;
                case 3:
                    cb.reject(this._error, true);
                    break;
            }
            return cb.deferred.promise();
        };
        Deferred.prototype.resolve = function (value) {
            if (this._state !== 0) {
                return this.promise();
            }
            return this._resolve(value).promise();
        };
        Deferred.prototype.reject = function (error) {
            if (this._state !== 0) {
                return this.promise();
            }
            return this._reject(error).promise();
        };
        Deferred.prototype.promise = function () {
            return this._promise;
        };
        Deferred.prototype.state = function () {
            return this._state;
        };
        return Deferred;
    }());
    var StatefulPromise = (function () {
        function StatefulPromise(fn, isSync) {
            if (isSync === void 0) { isSync = false; }
            var deferred = new Deferred(this, isSync);
            this._deferred = deferred;
            if (!!fn) {
                getTaskQueue().enque(function () {
                    fn(function (res) { return deferred.resolve(res); }, function (err) { return deferred.reject(err); });
                });
            }
        }
        StatefulPromise.prototype.then = function (onFulfilled, onRejected) {
            return this._deferred._then(onFulfilled, onRejected);
        };
        StatefulPromise.prototype.catch = function (onRejected) {
            return this._deferred._then(_undefined, onRejected);
        };
        StatefulPromise.prototype.finally = function (onFinally) {
            return this._deferred._then(function (res) {
                onFinally();
                return res;
            }, function (err) {
                onFinally();
                return StatefulPromise.reject(err);
            });
        };
        StatefulPromise.all = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return (args.length === 1 && isArray(args[0])) ? whenAll(args[0]) : whenAll(args);
        };
        StatefulPromise.race = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return (args.length === 1 && isArray(args[0])) ? race(args[0]) : race(args);
        };
        StatefulPromise.reject = function (reason, isSync) {
            var deferred = createDefer(isSync);
            deferred.reject(reason);
            return deferred.promise();
        };
        StatefulPromise.resolve = function (value, isSync) {
            var deferred = createDefer(isSync);
            deferred.resolve(value);
            return deferred.promise();
        };
        StatefulPromise.prototype.state = function () {
            return this._deferred.state();
        };
        StatefulPromise.prototype.deferred = function () {
            return this._deferred;
        };
        return StatefulPromise;
    }());
    exports.StatefulPromise = StatefulPromise;
    var CancellationTokenSource = (function () {
        function CancellationTokenSource() {
            this._callbacks = [];
            this._isCancelled = false;
            this._reason = "";
        }
        CancellationTokenSource.prototype._cancel = function () {
            var callbacks = this._callbacks;
            this._callbacks = [];
            var reason = this._reason;
            getTaskQueue().enque(function () {
                for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {
                    var callback = callbacks_1[_i];
                    callback(reason);
                }
            });
        };
        CancellationTokenSource.prototype.register = function (fn) {
            this._callbacks.push(fn);
            if (this._isCancelled) {
                this._cancel();
            }
        };
        CancellationTokenSource.prototype.cancel = function (reason) {
            if (this._isCancelled) {
                return;
            }
            this._isCancelled = true;
            this._reason = reason;
            this._cancel();
        };
        Object.defineProperty(CancellationTokenSource.prototype, "isCancelled", {
            get: function () {
                return this._isCancelled;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CancellationTokenSource.prototype, "token", {
            get: function () {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        return CancellationTokenSource;
    }());
    exports.CancellationTokenSource = CancellationTokenSource;
    var AbortablePromise = (function (_super) {
        __extends(AbortablePromise, _super);
        function AbortablePromise(fn) {
            var _this = _super.call(this, null, false) || this;
            _this._tokenSource = null;
            _this._aborted = false;
            if (!!fn) {
                _this._tokenSource = new CancellationTokenSource();
                var self_1 = _this, deferred_1 = self_1.deferred(), tokenSource_1 = self_1._tokenSource;
                self_1.catch(function (err) {
                    if (!!self_1._tokenSource && error_3.ERROR.checkIsAbort(err)) {
                        self_1._tokenSource.cancel();
                    }
                }).finally(function () {
                    self_1._tokenSource = null;
                });
                getTaskQueue().enque(function () {
                    fn(function (res) { return deferred_1.resolve(res); }, function (err) { return deferred_1.reject(err); }, tokenSource_1.token);
                });
            }
            return _this;
        }
        AbortablePromise.prototype.abort = function (reason) {
            var self = this;
            if (!self._aborted) {
                self._aborted = true;
                self.deferred().reject(new errors_2.AbortError(reason));
            }
        };
        return AbortablePromise;
    }(StatefulPromise));
    exports.AbortablePromise = AbortablePromise;
});
define("jriapp_shared/utils/debounce", ["require", "exports", "jriapp_shared/utils/promise", "jriapp_shared/utils/error"], function (require, exports, promise_2, error_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Debounce = void 0;
    var error = error_4.ERROR, win = window;
    var Debounce = (function () {
        function Debounce(interval) {
            if (interval === void 0) { interval = 0; }
            this._timer = null;
            this._interval = interval;
            this._fn = null;
        }
        Debounce.prototype.dispose = function () {
            this.cancel();
            this._timer = void 0;
        };
        Debounce.prototype.enque = function (fn) {
            var _this = this;
            if (this.getIsDisposed()) {
                return;
            }
            if (!fn) {
                throw new Error("Debounce: Invalid Operation");
            }
            this._fn = fn;
            if (!!this._interval && !!this._timer) {
                clearTimeout(this._timer);
                this._timer = null;
            }
            if (!this._timer) {
                var callback = function () {
                    var fn = _this._fn;
                    _this._timer = null;
                    _this._fn = null;
                    if (!!fn) {
                        try {
                            fn();
                        }
                        catch (err) {
                            error.handleError(win, err, win);
                        }
                    }
                };
                if (!this._interval) {
                    this._timer = promise_2.getTaskQueue().enque(callback);
                }
                else {
                    this._timer = setTimeout(callback, this._interval);
                }
            }
        };
        Debounce.prototype.cancel = function () {
            if (!!this._timer) {
                if (!this._interval) {
                    promise_2.getTaskQueue().cancel(this._timer);
                }
                else {
                    clearTimeout(this._timer);
                }
            }
            this._timer = null;
            this._fn = null;
        };
        Object.defineProperty(Debounce.prototype, "interval", {
            get: function () {
                return this._interval;
            },
            enumerable: false,
            configurable: true
        });
        Debounce.prototype.getIsDisposed = function () {
            return this._timer === void 0;
        };
        return Debounce;
    }());
    exports.Debounce = Debounce;
});
define("jriapp_shared/utils/jsonbag", ["require", "exports", "jriapp_shared/object", "jriapp_shared/utils/coreutils", "jriapp_shared/utils/strutils", "jriapp_shared/utils/sysutils", "jriapp_shared/utils/checks", "jriapp_shared/utils/debounce", "jriapp_shared/errors"], function (require, exports, object_1, coreutils_7, strutils_3, sysutils_3, checks_7, debounce_1, errors_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonBag = void 0;
    var forEach = coreutils_7.CoreUtils.forEach, getValue = coreutils_7.CoreUtils.getValue, setValue = coreutils_7.CoreUtils.setValue, Indexer = coreutils_7.CoreUtils.Indexer, startsWith = strutils_3.StringUtils.startsWith, trimBrackets = strutils_3.StringUtils.trimBrackets, isArray = checks_7.Checks.isArray, _undefined = checks_7.Checks._undefined, sys = sysutils_3.SysUtils;
    var BAG_EVENTS;
    (function (BAG_EVENTS) {
        BAG_EVENTS["errors_changed"] = "errors_changed";
        BAG_EVENTS["validate_bag"] = "validate_bag";
        BAG_EVENTS["validate_field"] = "validate_field";
    })(BAG_EVENTS || (BAG_EVENTS = {}));
    var JsonBag = (function (_super) {
        __extends(JsonBag, _super);
        function JsonBag(json, jsonChanged) {
            var _this = _super.call(this) || this;
            _this._json = void 0;
            _this._val = Indexer();
            _this._saveVal = null;
            _this._debounce = new debounce_1.Debounce();
            _this.resetJson(json);
            _this._jsonChanged = jsonChanged;
            _this._errors = Indexer();
            return _this;
        }
        JsonBag.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._debounce.dispose();
            this._jsonChanged = null;
            this._json = _undefined;
            this._val = Indexer();
            _super.prototype.dispose.call(this);
        };
        JsonBag.prototype.isHasProp = function (prop) {
            if (startsWith(prop, "[")) {
                return true;
            }
            return _super.prototype.isHasProp.call(this, prop);
        };
        JsonBag.prototype.addOnValidateBag = function (fn, nmspace, context) {
            this.objEvents.on("validate_bag", fn, nmspace, context);
        };
        JsonBag.prototype.offOnValidateBag = function (nmspace) {
            this.objEvents.off("validate_bag", nmspace);
        };
        JsonBag.prototype.addOnValidateField = function (fn, nmspace, context) {
            this.objEvents.on("validate_field", fn, nmspace, context);
        };
        JsonBag.prototype.offOnValidateField = function (nmspace) {
            this.objEvents.off("validate_field", nmspace);
        };
        JsonBag.prototype.addOnErrorsChanged = function (fn, nmspace, context) {
            this.objEvents.on("errors_changed", fn, nmspace, context);
        };
        JsonBag.prototype.offOnErrorsChanged = function (nmspace) {
            this.objEvents.off("errors_changed", nmspace);
        };
        JsonBag.prototype.onChanged = function () {
            var _this = this;
            this._debounce.enque(function () {
                if (!!_this._jsonChanged) {
                    _this._jsonChanged(_this._json);
                }
            });
        };
        JsonBag.prototype.resetJson = function (json) {
            if (json === void 0) { json = null; }
            if (this._json !== json) {
                this._json = json;
                this._val = (!json ? {} : JSON.parse(json));
                this.objEvents.raiseProp("json");
                this.objEvents.raiseProp("val");
                this.objEvents.raiseProp("[*]");
            }
        };
        JsonBag.prototype.updateJson = function () {
            var json = JSON.stringify(this._val);
            if (json !== this._json) {
                this._json = json;
                this.onChanged();
                this.objEvents.raiseProp("json");
                return true;
            }
            return false;
        };
        JsonBag.prototype._validateBag = function () {
            var args = {
                bag: this,
                result: []
            };
            this.objEvents.raise("validate_bag", args);
            return (!!args.result) ? args.result : [];
        };
        JsonBag.prototype._validateField = function (fieldName) {
            var args = {
                bag: this,
                fieldName: fieldName,
                errors: []
            };
            this.objEvents.raise("validate_field", args);
            return (!!args.errors && args.errors.length > 0) ? { fieldName: fieldName, errors: args.errors } : null;
        };
        JsonBag.prototype._onErrorsChanged = function () {
            this.objEvents.raise("errors_changed", {});
        };
        JsonBag.prototype._addErrors = function (errors) {
            var self = this;
            for (var _i = 0, errors_4 = errors; _i < errors_4.length; _i++) {
                var err = errors_4[_i];
                self._addError(err.fieldName, err.errors, true);
            }
            this._onErrorsChanged();
        };
        JsonBag.prototype._addError = function (fieldName, errors, ignoreChangeErrors) {
            if (!fieldName) {
                fieldName = "*";
            }
            if (!(isArray(errors) && errors.length > 0)) {
                this._removeError(fieldName, ignoreChangeErrors);
                return;
            }
            var itemErrors = this._errors;
            itemErrors[fieldName] = errors;
            if (!ignoreChangeErrors) {
                this._onErrorsChanged();
            }
        };
        JsonBag.prototype._removeError = function (fieldName, ignoreChangeErrors) {
            var itemErrors = this._errors;
            if (!itemErrors) {
                return false;
            }
            if (!fieldName) {
                fieldName = "*";
            }
            if (!itemErrors[fieldName]) {
                return false;
            }
            delete itemErrors[fieldName];
            if (!ignoreChangeErrors) {
                this._onErrorsChanged();
            }
            return true;
        };
        JsonBag.prototype._removeAllErrors = function () {
            this._errors = Indexer();
            this._onErrorsChanged();
        };
        JsonBag.prototype.getIsHasErrors = function () {
            return !!this._errors && Object.keys(this._errors).length > 0;
        };
        JsonBag.prototype.getFieldErrors = function (fieldName) {
            var bagErrors = this._errors;
            if (!bagErrors) {
                return [];
            }
            var name = fieldName;
            if (!fieldName) {
                fieldName = "*";
            }
            if (!bagErrors[fieldName]) {
                return [];
            }
            if (fieldName === "*") {
                name = null;
            }
            return [
                { fieldName: name, errors: bagErrors[fieldName] }
            ];
        };
        JsonBag.prototype.getAllErrors = function () {
            var bagErrors = this._errors;
            if (!bagErrors) {
                return [];
            }
            var res = [];
            forEach(bagErrors, function (name) {
                var fieldName = null;
                if (name !== "*") {
                    fieldName = name;
                }
                res.push({ fieldName: fieldName, errors: bagErrors[name] });
            });
            return res;
        };
        JsonBag.prototype.getIErrorNotification = function () {
            return this;
        };
        JsonBag.prototype.beginEdit = function () {
            if (!this.isEditing) {
                this._saveVal = JSON.stringify(this._val);
                return true;
            }
            return false;
        };
        JsonBag.prototype.endEdit = function () {
            if (this.isEditing) {
                this._removeAllErrors();
                var validationInfos = this._validateBag();
                if (validationInfos.length > 0) {
                    this._addErrors(validationInfos);
                }
                if (this.getIsHasErrors()) {
                    return false;
                }
                this._saveVal = null;
                this.updateJson();
                return true;
            }
            return false;
        };
        JsonBag.prototype.cancelEdit = function () {
            if (this.isEditing) {
                this._val = JSON.parse(this._saveVal);
                this._saveVal = null;
                this._removeAllErrors();
                this.objEvents.raiseProp("[*]");
                return true;
            }
            return false;
        };
        Object.defineProperty(JsonBag.prototype, "isEditing", {
            get: function () {
                return !!this._saveVal;
            },
            enumerable: false,
            configurable: true
        });
        JsonBag.prototype.getProp = function (name) {
            var fieldName = trimBrackets(name);
            return getValue(this._val, fieldName);
        };
        JsonBag.prototype.setProp = function (name, val) {
            var old = this.getProp(name);
            if (old !== val) {
                try {
                    var fieldName = trimBrackets(name);
                    setValue(this._val, fieldName, val, false);
                    sys.raiseProp(this, name);
                    this._removeError(name);
                    var validationInfo = this._validateField(name);
                    if (!!validationInfo && validationInfo.errors.length > 0) {
                        throw new errors_3.ValidationError([validationInfo], this);
                    }
                }
                catch (ex) {
                    var error = void 0;
                    if (sys.isValidationError(ex)) {
                        error = ex;
                    }
                    else {
                        error = new errors_3.ValidationError([
                            { fieldName: name, errors: [ex.message] }
                        ], this);
                    }
                    this._addError(name, error.validations[0].errors);
                    throw error;
                }
            }
        };
        Object.defineProperty(JsonBag.prototype, "isPropertyBag", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(JsonBag.prototype, "val", {
            get: function () {
                return this._val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(JsonBag.prototype, "json", {
            get: function () {
                return this._json;
            },
            enumerable: false,
            configurable: true
        });
        JsonBag.prototype.toString = function () {
            return "JsonBag";
        };
        return JsonBag;
    }(object_1.BaseObject));
    exports.JsonBag = JsonBag;
});
define("jriapp_shared/utils/logger", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LOGGER = void 0;
    var LOGGER = (function () {
        function LOGGER() {
        }
        LOGGER.log = function (str) {
            console.log(str);
        };
        LOGGER.warn = function (str) {
            console.warn(str);
        };
        LOGGER.error = function (str) {
            console.error(str);
        };
        return LOGGER;
    }());
    exports.LOGGER = LOGGER;
});
define("jriapp_shared/utils/asyncutils", ["require", "exports", "jriapp_shared/utils/promise", "jriapp_shared/utils/checks"], function (require, exports, promise_3, checks_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncUtils = void 0;
    var isString = checks_8.Checks.isString, isFunc = checks_8.Checks.isFunc, _whenAll = promise_3.whenAll, _race = promise_3.race, _getTaskQueue = promise_3.getTaskQueue, _createDefer = promise_3.createDefer;
    var AsyncUtils = (function () {
        function AsyncUtils() {
        }
        AsyncUtils.createDeferred = function (isSync) {
            return _createDefer(isSync);
        };
        AsyncUtils.reject = function (reason, isSync) {
            return promise_3.StatefulPromise.reject(reason, isSync);
        };
        AsyncUtils.resolve = function (value, isSync) {
            return promise_3.StatefulPromise.resolve(value, isSync);
        };
        AsyncUtils.promiseSerial = function (funcs) {
            return promise_3.promiseSerial(funcs);
        };
        AsyncUtils.whenAll = function (args) {
            return _whenAll(args);
        };
        AsyncUtils.race = function (promises) {
            return _race(promises);
        };
        AsyncUtils.getTaskQueue = function () {
            return _getTaskQueue();
        };
        AsyncUtils.delay = function (funcORvalue, time) {
            if (time === void 0) { time = 0; }
            return new promise_3.StatefulPromise(function (resolve, reject) {
                setTimeout(function () {
                    try {
                        if (isFunc(funcORvalue)) {
                            resolve(funcORvalue());
                        }
                        else {
                            resolve(funcORvalue);
                        }
                    }
                    catch (err) {
                        reject(err);
                    }
                }, time);
            }, true);
        };
        AsyncUtils.parseJSON = function (res) {
            return AsyncUtils.delay(function () {
                return (isString(res)) ? JSON.parse(res) : res;
            });
        };
        return AsyncUtils;
    }());
    exports.AsyncUtils = AsyncUtils;
});
define("jriapp_shared/utils/http", ["require", "exports", "jriapp_shared/utils/strutils", "jriapp_shared/errors", "jriapp_shared/utils/coreutils", "jriapp_shared/utils/promise"], function (require, exports, strUtils_2, errors_5, coreutils_8, promise_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpUtils = void 0;
    var forEach = coreutils_8.CoreUtils.forEach, merge = coreutils_8.CoreUtils.merge, Indexer = coreutils_8.CoreUtils.Indexer, startsWith = strUtils_2.StringUtils.startsWith, fastTrim = strUtils_2.StringUtils.fastTrim;
    var HttpUtils = (function () {
        function HttpUtils() {
        }
        HttpUtils.isStatusOK = function (status) {
            var chk = fastTrim("" + status);
            return chk.length === 3 && startsWith(chk, "2");
        };
        HttpUtils._getXMLRequest = function (url, method, deferred, headers) {
            var _a;
            var req = new XMLHttpRequest();
            req.open(method, url, true);
            req.responseType = "text";
            (_a = deferred.token) === null || _a === void 0 ? void 0 : _a.register(function () { req.abort(); });
            req.onload = function () {
                var status = "" + req.status;
                if (status === "200") {
                    var res = req.response;
                    deferred.resolve(res);
                }
                else {
                    if (HttpUtils.isStatusOK(status)) {
                        deferred.reject(new errors_5.DummyError(new Error("Status: \"" + status + "\" loading from URL: \"" + url + "\"")));
                    }
                    else {
                        deferred.reject(new Error("Error: \"" + status + "\" to load from URL: \"" + url + "\""));
                    }
                }
            };
            req.onerror = function () {
                deferred.reject(new Error("Error: \"" + req.status + "\" to load from URL: \"" + url + "\""));
            };
            req.ontimeout = function () {
                deferred.reject(new Error("Error: \"Request Timeout\" to load from URL: \"" + url + "\""));
            };
            req.onabort = function () {
                deferred.reject(new Error("HTTP Request Operation Aborted for URL: \"" + url + "\""));
            };
            req.timeout = HttpUtils.ajaxTimeOut * 1000;
            var _headers = merge(HttpUtils.defaultHeaders);
            _headers = merge(headers, _headers);
            forEach(_headers, function (name, val) {
                req.setRequestHeader(name, val);
            });
            return req;
        };
        HttpUtils.postAjax = function (url, postData, headers) {
            var _headers = merge(headers, { "Content-Type": "application/json; charset=utf-8" });
            return new promise_4.AbortablePromise(function (resolve, reject, token) {
                var req = HttpUtils._getXMLRequest(url, "POST", { resolve: resolve, reject: reject, token: token }, _headers);
                req.send(postData);
            });
        };
        HttpUtils.getAjax = function (url, headers) {
            return new promise_4.AbortablePromise(function (resolve, reject, token) {
                var req = HttpUtils._getXMLRequest(url, "GET", { resolve: resolve, reject: reject, token: token }, headers);
                req.send(null);
            });
        };
        HttpUtils.defaultHeaders = Indexer();
        HttpUtils.ajaxTimeOut = 600;
        return HttpUtils;
    }());
    exports.HttpUtils = HttpUtils;
});
define("jriapp_shared/utils/arrhelper", ["require", "exports", "jriapp_shared/utils/coreutils"], function (require, exports, coreutils_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArrayHelper = void 0;
    var toArray = coreutils_9.CoreUtils.toArray, Indexer = coreutils_9.CoreUtils.Indexer;
    var ArrayHelper = (function () {
        function ArrayHelper() {
        }
        ArrayHelper.clone = function (arr) {
            if (arr.length === 1) {
                return [arr[0]];
            }
            else {
                return Array.apply(null, arr);
            }
        };
        ArrayHelper.fromList = function (list) {
            if (!list)
                return [];
            return [].slice.call(list);
        };
        ArrayHelper.merge = function (arrays) {
            if (!arrays)
                return [];
            return [].concat.apply([], arrays);
        };
        ArrayHelper.distinct = function (arr) {
            if (!arr)
                return [];
            var map = Indexer(), len = arr.length;
            for (var i = 0; i < len; i += 1) {
                map["" + arr[i]] = arr[i];
            }
            return toArray(map);
        };
        ArrayHelper.toMap = function (arr, key) {
            var map = Indexer();
            if (!arr)
                return map;
            var len = arr.length;
            for (var i = 0; i < len; i += 1) {
                map[key(arr[i])] = arr[i];
            }
            return map;
        };
        ArrayHelper.remove = function (array, obj) {
            var i = array.indexOf(obj);
            if (i > -1) {
                array.splice(i, 1);
            }
            return i;
        };
        ArrayHelper.removeIndex = function (array, index) {
            var isOk = index > -1 && array.length > index;
            array.splice(index, 1);
            return isOk;
        };
        ArrayHelper.insert = function (array, obj, pos) {
            array.splice(pos, 0, obj);
        };
        return ArrayHelper;
    }());
    exports.ArrayHelper = ArrayHelper;
});
define("jriapp_shared/utils/dates", ["require", "exports", "jriapp_shared/utils/strutils", "jriapp_shared/utils/checks", "jriapp_shared/lang"], function (require, exports, strutils_4, checks_9, lang_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DateUtils = exports.TIME_KIND = void 0;
    var isNt = checks_9.Checks.isNt, formatStr = strutils_4.StringUtils.format;
    var TIME_KIND;
    (function (TIME_KIND) {
        TIME_KIND["YEAR"] = "year";
        TIME_KIND["MONTH"] = "month";
        TIME_KIND["WEEK"] = "week";
        TIME_KIND["DAY"] = "day";
        TIME_KIND["HOUR"] = "hour";
        TIME_KIND["MINUTE"] = "minute";
        TIME_KIND["SECOND"] = "second";
    })(TIME_KIND = exports.TIME_KIND || (exports.TIME_KIND = {}));
    function strToDate(val, format) {
        if (format === void 0) { format = "YYYYMMDD"; }
        if (!val) {
            return null;
        }
        var m = moment(val, format);
        if (!m.isValid()) {
            throw new Error(formatStr(lang_5.ERRS.ERR_CONV_INVALID_DATE, val));
        }
        return m.toDate();
    }
    function dateToStr(dt, format) {
        if (format === void 0) { format = "YYYYMMDD"; }
        if (isNt(dt)) {
            return "";
        }
        return moment(dt).format(format);
    }
    function add(dt, val, period) {
        return moment(dt).add(val, period).toDate();
    }
    var DateUtils = (function () {
        function DateUtils() {
        }
        DateUtils.isValid = function (val, format) {
            if (format === void 0) { format = "YYYYMMDD"; }
            if (!val) {
                return false;
            }
            var m = moment(val, format);
            return m.isValid();
        };
        DateUtils.strToDatePartial = function (format) {
            return function (val) { return strToDate(val, format); };
        };
        DateUtils.dateToStrPartial = function (format) {
            return function (dt) { return dateToStr(dt, format); };
        };
        DateUtils.addPartial1 = function (period) {
            return function (dt, val) { return add(dt, val, period); };
        };
        DateUtils.addPartial2 = function (period) {
            return function (val) { return function (dt) { return add(dt, val, period); }; };
        };
        DateUtils.addPartial3 = function (period) {
            return function (dt) { return function (val) { return add(dt, val, period); }; };
        };
        DateUtils.trim = function (dt) {
            return moment(dt).startOf("day").toDate();
        };
        DateUtils.today = function () {
            return moment().startOf("day").toDate();
        };
        DateUtils.now = function () {
            return new Date();
        };
        DateUtils.yesterday = function (dt) {
            return moment(dt).startOf("day").add(-1, "day").toDate();
        };
        DateUtils.tomorrow = function (dt) {
            return moment(dt).startOf("day").add(1, "day").toDate();
        };
        DateUtils.startOf = function (period, dt) {
            return moment(dt).startOf(period).toDate();
        };
        DateUtils.endOf = function (period, dt) {
            return moment(dt).endOf(period).toDate();
        };
        DateUtils.strToDate = strToDate;
        DateUtils.dateToStr = dateToStr;
        DateUtils.add = add;
        return DateUtils;
    }());
    exports.DateUtils = DateUtils;
});
define("jriapp_shared/utils/utils", ["require", "exports", "jriapp_shared/utils/coreutils", "jriapp_shared/utils/debug", "jriapp_shared/utils/error", "jriapp_shared/utils/logger", "jriapp_shared/utils/sysutils", "jriapp_shared/utils/asyncutils", "jriapp_shared/utils/http", "jriapp_shared/utils/strutils", "jriapp_shared/utils/checks", "jriapp_shared/utils/arrhelper", "jriapp_shared/utils/promise", "jriapp_shared/utils/dates"], function (require, exports, coreutils_10, debug_2, error_5, logger_1, sysutils_4, asyncutils_1, http_1, strutils_5, checks_10, arrhelper_1, promise_5, dates_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Utils = void 0;
    var Utils = (function () {
        function Utils() {
        }
        Utils.check = checks_10.Checks;
        Utils.str = strutils_5.StringUtils;
        Utils.arr = arrhelper_1.ArrayHelper;
        Utils.http = http_1.HttpUtils;
        Utils.core = coreutils_10.CoreUtils;
        Utils.async = asyncutils_1.AsyncUtils;
        Utils.err = error_5.ERROR;
        Utils.log = logger_1.LOGGER;
        Utils.debug = debug_2.DEBUG;
        Utils.sys = sysutils_4.SysUtils;
        Utils.queue = promise_5.getTaskQueue();
        Utils.dates = dates_1.DateUtils;
        return Utils;
    }());
    exports.Utils = Utils;
});
define("jriapp_shared/utils/waitqueue", ["require", "exports", "jriapp_shared/object", "jriapp_shared/utils/coreutils"], function (require, exports, object_2, coreutils_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WaitQueue = void 0;
    var getNewID = coreutils_11.CoreUtils.getNewID, Indexer = coreutils_11.CoreUtils.Indexer, extend = coreutils_11.CoreUtils.extend;
    var WaitQueue = (function (_super) {
        __extends(WaitQueue, _super);
        function WaitQueue(owner) {
            var _this = _super.call(this) || this;
            _this._uniqueID = getNewID("wq");
            _this._owner = owner;
            _this._queue = Indexer();
            return _this;
        }
        WaitQueue.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._owner.objEvents.offNS(this.uniqueID);
            this._queue = Indexer();
            this._owner = null;
            _super.prototype.dispose.call(this);
        };
        WaitQueue.prototype._checkQueue = function (prop, value) {
            if (!this._owner || this._owner.getIsStateDirty()) {
                return;
            }
            var self = this, propQueue = this._queue[prop];
            var task;
            if (!propQueue || propQueue.length === 0) {
                return;
            }
            var i, firstWinsTask = null;
            var groups = { group: null, tasks: [] }, found = [], forRemoval = [];
            for (i = 0; i < propQueue.length; i += 1) {
                task = propQueue[i];
                if (task.predicate(value)) {
                    if (!task.group && groups.tasks.length === 0) {
                        firstWinsTask = task;
                        break;
                    }
                    else if (!!task.group) {
                        if (!groups.group) {
                            groups.group = task.group;
                        }
                        if (groups.group === task.group) {
                            groups.tasks.push(task);
                        }
                    }
                }
            }
            if (!!firstWinsTask) {
                found.push(firstWinsTask);
                forRemoval.push(firstWinsTask);
            }
            else {
                while (groups.tasks.length > 0) {
                    task = groups.tasks.pop();
                    if (!firstWinsTask) {
                        firstWinsTask = task;
                    }
                    if (firstWinsTask.lastWins) {
                        if (found.length === 0) {
                            found.push(task);
                        }
                    }
                    else {
                        found.push(task);
                    }
                    forRemoval.push(task);
                }
            }
            try {
                if (found.length > 0) {
                    i = propQueue.length;
                    while (i > 0) {
                        i -= 1;
                        if (forRemoval.indexOf(propQueue[i]) > -1) {
                            propQueue.splice(i, 1);
                        }
                    }
                    for (var _i = 0, found_1 = found; _i < found_1.length; _i++) {
                        var task_1 = found_1[_i];
                        try {
                            task_1.action.apply(self._owner, task_1.args);
                        }
                        catch (ex) {
                            self._owner.handleError(ex, self);
                        }
                    }
                }
            }
            finally {
                if (propQueue.length === 0) {
                    delete this._queue[prop];
                    this._owner.objEvents.offProp(prop, this.uniqueID);
                }
            }
        };
        WaitQueue.prototype.enQueue = function (item) {
            var opts = extend({
                prop: "",
                groupName: null,
                predicate: null,
                action: null,
                actionArgs: [],
                lastWins: false
            }, item);
            var self = this;
            if (!this._owner) {
                return;
            }
            var property = opts.prop;
            var propQueue = this._queue[property];
            if (!propQueue) {
                propQueue = [];
                this._queue[property] = propQueue;
                this._owner.objEvents.onProp(property, function () {
                    setTimeout(function () {
                        if (self.getIsStateDirty()) {
                            return;
                        }
                        self._checkQueue(property, self._owner[property]);
                    }, 0);
                }, self.uniqueID);
            }
            var task = {
                predicate: opts.predicate,
                action: opts.action,
                group: opts.groupName,
                lastWins: opts.lastWins,
                args: (!opts.actionArgs ? [] : opts.actionArgs)
            };
            propQueue.push(task);
            self._checkQueue(property, self._owner[property]);
            setTimeout(function () {
                if (self.getIsStateDirty()) {
                    return;
                }
                self._checkQueue(property, self._owner[property]);
            }, 0);
        };
        WaitQueue.prototype.toString = function () {
            return "WaitQueue " + this._uniqueID;
        };
        Object.defineProperty(WaitQueue.prototype, "uniqueID", {
            get: function () {
                return this._uniqueID;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WaitQueue.prototype, "owner", {
            get: function () {
                return this._owner;
            },
            enumerable: false,
            configurable: true
        });
        return WaitQueue;
    }(object_2.BaseObject));
    exports.WaitQueue = WaitQueue;
});
define("jriapp_shared/collection/utils", ["require", "exports", "jriapp_shared/utils/utils", "jriapp_shared/lang"], function (require, exports, utils_1, lang_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CollUtils = exports.fn_walkField = exports.ValueUtils = void 0;
    var utils = utils_1.Utils, _a = utils.core, getTimeZoneOffset = _a.getTimeZoneOffset, parseBool = _a.parseBool, getValue = _a.getValue, setValue = _a.setValue, format = utils.str.format, _b = utils.check, _undefined = _b._undefined, isArray = _b.isArray, isDate = _b.isDate, isString = _b.isString, isBoolean = _b.isBoolean, isNumber = _b.isNumber, isNt = _b.isNt;
    function pad(num) {
        if (num < 10) {
            return "0" + num;
        }
        return "" + num;
    }
    function dateToString(dt) {
        return ("" + dt.getFullYear()) +
            "-" + pad(dt.getMonth() + 1) +
            "-" + pad(dt.getDate()) +
            "T" + pad(dt.getHours()) +
            ":" + pad(dt.getMinutes()) +
            ":" + pad(dt.getSeconds()) +
            "." + (dt.getMilliseconds() / 1000).toFixed(3).slice(2, 5) + "Z";
    }
    exports.ValueUtils = {
        valueToDate: function (val, dtcnv, serverTZ) {
            if (!val) {
                return null;
            }
            var dt = new Date(val);
            var clientTZ = getTimeZoneOffset();
            dt.setMinutes(dt.getMinutes() + clientTZ);
            switch (dtcnv) {
                case 0:
                    break;
                case 1:
                    dt.setMinutes(dt.getMinutes() + serverTZ);
                    dt.setMinutes(dt.getMinutes() - clientTZ);
                    break;
                case 2:
                    dt.setMinutes(dt.getMinutes() - clientTZ);
                    break;
                default:
                    throw new Error(format(lang_6.ERRS.ERR_PARAM_INVALID, "dtcnv", dtcnv));
            }
            return dt;
        },
        dateToValue: function (dt, dtcnv, serverTZ) {
            if (dt === null) {
                return null;
            }
            if (!isDate(dt)) {
                throw new Error(format(lang_6.ERRS.ERR_PARAM_INVALID, "dt", dt));
            }
            var clientTZ = getTimeZoneOffset();
            switch (dtcnv) {
                case 0:
                    break;
                case 1:
                    dt.setMinutes(dt.getMinutes() + clientTZ);
                    dt.setMinutes(dt.getMinutes() - serverTZ);
                    break;
                case 2:
                    dt.setMinutes(dt.getMinutes() + clientTZ);
                    break;
                default:
                    throw new Error(format(lang_6.ERRS.ERR_PARAM_INVALID, "dtcnv", dtcnv));
            }
            return dateToString(dt);
        },
        compareVals: function (v1, v2, dataType) {
            if ((v1 === null && v2 !== null) || (v1 !== null && v2 === null)) {
                return false;
            }
            switch (dataType) {
                case 6:
                case 7:
                case 8:
                    return (isDate(v1) && isDate(v2)) ? (v1.getTime() === v2.getTime()) : false;
                default:
                    return v1 === v2;
            }
        },
        stringifyValue: function (v, dtcnv, dataType, serverTZ) {
            var res = null;
            if (isNt(v)) {
                return res;
            }
            function conv(v) {
                if (isDate(v)) {
                    return exports.ValueUtils.dateToValue(v, dtcnv, serverTZ);
                }
                else if (isArray(v)) {
                    return JSON.stringify(v);
                }
                else if (isString(v)) {
                    return v;
                }
                else {
                    return JSON.stringify(v);
                }
            }
            ;
            var isOK = false;
            switch (dataType) {
                case 0:
                    res = conv(v);
                    isOK = true;
                    break;
                case 1:
                case 9:
                    if (isString(v)) {
                        res = v;
                        isOK = true;
                    }
                    break;
                case 2:
                    if (isBoolean(v)) {
                        res = JSON.stringify(v);
                        isOK = true;
                    }
                    break;
                case 3:
                case 4:
                case 5:
                    if (isNumber(v)) {
                        res = JSON.stringify(v);
                        isOK = true;
                    }
                    break;
                case 6:
                case 7:
                case 8:
                    if (isDate(v)) {
                        res = exports.ValueUtils.dateToValue(v, dtcnv, serverTZ);
                        isOK = true;
                    }
                    break;
                case 10:
                    if (isArray(v)) {
                        res = JSON.stringify(v);
                        isOK = true;
                    }
                    break;
                default:
                    throw new Error(format(lang_6.ERRS.ERR_PARAM_INVALID, "dataType", dataType));
            }
            if (!isOK) {
                throw new Error(format(lang_6.ERRS.ERR_FIELD_WRONG_TYPE, v, dataType));
            }
            return res;
        },
        parseValue: function (v, dataType, dtcnv, serverTZ) {
            var res = null;
            if (v === _undefined || v === null) {
                return res;
            }
            switch (dataType) {
                case 0:
                    res = v;
                    break;
                case 1:
                case 9:
                    res = v;
                    break;
                case 2:
                    res = parseBool(v);
                    break;
                case 3:
                    res = parseInt(v, 10);
                    break;
                case 4:
                case 5:
                    res = parseFloat(v);
                    break;
                case 6:
                case 7:
                case 8:
                    res = exports.ValueUtils.valueToDate(v, dtcnv, serverTZ);
                    break;
                case 10:
                    res = JSON.parse(v);
                    break;
                default:
                    throw new Error(format(lang_6.ERRS.ERR_PARAM_INVALID, "dataType", dataType));
            }
            return res;
        }
    };
    function fn_walkField(fldName, fld, cb, parentRes) {
        if (fld.fieldType === 5) {
            var res = cb(fld, fldName, parentRes);
            if (!!fld.nested && fld.nested.length > 0) {
                var nestedFld = void 0;
                var len = fld.nested.length;
                for (var i = 0; i < len; i += 1) {
                    nestedFld = fld.nested[i];
                    if (nestedFld.fieldType === 5) {
                        fn_walkField(fldName + "." + nestedFld.fieldName, nestedFld, cb, res);
                    }
                    else {
                        cb(nestedFld, fldName + "." + nestedFld.fieldName, res);
                    }
                }
            }
        }
        else {
            cb(fld, fldName, parentRes);
        }
    }
    exports.fn_walkField = fn_walkField;
    exports.CollUtils = {
        getObjectField: function (name, flds) {
            var arrFlds = flds.filter(function (f) { return f.fieldName === name; });
            if (!arrFlds || arrFlds.length !== 1) {
                throw new Error(format(lang_6.ERRS.ERR_ASSERTION_FAILED, "arrFlds.length === 1"));
            }
            return arrFlds[0];
        },
        walkField: function (fld, fn, parentRes) {
            fn_walkField(fld.fieldName, fld, fn, parentRes);
        },
        walkFields: function (flds, fn, parentRes) {
            for (var i = 0; i < flds.length; i += 1) {
                fn_walkField(flds[i].fieldName, flds[i], fn, parentRes);
            }
        },
        getPKFields: function (fieldInfos) {
            var pkFlds = [], len = fieldInfos.length;
            for (var i = 0; i < len; i += 1) {
                var fld = fieldInfos[i];
                if (fld.isPrimaryKey > 0) {
                    pkFlds.push(fld);
                }
            }
            return pkFlds.sort(function (f1, f2) {
                return f1.isPrimaryKey - f2.isPrimaryKey;
            });
        },
        initVals: function (flds, vals) {
            exports.CollUtils.walkFields(flds, function (fld, fullName) {
                if (fld.fieldType === 5) {
                    setValue(vals, fullName, {});
                }
                else {
                    if (!(fld.fieldType === 3 || fld.fieldType === 2)) {
                        setValue(vals, fullName, null);
                    }
                }
            });
            return vals;
        },
        copyVals: function (flds, from, to) {
            exports.CollUtils.walkFields(flds, function (fld, fullName) {
                if (fld.fieldType === 5) {
                    setValue(to, fullName, {});
                }
                else {
                    if (!(fld.fieldType === 3 || fld.fieldType === 2)) {
                        var value = getValue(from, fullName);
                        setValue(to, fullName, value);
                    }
                }
            });
            return to;
        },
        objToVals: function (flds, obj) {
            return (!obj) ? exports.CollUtils.initVals(flds, {}) : exports.CollUtils.copyVals(flds, obj, {});
        },
        cloneVals: function (flds, vals) {
            return exports.CollUtils.copyVals(flds, vals, {});
        }
    };
});
define("jriapp_shared/collection/base", ["require", "exports", "jriapp_shared/object", "jriapp_shared/lang", "jriapp_shared/utils/waitqueue", "jriapp_shared/utils/utils", "jriapp_shared/collection/utils", "jriapp_shared/errors"], function (require, exports, object_3, lang_7, waitqueue_1, utils_2, utils_3, errors_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseCollection = exports.Errors = void 0;
    var utils = utils_2.Utils, _a = utils.core, forEach = _a.forEach, getTimeZoneOffset = _a.getTimeZoneOffset, getNewID = _a.getNewID, Indexer = _a.Indexer, _b = utils.str, format = _b.format, startsWith = _b.startsWith, _c = utils.check, _undefined = _c._undefined, isArray = _c.isArray, isUndefined = _c.isUndefined, sys = utils.sys, stringifyValue = utils_3.ValueUtils.stringifyValue, getObjectField = utils_3.CollUtils.getObjectField;
    sys.isCollection = function (obj) {
        return (!!obj && obj instanceof BaseCollection);
    };
    var COLL_EVENTS;
    (function (COLL_EVENTS) {
        COLL_EVENTS["begin_edit"] = "beg_edit";
        COLL_EVENTS["end_edit"] = "end_edit";
        COLL_EVENTS["before_begin_edit"] = "before_be";
        COLL_EVENTS["before_end_edit"] = "before_ee";
        COLL_EVENTS["collection_changed"] = "coll_changed";
        COLL_EVENTS["fill"] = "fill";
        COLL_EVENTS["item_deleting"] = "item_deleting";
        COLL_EVENTS["item_adding"] = "item_adding";
        COLL_EVENTS["item_added"] = "item_added";
        COLL_EVENTS["validate_field"] = "validate_field";
        COLL_EVENTS["validate_item"] = "validate_item";
        COLL_EVENTS["current_changing"] = "current_changing";
        COLL_EVENTS["page_changing"] = "page_changing";
        COLL_EVENTS["errors_changed"] = "errors_changed";
        COLL_EVENTS["status_changed"] = "status_changed";
        COLL_EVENTS["clearing"] = "clearing";
        COLL_EVENTS["cleared"] = "cleared";
        COLL_EVENTS["commit_changes"] = "commit_changes";
    })(COLL_EVENTS || (COLL_EVENTS = {}));
    var Errors = (function () {
        function Errors(owner) {
            this._errors = Indexer();
            this._owner = owner;
        }
        Errors.prototype.clear = function () {
            this._errors = Indexer();
        };
        Errors.prototype.validateItem = function (item) {
            var args = { item: item, result: [] };
            return this._owner._getInternal().validateItem(args);
        };
        Errors.prototype.validateItemField = function (item, fieldName) {
            var args = { item: item, fieldName: fieldName, errors: [] };
            return this._owner._getInternal().validateItemField(args);
        };
        Errors.prototype.addErrors = function (item, errors) {
            var _this = this;
            errors.forEach(function (err) {
                _this.addError(item, err.fieldName, err.errors, true);
            });
            this.onErrorsChanged(item);
        };
        Errors.prototype.addError = function (item, fieldName, errors, ignoreChangeErrors) {
            if (!fieldName) {
                fieldName = "*";
            }
            if (!(isArray(errors) && errors.length > 0)) {
                this.removeError(item, fieldName, ignoreChangeErrors);
                return;
            }
            if (!this._errors[item._key]) {
                this._errors[item._key] = Indexer();
            }
            var itemErrors = this._errors[item._key];
            itemErrors[fieldName] = errors;
            if (!ignoreChangeErrors) {
                this.onErrorsChanged(item);
            }
        };
        Errors.prototype.removeError = function (item, fieldName, ignoreChangeErrors) {
            var itemErrors = this._errors[item._key];
            if (!itemErrors) {
                return;
            }
            if (!fieldName) {
                fieldName = "*";
            }
            if (!itemErrors[fieldName]) {
                return;
            }
            delete itemErrors[fieldName];
            if (Object.keys(itemErrors).length === 0) {
                delete this._errors[item._key];
            }
            if (!ignoreChangeErrors) {
                this.onErrorsChanged(item);
            }
        };
        Errors.prototype.removeAllErrors = function (item) {
            var itemErrors = this._errors[item._key];
            if (!itemErrors) {
                return;
            }
            delete this._errors[item._key];
            this.onErrorsChanged(item);
        };
        Errors.prototype.getErrors = function (item) {
            return this._errors[item._key];
        };
        Errors.prototype.onErrorsChanged = function (item) {
            var args = { item: item };
            this._owner._getInternal().onErrorsChanged(args);
            item._aspect.raiseErrorsChanged();
        };
        Errors.prototype.getItemsWithErrors = function () {
            var _this = this;
            var res = [];
            forEach(this._errors, function (key) {
                var item = _this._owner.getItemByKey(key);
                res.push(item);
            });
            return res;
        };
        return Errors;
    }());
    exports.Errors = Errors;
    var BaseCollection = (function (_super) {
        __extends(BaseCollection, _super);
        function BaseCollection() {
            var _this = _super.call(this) || this;
            var self = _this;
            _this._uniqueID = getNewID("coll");
            _this._options = { enablePaging: false, pageSize: 50 };
            _this._isLoading = false;
            _this._isUpdating = false;
            _this._EditingItem = null;
            _this._perms = { canAddRow: true, canEditRow: true, canDeleteRow: true, canRefreshRow: false };
            _this._totalCount = 0;
            _this._pageIndex = 0;
            _this._items = [];
            _this._itemsByKey = Indexer();
            _this._currentPos = -1;
            _this._errors = new Errors(_this);
            _this._pkInfo = null;
            _this._waitQueue = new waitqueue_1.WaitQueue(_this);
            _this._internal = {
                setIsLoading: function (v) {
                    self._setIsLoading(v);
                },
                getEditingItem: function () {
                    return self._getEditingItem();
                },
                getStrValue: function (val, fieldInfo) {
                    return self._getStrValue(val, fieldInfo);
                },
                onBeforeEditing: function (item, isBegin, isCanceled) {
                    self._onBeforeEditing(item, isBegin, isCanceled);
                },
                onEditing: function (item, isBegin, isCanceled) {
                    self._onEditing(item, isBegin, isCanceled);
                },
                onCommitChanges: function (item, isBegin, isRejected, status) {
                    self._onCommitChanges(item, isBegin, isRejected, status);
                },
                onItemDeleting: function (args) {
                    return self._onItemDeleting(args);
                },
                onErrorsChanged: function (args) {
                    self.objEvents.raise("errors_changed", args);
                },
                validateItemField: function (args) {
                    self.objEvents.raise("validate_field", args);
                    return (!!args.errors && args.errors.length > 0) ? { fieldName: args.fieldName, errors: args.errors } : null;
                },
                validateItem: function (args) {
                    self.objEvents.raise("validate_item", args);
                    return (!!args.result && args.result.length > 0) ? args.result : [];
                }
            };
            return _this;
        }
        BaseCollection.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._waitQueue.dispose();
            this._waitQueue = null;
            this.clear();
            _super.prototype.dispose.call(this);
        };
        BaseCollection.getEmptyFieldInfo = function (fieldName) {
            var fieldInfo = {
                fieldName: fieldName,
                isPrimaryKey: 0,
                dataType: 0,
                isNullable: true,
                maxLength: -1,
                isReadOnly: false,
                isAutoGenerated: false,
                allowClientDefault: false,
                dateConversion: 0,
                fieldType: 1,
                isNeedOriginal: false,
                range: null,
                regex: null,
                nested: null,
                dependentOn: null,
                fullName: null
            };
            return fieldInfo;
        };
        BaseCollection.prototype._isOwnsItems = function () {
            return true;
        };
        BaseCollection.prototype._setInternal = function (internal) {
            this._internal = internal;
        };
        BaseCollection.prototype._updatePermissions = function (perms) {
            this._perms = perms;
        };
        BaseCollection.prototype._getPKFieldInfos = function () {
            if (!!this._pkInfo) {
                return this._pkInfo;
            }
            var fldMap = this.getFieldMap(), pk = [];
            forEach(fldMap, function (fldName) {
                if (fldMap[fldName].isPrimaryKey > 0) {
                    pk.push(fldMap[fldName]);
                }
            });
            pk.sort(function (a, b) {
                return a.isPrimaryKey - b.isPrimaryKey;
            });
            this._pkInfo = pk;
            return this._pkInfo;
        };
        BaseCollection.prototype._checkCurrentChanging = function (_newCurrent) {
            try {
                this.endEdit();
            }
            catch (ex) {
                utils.err.reThrow(ex, this.handleError(ex, this));
            }
        };
        BaseCollection.prototype._onCurrentChanging = function (newCurrent) {
            this._checkCurrentChanging(newCurrent);
            this.objEvents.raise("current_changing", { newCurrent: newCurrent });
        };
        BaseCollection.prototype._onCurrentChanged = function () {
            this.objEvents.raiseProp("currentItem");
        };
        BaseCollection.prototype._onCountChanged = function () {
            this.objEvents.raiseProp("count");
        };
        BaseCollection.prototype._onEditingChanged = function () {
            this.objEvents.raiseProp("isEditing");
        };
        BaseCollection.prototype._onItemStatusChanged = function (item, oldStatus) {
            this.objEvents.raise("status_changed", { item: item, oldStatus: oldStatus, key: item._key });
        };
        BaseCollection.prototype._onCollectionChanged = function (args) {
            this.objEvents.raise("coll_changed", args);
        };
        BaseCollection.prototype._onFillEnd = function (args) {
            this.objEvents.raise("fill", args);
        };
        BaseCollection.prototype._onItemAdding = function (item) {
            var args = { item: item, isCancel: false };
            this.objEvents.raise("item_adding", args);
            if (args.isCancel) {
                utils.err.throwDummy(new Error("operation canceled"));
            }
        };
        BaseCollection.prototype._onItemAdded = function (item) {
            var args = { item: item, isAddNewHandled: false };
            this.objEvents.raise("item_added", args);
        };
        BaseCollection.prototype._addNew = function (item) {
            try {
                this.endEdit();
            }
            catch (ex) {
                utils.err.reThrow(ex, this.handleError(ex, this));
            }
            if (!!this.getItemByKey(item._key)) {
                throw new Error(lang_7.ERRS.ERR_ITEM_IS_ATTACHED);
            }
            var pos = this._appendItem(item);
            this._onAddNew(item);
            this._onCountChanged();
            this._onCurrentChanging(item);
            this._currentPos = pos;
            this._onCurrentChanged();
            return pos;
        };
        BaseCollection.prototype._onAddNew = function (item) {
            item._aspect._setIsAttached(true);
            var args = {
                changeType: 1,
                reason: 0,
                oper: 2,
                items: [item],
                new_key: item._key
            };
            this._onCollectionChanged(args);
        };
        BaseCollection.prototype._onRemoved = function (item) {
            try {
                this._onCollectionChanged({
                    changeType: 0,
                    reason: 0,
                    oper: 3,
                    items: [item],
                    old_key: item._key
                });
            }
            finally {
                this._onCountChanged();
            }
        };
        BaseCollection.prototype._onPageSizeChanged = function () {
        };
        BaseCollection.prototype._onPageChanging = function () {
            var args = { page: this.pageIndex, isCancel: false };
            this.objEvents.raise("page_changing", args);
            if (!args.isCancel) {
                try {
                    this.endEdit();
                }
                catch (ex) {
                    utils.err.reThrow(ex, this.handleError(ex, this));
                }
            }
            return !args.isCancel;
        };
        BaseCollection.prototype._onPageChanged = function () {
        };
        BaseCollection.prototype._setCurrentItem = function (v) {
            var self = this, oldPos = self._currentPos;
            if (!v) {
                if (oldPos !== -1) {
                    self._onCurrentChanging(null);
                    self._currentPos = -1;
                    self._onCurrentChanged();
                }
                return;
            }
            if (v._aspect.isDetached) {
                throw new Error(lang_7.ERRS.ERR_ITEM_IS_DETACHED);
            }
            var item = self.getItemByKey(v._key);
            if (!item) {
                throw new Error(lang_7.ERRS.ERR_ITEM_IS_NOTFOUND);
            }
            var oldItem = self.getItemByPos(oldPos);
            var pos = self._items.indexOf(v);
            if (pos < 0) {
                throw new Error(lang_7.ERRS.ERR_ITEM_IS_NOTFOUND);
            }
            if (oldPos !== pos || oldItem !== v) {
                self._onCurrentChanging(v);
                self._currentPos = pos;
                self._onCurrentChanged();
            }
        };
        BaseCollection.prototype._getEditingItem = function () {
            return this._EditingItem;
        };
        BaseCollection.prototype._getStrValue = function (val, fieldInfo) {
            var dcnv = fieldInfo.dateConversion, stz = getTimeZoneOffset();
            return stringifyValue(val, dcnv, fieldInfo.dataType, stz);
        };
        BaseCollection.prototype._onBeforeEditing = function (item, isBegin, isCanceled) {
            if (this._isUpdating) {
                return;
            }
            if (isBegin) {
                this.objEvents.raise("before_be", { item: item });
            }
            else {
                this.objEvents.raise("before_ee", { item: item, isCanceled: isCanceled });
            }
        };
        BaseCollection.prototype._onEditing = function (item, isBegin, isCanceled) {
            if (this._isUpdating) {
                return;
            }
            if (isBegin) {
                this._EditingItem = item;
                this.objEvents.raise("beg_edit", { item: item });
                this._onEditingChanged();
                if (!!item) {
                    item._aspect.objEvents.raiseProp("isEditing");
                }
            }
            else {
                var oldItem = this._EditingItem;
                this._EditingItem = null;
                this.objEvents.raise("end_edit", { item: item, isCanceled: isCanceled });
                this._onEditingChanged();
                if (!!oldItem) {
                    oldItem._aspect.objEvents.raiseProp("isEditing");
                }
            }
        };
        BaseCollection.prototype._onCommitChanges = function (item, isBegin, isRejected, status) {
            this.objEvents.raise("commit_changes", { item: item, isBegin: isBegin, isRejected: isRejected, status: status });
        };
        BaseCollection.prototype._validateItem = function (item) {
            var args = { item: item, result: [] };
            this.objEvents.raise("validate_item", args);
            return (!!args.result && args.result.length > 0) ? args.result : [];
        };
        BaseCollection.prototype._validateItemField = function (item, fieldName) {
            var args = { item: item, fieldName: fieldName, errors: [] };
            this.objEvents.raise("validate_field", args);
            return (!!args.errors && args.errors.length > 0) ? { fieldName: fieldName, errors: args.errors } : null;
        };
        BaseCollection.prototype._onItemDeleting = function (args) {
            this.objEvents.raise("item_deleting", args);
            return !args.isCancel;
        };
        BaseCollection.prototype._clear = function (reason, oper) {
            this.objEvents.raise("clearing", { reason: reason });
            this.cancelEdit();
            this.rejectChanges();
            this._EditingItem = null;
            this.currentItem = null;
            var oldItems = this._items;
            this._errors.clear();
            this._items = [];
            this._itemsByKey = Indexer();
            if (this._isOwnsItems()) {
                for (var _i = 0, oldItems_1 = oldItems; _i < oldItems_1.length; _i++) {
                    var item = oldItems_1[_i];
                    item._aspect._setIsAttached(false);
                }
                if (oldItems.length > 0) {
                    utils.queue.enque(function () {
                        for (var _i = 0, oldItems_2 = oldItems; _i < oldItems_2.length; _i++) {
                            var item = oldItems_2[_i];
                            item.dispose();
                        }
                    });
                }
            }
            if (oper !== 1) {
                this._onCollectionChanged({
                    changeType: 2,
                    reason: reason,
                    oper: oper,
                    items: []
                });
            }
            this.objEvents.raise("cleared", { reason: reason });
            this._onCountChanged();
        };
        BaseCollection.prototype._replaceItems = function (reason, oper, items) {
            this._clear(reason, oper);
            this._items = items;
            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                var item = items_1[_i];
                this._itemsByKey[item._key] = item;
                item._aspect._setIsAttached(true);
            }
        };
        BaseCollection.prototype._appendItem = function (item) {
            this._items.push(item);
            this._itemsByKey[item._key] = item;
            return (this._items.length - 1);
        };
        BaseCollection.prototype._remapItem = function (oldkey, newkey, item) {
            if (!newkey) {
                throw new Error(lang_7.ERRS.ERR_KEY_IS_EMPTY);
            }
            delete this._itemsByKey[oldkey];
            item._aspect._setKey(newkey);
            this._itemsByKey[newkey] = item;
        };
        BaseCollection.prototype._removeItem = function (item) {
            var key = item._key;
            if (!this.getItemByKey(key)) {
                return -1;
            }
            var oldPos = utils.arr.remove(this._items, item);
            if (oldPos < 0) {
                throw new Error(lang_7.ERRS.ERR_ITEM_IS_NOTFOUND);
            }
            this._onRemoved(item);
            delete this._itemsByKey[key];
            return oldPos;
        };
        BaseCollection.prototype._resetCurrent = function (oldPos) {
            var test = this.getItemByPos(oldPos), curPos = this._currentPos;
            if (curPos === oldPos) {
                if (!test) {
                    this._currentPos = curPos - 1;
                }
                this._onCurrentChanged();
            }
            if (curPos > oldPos) {
                this._currentPos = curPos - 1;
                this._onCurrentChanged();
            }
        };
        BaseCollection.prototype._waitForProp = function (prop, callback, groupName) {
            this._waitQueue.enQueue({
                prop: prop,
                groupName: groupName,
                predicate: function (val) {
                    return !val;
                },
                action: callback,
                actionArgs: [],
                lastWins: !!groupName
            });
        };
        BaseCollection.prototype._setIsLoading = function (v) {
            if (this._isLoading !== v) {
                this._isLoading = v;
                this.objEvents.raiseProp("isLoading");
            }
        };
        BaseCollection.prototype._getInternal = function () {
            return this._internal;
        };
        BaseCollection.prototype._getSortFn = function (fieldNames, sortOrder) {
            var mult = 1;
            if (sortOrder === 1) {
                mult = -1;
            }
            return function (a, b) {
                var res = 0, i, af, bf, fieldName;
                var len = fieldNames.length;
                for (i = 0; i < len; i += 1) {
                    fieldName = fieldNames[i];
                    af = sys.resolvePath(a, fieldName);
                    bf = sys.resolvePath(b, fieldName);
                    if (af === _undefined) {
                        af = null;
                    }
                    if (bf === _undefined) {
                        bf = null;
                    }
                    if (af === null && bf !== null) {
                        res = -1 * mult;
                    }
                    else if (af !== null && bf === null) {
                        res = mult;
                    }
                    else if (af < bf) {
                        res = -1 * mult;
                    }
                    else if (af > bf) {
                        res = mult;
                    }
                    else {
                        res = 0;
                    }
                    if (res !== 0) {
                        return res;
                    }
                }
                return res;
            };
        };
        BaseCollection.prototype.isHasProp = function (prop) {
            if (startsWith(prop, "[")) {
                var res = sys.getProp(this, prop);
                return !isUndefined(res);
            }
            return _super.prototype.isHasProp.call(this, prop);
        };
        BaseCollection.prototype.getFieldInfo = function (fieldName) {
            var parts = fieldName.split("."), fieldMap = this.getFieldMap();
            var fld = fieldMap[parts[0]];
            if (!fld) {
                throw new Error("getFieldInfo - the Collection: " + this.toString() + " does not have field: " + fieldName);
            }
            if (parts.length === 1) {
                return fld;
            }
            if (fld.fieldType === 5) {
                for (var i = 1; i < parts.length; i += 1) {
                    fld = getObjectField(parts[i], fld.nested);
                }
                return fld;
            }
            throw new Error(format(lang_7.ERRS.ERR_PARAM_INVALID, "fieldName", fieldName));
        };
        BaseCollection.prototype.getFieldNames = function () {
            return this.getFieldInfos().map(function (f) {
                return f.fieldName;
            });
        };
        BaseCollection.prototype.cancelEdit = function () {
            if (this.isEditing) {
                this._EditingItem._aspect.cancelEdit();
            }
        };
        BaseCollection.prototype.endEdit = function () {
            var EditingItem;
            if (this.isEditing) {
                EditingItem = this._EditingItem;
                if (!EditingItem._aspect.endEdit() && EditingItem._aspect.getIsHasErrors()) {
                    this.handleError(new errors_6.ValidationError(EditingItem._aspect.getAllErrors(), EditingItem), EditingItem);
                    this.cancelEdit();
                }
            }
        };
        BaseCollection.prototype.getItemsWithErrors = function () {
            return this._errors.getItemsWithErrors();
        };
        BaseCollection.prototype.addNew = function () {
            var item, isHandled;
            item = this._createNew();
            this._onItemAdding(item);
            this._addNew(item);
            try {
                this.currentItem = item;
                item._aspect.beginEdit();
                this._onItemAdded(item);
            }
            catch (ex) {
                isHandled = this.handleError(ex, this);
                item._aspect.cancelEdit();
                utils.err.reThrow(ex, isHandled);
            }
            return item;
        };
        BaseCollection.prototype.getItemByPos = function (pos) {
            if (pos < 0 || pos >= this._items.length) {
                return null;
            }
            return this._items[pos];
        };
        BaseCollection.prototype.getItemByKey = function (key) {
            if (!key) {
                throw new Error(lang_7.ERRS.ERR_KEY_IS_EMPTY);
            }
            return this._itemsByKey[key];
        };
        BaseCollection.prototype.findByPK = function () {
            var vals = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                vals[_i] = arguments[_i];
            }
            if (arguments.length === 0) {
                return null;
            }
            var self = this, pkInfo = self._getPKFieldInfos(), arr = [];
            var key, values = [];
            if (vals.length === 1 && isArray(vals[0])) {
                values = vals[0];
            }
            else {
                values = vals;
            }
            if (values.length !== pkInfo.length) {
                return null;
            }
            var len = pkInfo.length;
            for (var i = 0; i < len; i += 1) {
                arr.push(self._getStrValue(values[i], pkInfo[i]));
            }
            key = arr.join(";");
            return self.getItemByKey(key);
        };
        BaseCollection.prototype.moveFirst = function (skipDeleted) {
            var pos = 0, old = this._currentPos;
            if (old === pos) {
                return false;
            }
            var item = this.getItemByPos(pos);
            if (!item) {
                return false;
            }
            if (!!skipDeleted) {
                if (item._aspect.isDeleted) {
                    return this.moveNext(true);
                }
            }
            this._onCurrentChanging(item);
            this._currentPos = pos;
            this._onCurrentChanged();
            return true;
        };
        BaseCollection.prototype.movePrev = function (skipDeleted) {
            var pos = -1;
            var old = this._currentPos;
            var item = this.getItemByPos(old);
            if (!!item) {
                pos = old;
                pos -= 1;
            }
            item = this.getItemByPos(pos);
            if (!item) {
                return false;
            }
            if (!!skipDeleted) {
                if (item._aspect.isDeleted) {
                    this._currentPos = pos;
                    return this.movePrev(true);
                }
            }
            this._onCurrentChanging(item);
            this._currentPos = pos;
            this._onCurrentChanged();
            return true;
        };
        BaseCollection.prototype.moveNext = function (skipDeleted) {
            var pos = -1;
            var old = this._currentPos;
            var item = this.getItemByPos(old);
            if (!!item) {
                pos = old;
                pos += 1;
            }
            item = this.getItemByPos(pos);
            if (!item) {
                return false;
            }
            if (!!skipDeleted) {
                if (item._aspect.isDeleted) {
                    this._currentPos = pos;
                    return this.moveNext(true);
                }
            }
            this._onCurrentChanging(item);
            this._currentPos = pos;
            this._onCurrentChanged();
            return true;
        };
        BaseCollection.prototype.moveLast = function (skipDeleted) {
            var pos = this._items.length - 1, old = this._currentPos;
            if (old === pos) {
                return false;
            }
            var item = this.getItemByPos(pos);
            if (!item) {
                return false;
            }
            if (!!skipDeleted) {
                if (item._aspect.isDeleted) {
                    return this.movePrev(true);
                }
            }
            this._onCurrentChanging(item);
            this._currentPos = pos;
            this._onCurrentChanged();
            return true;
        };
        BaseCollection.prototype.goTo = function (pos) {
            var old = this._currentPos;
            if (old === pos) {
                return false;
            }
            var item = this.getItemByPos(pos);
            if (!item) {
                return false;
            }
            this._onCurrentChanging(item);
            this._currentPos = pos;
            this._onCurrentChanged();
            return true;
        };
        BaseCollection.prototype.forEach = function (callback, thisObj) {
            this._items.forEach(callback, thisObj);
        };
        BaseCollection.prototype.removeItem = function (item) {
            if (item._aspect.isDetached || !this.getItemByKey(item._key)) {
                return;
            }
            try {
                var oldPos = this._removeItem(item);
                this._errors.removeAllErrors(item);
                item._aspect._setIsAttached(false);
                this._resetCurrent(oldPos);
            }
            finally {
                if (!item.getIsStateDirty()) {
                    item.dispose();
                }
            }
        };
        BaseCollection.prototype.sort = function (fieldNames, sortOrder) {
            return this.sortLocal(fieldNames, sortOrder);
        };
        BaseCollection.prototype.sortLocal = function (fieldNames, sortOrder) {
            var sortFn = this._getSortFn(fieldNames, sortOrder);
            var self = this, deferred = utils.async.createDeferred();
            this.waitForNotLoading(function () {
                var cur = self.currentItem;
                self._setIsLoading(true);
                try {
                    self._items.sort(sortFn);
                    self._onCollectionChanged({
                        changeType: 2,
                        reason: 2,
                        oper: 5,
                        items: []
                    });
                }
                finally {
                    self._setIsLoading(false);
                    deferred.resolve();
                }
                self.currentItem = null;
                self.currentItem = cur;
            }, "sorting");
            return deferred.promise();
        };
        BaseCollection.prototype.rejectChanges = function () {
        };
        BaseCollection.prototype.clear = function () {
            this._clear(0, 0);
            this.totalCount = 0;
        };
        BaseCollection.prototype.waitForNotLoading = function (callback, groupName) {
            this._waitForProp("isLoading", callback, groupName);
        };
        BaseCollection.prototype.toString = function () {
            return "BaseCollection";
        };
        BaseCollection.prototype.addOnClearing = function (fn, nmspace, context, priority) {
            this.objEvents.on("clearing", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnClearing = function (nmspace) {
            this.objEvents.off("clearing", nmspace);
        };
        BaseCollection.prototype.addOnCleared = function (fn, nmspace, context, priority) {
            this.objEvents.on("cleared", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnCleared = function (nmspace) {
            this.objEvents.off("cleared", nmspace);
        };
        BaseCollection.prototype.addOnCollChanged = function (fn, nmspace, context, priority) {
            this.objEvents.on("coll_changed", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnCollChanged = function (nmspace) {
            this.objEvents.off("coll_changed", nmspace);
        };
        BaseCollection.prototype.addOnFill = function (fn, nmspace, context, priority) {
            this.objEvents.on("fill", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnFill = function (nmspace) {
            this.objEvents.off("fill", nmspace);
        };
        BaseCollection.prototype.addOnValidateField = function (fn, nmspace, context, priority) {
            this.objEvents.on("validate_field", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnValidateField = function (nmspace) {
            this.objEvents.off("validate_field", nmspace);
        };
        BaseCollection.prototype.addOnValidateItem = function (fn, nmspace, context, priority) {
            this.objEvents.on("validate_item", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnValidateItem = function (nmspace) {
            this.objEvents.off("validate_item", nmspace);
        };
        BaseCollection.prototype.addOnItemDeleting = function (fn, nmspace, context, priority) {
            this.objEvents.on("item_deleting", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnItemDeleting = function (nmspace) {
            this.objEvents.off("item_deleting", nmspace);
        };
        BaseCollection.prototype.addOnItemAdding = function (fn, nmspace, context, priority) {
            this.objEvents.on("item_adding", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnItemAdding = function (nmspace) {
            this.objEvents.off("item_adding", nmspace);
        };
        BaseCollection.prototype.addOnItemAdded = function (fn, nmspace, context, priority) {
            this.objEvents.on("item_added", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnItemAdded = function (nmspace) {
            this.objEvents.off("item_added", nmspace);
        };
        BaseCollection.prototype.addOnCurrentChanging = function (fn, nmspace, context, priority) {
            this.objEvents.on("current_changing", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnCurrentChanging = function (nmspace) {
            this.objEvents.off("current_changing", nmspace);
        };
        BaseCollection.prototype.addOnPageChanging = function (fn, nmspace, context, priority) {
            this.objEvents.on("page_changing", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnPageChanging = function (nmspace) {
            this.objEvents.off("page_changing", nmspace);
        };
        BaseCollection.prototype.addOnErrorsChanged = function (fn, nmspace, context, priority) {
            this.objEvents.on("errors_changed", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnErrorsChanged = function (nmspace) {
            this.objEvents.off("errors_changed", nmspace);
        };
        BaseCollection.prototype.addOnBeginEdit = function (fn, nmspace, context, priority) {
            this.objEvents.on("beg_edit", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnBeginEdit = function (nmspace) {
            this.objEvents.off("beg_edit", nmspace);
        };
        BaseCollection.prototype.addOnEndEdit = function (fn, nmspace, context, priority) {
            this.objEvents.on("end_edit", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnEndEdit = function (nmspace) {
            this.objEvents.off("end_edit", nmspace);
        };
        BaseCollection.prototype.addOnBeforeBeginEdit = function (fn, nmspace, context, priority) {
            this.objEvents.on("before_be", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnBeforeBeginEdit = function (nmspace) {
            this.objEvents.off("before_be", nmspace);
        };
        BaseCollection.prototype.addOnBeforeEndEdit = function (fn, nmspace, context, priority) {
            this.objEvents.on("before_ee", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.removeBeforeOnEndEdit = function (nmspace) {
            this.objEvents.off("before_ee", nmspace);
        };
        BaseCollection.prototype.addOnCommitChanges = function (fn, nmspace, context, priority) {
            this.objEvents.on("commit_changes", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnCommitChanges = function (nmspace) {
            this.objEvents.off("commit_changes", nmspace);
        };
        BaseCollection.prototype.addOnStatusChanged = function (fn, nmspace, context, priority) {
            this.objEvents.on("status_changed", fn, nmspace, context, priority);
        };
        BaseCollection.prototype.offOnStatusChanged = function (nmspace) {
            this.objEvents.off("status_changed", nmspace);
        };
        BaseCollection.prototype.addOnPageIndexChanged = function (handler, nmspace, context) {
            this.objEvents.onProp("pageIndex", handler, nmspace, context);
        };
        BaseCollection.prototype.addOnPageSizeChanged = function (handler, nmspace, context) {
            this.objEvents.onProp("pageSize", handler, nmspace, context);
        };
        BaseCollection.prototype.addOnTotalCountChanged = function (handler, nmspace, context) {
            this.objEvents.onProp("totalCount", handler, nmspace, context);
        };
        BaseCollection.prototype.addOnCurrentChanged = function (handler, nmspace, context) {
            this.objEvents.onProp("currentItem", handler, nmspace, context);
        };
        Object.defineProperty(BaseCollection.prototype, "errors", {
            get: function () {
                return this._errors;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCollection.prototype, "options", {
            get: function () {
                return this._options;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCollection.prototype, "items", {
            get: function () {
                return this._items;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCollection.prototype, "currentItem", {
            get: function () {
                return this.getItemByPos(this._currentPos);
            },
            set: function (v) {
                this._setCurrentItem(v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCollection.prototype, "count", {
            get: function () {
                return this._items.length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCollection.prototype, "totalCount", {
            get: function () {
                return this._totalCount;
            },
            set: function (v) {
                if (v !== this._totalCount) {
                    this._totalCount = v;
                    this.objEvents.raiseProp("totalCount");
                    this.objEvents.raiseProp("pageCount");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCollection.prototype, "pageSize", {
            get: function () {
                return this._options.pageSize;
            },
            set: function (v) {
                if (this._options.pageSize !== v) {
                    this._options.pageSize = v;
                    this.objEvents.raiseProp("pageSize");
                    this._onPageSizeChanged();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCollection.prototype, "pageIndex", {
            get: function () {
                return this._pageIndex;
            },
            set: function (v) {
                if (v !== this._pageIndex && this.isPagingEnabled) {
                    if (v < 0) {
                        return;
                    }
                    if (!this._onPageChanging()) {
                        return;
                    }
                    this._pageIndex = v;
                    this._onPageChanged();
                    this.objEvents.raiseProp("pageIndex");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCollection.prototype, "pageCount", {
            get: function () {
                var rowCount = this.totalCount, rowPerPage = this.pageSize;
                var result;
                if ((rowCount === 0) || (rowPerPage === 0)) {
                    return 0;
                }
                if ((rowCount % rowPerPage) === 0) {
                    result = (rowCount / rowPerPage);
                }
                else {
                    result = (rowCount / rowPerPage);
                    result = Math.floor(result) + 1;
                }
                return result;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCollection.prototype, "isPagingEnabled", {
            get: function () {
                return this._options.enablePaging;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCollection.prototype, "isEditing", {
            get: function () {
                return !!this._EditingItem;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCollection.prototype, "isLoading", {
            get: function () {
                return this._isLoading;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCollection.prototype, "isUpdating", {
            get: function () {
                return this._isUpdating;
            },
            set: function (v) {
                if (this._isUpdating !== v) {
                    this._isUpdating = v;
                    this.objEvents.raiseProp("isUpdating");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCollection.prototype, "permissions", {
            get: function () {
                return this._perms;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCollection.prototype, "uniqueID", {
            get: function () {
                return this._uniqueID;
            },
            enumerable: false,
            configurable: true
        });
        return BaseCollection;
    }(object_3.BaseObject));
    exports.BaseCollection = BaseCollection;
});
define("jriapp_shared/collection/validation", ["require", "exports", "jriapp_shared/lang", "jriapp_shared/utils/utils"], function (require, exports, lang_8, utils_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Validations = void 0;
    var utils = utils_4.Utils, Indexer = utils.core.Indexer, _a = utils.check, isGuid = _a.isGuid, isNumber = _a.isNumber, isString = _a.isString, isArray = _a.isArray, isDate = _a.isDate, isBoolean = _a.isBoolean, format = utils.str.format;
    function fn_toArray(index) {
        var keys = Object.keys(index), result = [], len = keys.length;
        for (var i = 0; i < len; i += 1) {
            result.push(index[keys[i]]);
        }
        return result;
    }
    var Validations = (function () {
        function Validations() {
        }
        Validations._dtRangeToDate = function (str) {
            var dtParts = str.split("-"), dt = new Date(parseInt(dtParts[0], 10), parseInt(dtParts[1], 10) - 1, parseInt(dtParts[2], 10));
            return dt;
        };
        Validations.checkNumRange = function (num, range) {
            var errors = [], rangeParts = range.split(",");
            if (!!rangeParts[0]) {
                if (num < parseFloat(rangeParts[0])) {
                    errors.push(utils.str.format(lang_8.ERRS.ERR_FIELD_RANGE, num, range));
                }
            }
            if (!!rangeParts[1]) {
                if (num > parseFloat(rangeParts[1])) {
                    errors.push(utils.str.format(lang_8.ERRS.ERR_FIELD_RANGE, num, range));
                }
            }
            return errors;
        };
        Validations.checkDateRange = function (dt, range) {
            var errors = [], rangeParts = range.split(",");
            if (!!rangeParts[0]) {
                if (dt < Validations._dtRangeToDate(rangeParts[0])) {
                    errors.push(utils.str.format(lang_8.ERRS.ERR_FIELD_RANGE, dt, range));
                }
            }
            if (!!rangeParts[1]) {
                if (dt > Validations._dtRangeToDate(rangeParts[1])) {
                    errors.push(utils.str.format(lang_8.ERRS.ERR_FIELD_RANGE, dt, range));
                }
            }
            return errors;
        };
        Validations.checkField = function (fieldInfo, value, isNew) {
            var res = [];
            var isNullVal = (value === null || (isString(value) && !value));
            if (isNullVal && !fieldInfo.isNullable && !fieldInfo.isReadOnly) {
                if (!(isNew && fieldInfo.isAutoGenerated)) {
                    res.push(lang_8.ERRS.ERR_FIELD_ISNOT_NULLABLE);
                }
            }
            if (isNullVal) {
                return res;
            }
            switch (fieldInfo.dataType) {
                case 0:
                    break;
                case 9:
                    if (!isGuid(value)) {
                        res.push(format(lang_8.ERRS.ERR_FIELD_WRONG_TYPE, value, "Guid"));
                    }
                    break;
                case 1:
                    if (!isString(value)) {
                        res.push(format(lang_8.ERRS.ERR_FIELD_WRONG_TYPE, value, "String"));
                    }
                    if (fieldInfo.maxLength > 0 && value.length > fieldInfo.maxLength) {
                        res.push(format(lang_8.ERRS.ERR_FIELD_MAXLEN, fieldInfo.maxLength));
                    }
                    if (!!fieldInfo.regex) {
                        var reg = new RegExp(fieldInfo.regex, "i");
                        if (!reg.test(value)) {
                            res.push(format(lang_8.ERRS.ERR_FIELD_REGEX, value));
                        }
                    }
                    break;
                case 10:
                    if (!isArray(value)) {
                        res.push(format(lang_8.ERRS.ERR_FIELD_WRONG_TYPE, value, "Array"));
                    }
                    if (fieldInfo.maxLength > 0 && value.length > fieldInfo.maxLength) {
                        res.push(format(lang_8.ERRS.ERR_FIELD_MAXLEN, fieldInfo.maxLength));
                    }
                    break;
                case 2:
                    if (!isBoolean(value)) {
                        res.push(format(lang_8.ERRS.ERR_FIELD_WRONG_TYPE, value, "Boolean"));
                    }
                    break;
                case 3:
                case 4:
                case 5:
                    if (!isNumber(value)) {
                        res.push(format(lang_8.ERRS.ERR_FIELD_WRONG_TYPE, value, "Number"));
                    }
                    if (!!fieldInfo.range) {
                        Validations.checkNumRange(Number(value), fieldInfo.range).forEach(function (err) {
                            res.push(err);
                        });
                    }
                    break;
                case 6:
                case 7:
                    if (!isDate(value)) {
                        res.push(format(lang_8.ERRS.ERR_FIELD_WRONG_TYPE, value, "Date"));
                    }
                    if (!!fieldInfo.range) {
                        Validations.checkDateRange(value, fieldInfo.range).forEach(function (err) {
                            res.push(err);
                        });
                    }
                    break;
                case 8:
                    if (!isDate(value)) {
                        res.push(format(lang_8.ERRS.ERR_FIELD_WRONG_TYPE, value, "Time"));
                    }
                    break;
                default:
                    res.push(format(lang_8.ERRS.ERR_PARAM_INVALID, "dataType", fieldInfo.dataType));
            }
            return res;
        };
        Validations.distinct = function (vals) {
            if (!vals) {
                return [];
            }
            var index = Indexer();
            for (var _i = 0, vals_1 = vals; _i < vals_1.length; _i++) {
                var val = vals_1[_i];
                var name_1 = !val.fieldName ? "*" : val.fieldName;
                var test = index[name_1];
                if (!!test) {
                    test.errors = test.errors.concat(val.errors);
                }
                else {
                    index[name_1] = val;
                }
            }
            return fn_toArray(index);
        };
        return Validations;
    }());
    exports.Validations = Validations;
});
define("jriapp_shared/collection/aspect", ["require", "exports", "jriapp_shared/object", "jriapp_shared/utils/utils", "jriapp_shared/collection/utils", "jriapp_shared/errors", "jriapp_shared/collection/validation"], function (require, exports, object_4, utils_5, utils_6, errors_7, validation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ItemAspect = void 0;
    var utils = utils_5.Utils, _a = utils.core, forEach = _a.forEach, getValue = _a.getValue, setValue = _a.setValue, Indexer = _a.Indexer, isNt = utils.check.isNt, sys = utils.sys, ERROR = utils.err, cloneVals = utils_6.CollUtils.cloneVals, walkFields = utils_6.CollUtils.walkFields;
    var AspectFlags;
    (function (AspectFlags) {
        AspectFlags[AspectFlags["IsAttached"] = 0] = "IsAttached";
        AspectFlags[AspectFlags["IsEdited"] = 1] = "IsEdited";
        AspectFlags[AspectFlags["IsRefreshing"] = 2] = "IsRefreshing";
        AspectFlags[AspectFlags["IsCancelling"] = 3] = "IsCancelling";
    })(AspectFlags || (AspectFlags = {}));
    function disposeVal(entry, nmspace) {
        if (!entry) {
            return;
        }
        var val = entry.val;
        if (sys.isEditable(val) && val.isEditing) {
            val.cancelEdit();
        }
        var errNotification = sys.getErrorNotification(val);
        if (!!errNotification) {
            errNotification.offOnErrorsChanged(nmspace);
        }
        if (entry.isOwnIt && sys.isBaseObj(val)) {
            val.dispose();
        }
    }
    function checkDetached(aspect) {
        if (aspect.isDetached) {
            throw new Error("Invalid operation. The item is detached");
        }
    }
    var ItemAspect = (function (_super) {
        __extends(ItemAspect, _super);
        function ItemAspect(collection, vals, key, isNew) {
            var _this = _super.call(this) || this;
            _this._coll = collection;
            _this._vals = vals;
            _this._key = key;
            _this._status = isNew ? 1 : 0;
            _this._tempVals = null;
            _this._flags = 0;
            _this._valueBag = null;
            _this._item = null;
            return _this;
        }
        ItemAspect.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            var coll = this._coll, item = this._item;
            if (!!item) {
                this.cancelEdit();
                if (!this.isDetached) {
                    coll.removeItem(item);
                }
            }
            var bag = this._valueBag;
            this._valueBag = null;
            if (!!bag) {
                forEach(bag, function (_name, val) {
                    disposeVal(val, coll.uniqueID);
                });
            }
            this._flags = 0;
            this._status = 0;
            _super.prototype.dispose.call(this);
        };
        ItemAspect.prototype._onErrorsChanged = function () {
            this.objEvents.raise("errors_changed", {});
        };
        ItemAspect.prototype._getFlag = function (flag) {
            return !!(this._flags & (1 << flag));
        };
        ItemAspect.prototype._setFlag = function (v, flag) {
            if (v) {
                this._flags |= (1 << flag);
            }
            else {
                this._flags &= ~(1 << flag);
            }
        };
        ItemAspect.prototype._setIsEdited = function (v) {
            this._setFlag(v, 1);
        };
        ItemAspect.prototype._setIsCancelling = function (v) {
            this._setFlag(v, 3);
        };
        ItemAspect.prototype._cloneVals = function () {
            return cloneVals(this.coll.getFieldInfos(), this._vals);
        };
        ItemAspect.prototype._beginEdit = function () {
            checkDetached(this);
            var coll = this.coll;
            var isHandled = false;
            if (coll.isEditing) {
                var item = coll._getInternal().getEditingItem();
                if (item._aspect === this) {
                    return false;
                }
                try {
                    item._aspect.endEdit();
                    if (item._aspect.getIsHasErrors()) {
                        this.handleError(new errors_7.ValidationError(item._aspect.getAllErrors(), item), item);
                        item._aspect.cancelEdit();
                    }
                }
                catch (ex) {
                    isHandled = this.handleError(ex, item);
                    item._aspect.cancelEdit();
                    ERROR.reThrow(ex, isHandled);
                }
            }
            this._storeVals(1);
            this.coll.currentItem = this.item;
            return true;
        };
        ItemAspect.prototype._endEdit = function () {
            if (!this.isEditing) {
                return false;
            }
            checkDetached(this);
            var coll = this.coll, self = this, errors = coll.errors;
            errors.removeAllErrors(this.item);
            var validations = this._validateFields();
            if (validations.length > 0) {
                errors.addErrors(self.item, validations);
            }
            if (this.getIsHasErrors()) {
                return false;
            }
            this._tempVals = null;
            return true;
        };
        ItemAspect.prototype._cancelEdit = function () {
            if (!this.isEditing) {
                return false;
            }
            checkDetached(this);
            var coll = this.coll, self = this, item = self.item, changed = [];
            coll.errors.removeAllErrors(item);
            var names = coll.getFieldNames();
            for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
                var name_2 = names_1[_i];
                if (self._getValue(name_2, 1) !== self._getValue(name_2, 0)) {
                    changed.push(name_2);
                }
            }
            this._restoreVals(1);
            for (var _a = 0, changed_1 = changed; _a < changed_1.length; _a++) {
                var name_3 = changed_1[_a];
                sys.raiseProp(this.item, name_3);
            }
            return true;
        };
        ItemAspect.prototype._skipValidate = function (_fieldInfo, _val) {
            return false;
        };
        ItemAspect.prototype._validateItem = function () {
            return this.coll.errors.validateItem(this.item);
        };
        ItemAspect.prototype._validateField = function (fieldName) {
            var fieldInfo = this.getFieldInfo(fieldName), errors = this.coll.errors;
            var value = getValue(this._vals, fieldName);
            if (this._skipValidate(fieldInfo, value)) {
                return null;
            }
            var standardErrors = validation_1.Validations.checkField(fieldInfo, value, this.isNew);
            var customValidation = errors.validateItemField(this.item, fieldName);
            var result = { fieldName: fieldName, errors: [] };
            if (standardErrors.length > 0) {
                result.errors = standardErrors;
            }
            if (!!customValidation && customValidation.errors.length > 0) {
                result.errors = result.errors.concat(customValidation.errors);
            }
            return (result.errors.length > 0) ? result : null;
        };
        ItemAspect.prototype._validateFields = function () {
            var self = this, fieldInfos = this.coll.getFieldInfos(), res = [];
            walkFields(fieldInfos, function (fld, fullName) {
                if (fld.fieldType !== 5) {
                    var fieldValidation = self._validateField(fullName);
                    if (!!fieldValidation && fieldValidation.errors.length > 0) {
                        res.push(fieldValidation);
                    }
                }
            });
            var itemVals = self._validateItem();
            return validation_1.Validations.distinct(res.concat(itemVals));
        };
        ItemAspect.prototype._setStatus = function (v) {
            this._status = v;
        };
        ItemAspect.prototype._getValue = function (name, ver) {
            switch (ver) {
                case 0:
                    return getValue(this._vals, name);
                case 1:
                    if (!this._tempVals) {
                        throw new Error("Invalid Operation, no Stored Version: " + ver);
                    }
                    return getValue(this._tempVals, name);
                default:
                    throw new Error("Invalid Operation, Unknown Version: " + ver);
            }
        };
        ItemAspect.prototype._setValue = function (name, val, ver) {
            switch (ver) {
                case 0:
                    setValue(this._vals, name, val, false);
                    break;
                case 1:
                    if (!this._tempVals) {
                        throw new Error("Invalid Operation, no Stored Version: " + ver);
                    }
                    setValue(this._tempVals, name, val, false);
                    break;
                default:
                    throw new Error("Invalid Operation, Unknown Version: " + ver);
            }
        };
        ItemAspect.prototype._setVals = function (vals) {
            this._vals = vals;
        };
        ItemAspect.prototype._storeVals = function (toVer) {
            switch (toVer) {
                case 1:
                    this._tempVals = this._cloneVals();
                    break;
                default:
                    throw new Error("Invalid Operation, Unknown Version: " + toVer);
            }
        };
        ItemAspect.prototype._restoreVals = function (fromVer) {
            switch (fromVer) {
                case 1:
                    if (!this._tempVals) {
                        throw new Error("Invalid Operation, no Stored Version: " + fromVer);
                    }
                    this._setVals(this._tempVals);
                    this._tempVals = null;
                    break;
                default:
                    throw new Error("Invalid Operation, Unknown Version: " + fromVer);
            }
        };
        ItemAspect.prototype._resetStatus = function () {
            this._status = 0;
        };
        ItemAspect.prototype._setKey = function (v) {
            this._key = v;
        };
        ItemAspect.prototype._setIsAttached = function (v) {
            this._setFlag(v, 0);
        };
        ItemAspect.prototype._setIsRefreshing = function (v) {
            if (this.isRefreshing !== v) {
                this._setFlag(v, 2);
                this.objEvents.raiseProp("isRefreshing");
            }
        };
        ItemAspect.prototype.handleError = function (error, source) {
            return this.coll.handleError(error, source);
        };
        ItemAspect.prototype.raiseErrorsChanged = function () {
            this._onErrorsChanged();
        };
        ItemAspect.prototype.getFieldInfo = function (fieldName) {
            return this.coll.getFieldInfo(fieldName);
        };
        ItemAspect.prototype.getFieldNames = function () {
            return this.coll.getFieldNames();
        };
        ItemAspect.prototype.getErrorString = function () {
            var itemErrors = this.coll.errors.getErrors(this.item);
            if (!itemErrors) {
                return "";
            }
            var res = [];
            forEach(itemErrors, function (name, errs) {
                for (var _i = 0, errs_2 = errs; _i < errs_2.length; _i++) {
                    var err = errs_2[_i];
                    res.push(name + ": " + err);
                }
            });
            return res.join("|");
        };
        ItemAspect.prototype.submitChanges = function () {
            return utils.async.reject("not implemented");
        };
        ItemAspect.prototype.rejectChanges = function () {
        };
        ItemAspect.prototype.beginEdit = function () {
            checkDetached(this);
            if (this.isEditing) {
                return false;
            }
            var coll = this.coll, internal = coll._getInternal(), item = this.item;
            internal.onBeforeEditing(item, true, false);
            if (!this._beginEdit()) {
                return false;
            }
            internal.onEditing(item, true, false);
            if (!!this._valueBag && this.isEditing) {
                forEach(this._valueBag, function (_name, obj) {
                    if (!!obj && sys.isEditable(obj.val)) {
                        obj.val.beginEdit();
                    }
                });
            }
            return true;
        };
        ItemAspect.prototype.endEdit = function () {
            if (!this.isEditing) {
                return false;
            }
            checkDetached(this);
            var coll = this.coll, internal = coll._getInternal(), item = this.item;
            internal.onBeforeEditing(item, false, false);
            var customEndEdit = true;
            if (!!this._valueBag) {
                forEach(this._valueBag, function (_name, obj) {
                    if (!!obj && sys.isEditable(obj.val)) {
                        if (!obj.val.endEdit()) {
                            customEndEdit = false;
                        }
                    }
                });
            }
            if (!customEndEdit || !this._endEdit()) {
                return false;
            }
            internal.onEditing(item, false, false);
            this._setIsEdited(true);
            return true;
        };
        ItemAspect.prototype.cancelEdit = function () {
            if (!this.isEditing) {
                return false;
            }
            checkDetached(this);
            this._setIsCancelling(true);
            try {
                var coll = this.coll, internal = coll._getInternal(), item = this.item, isNew = this.isNew;
                internal.onBeforeEditing(item, false, true);
                if (!!this._valueBag) {
                    forEach(this._valueBag, function (_name, obj) {
                        if (!!obj && sys.isEditable(obj.val)) {
                            obj.val.cancelEdit();
                        }
                    });
                }
                if (!this._cancelEdit()) {
                    return false;
                }
                internal.onEditing(item, false, true);
                if (isNew && !this.isEdited && !this.getIsStateDirty()) {
                    this.dispose();
                }
            }
            finally {
                this._setIsCancelling(false);
            }
            return true;
        };
        ItemAspect.prototype.deleteItem = function () {
            var coll = this.coll;
            if (this.isDetached) {
                return false;
            }
            var args = { item: this.item, isCancel: false };
            coll._getInternal().onItemDeleting(args);
            if (args.isCancel) {
                return false;
            }
            this.dispose();
            return true;
        };
        ItemAspect.prototype.getIsHasErrors = function () {
            var res = !!this.coll.errors.getErrors(this.item);
            if (!res && !!this._valueBag) {
                forEach(this._valueBag, function (_name, obj) {
                    if (!!obj) {
                        var errNotification = sys.getErrorNotification(obj.val);
                        if (!!errNotification && errNotification.getIsHasErrors()) {
                            res = true;
                        }
                    }
                });
            }
            return res;
        };
        ItemAspect.prototype.addOnErrorsChanged = function (fn, nmspace, context) {
            this.objEvents.on("errors_changed", fn, nmspace, context);
        };
        ItemAspect.prototype.offOnErrorsChanged = function (nmspace) {
            this.objEvents.off("errors_changed", nmspace);
        };
        ItemAspect.prototype.getFieldErrors = function (fieldName) {
            var res = [], itemErrors = this.coll.errors.getErrors(this.item);
            if (!itemErrors) {
                return res;
            }
            var name = fieldName;
            if (!fieldName) {
                fieldName = "*";
            }
            if (!itemErrors[fieldName]) {
                return res;
            }
            if (fieldName === "*") {
                name = null;
            }
            res.push({ fieldName: name, errors: itemErrors[fieldName] });
            return res;
        };
        ItemAspect.prototype.getAllErrors = function () {
            var res = [];
            if (!!this._valueBag) {
                forEach(this._valueBag, function (_name, obj) {
                    var errNotification = sys.getErrorNotification(obj.val);
                    if (!!errNotification) {
                        res = res.concat(errNotification.getAllErrors());
                    }
                });
            }
            var itemErrors = this.coll.errors.getErrors(this.item);
            if (!itemErrors) {
                return res;
            }
            forEach(itemErrors, function (name) {
                var fieldName = null;
                if (name !== "*") {
                    fieldName = name;
                }
                res.push({ fieldName: fieldName, errors: itemErrors[name] });
            });
            return res;
        };
        ItemAspect.prototype.getIErrorNotification = function () {
            return this;
        };
        ItemAspect.prototype.setCustomVal = function (name, val, isOwnVal) {
            var _this = this;
            if (isOwnVal === void 0) { isOwnVal = true; }
            checkDetached(this);
            if (!this._valueBag) {
                if (isNt(val)) {
                    return;
                }
                this._valueBag = Indexer();
            }
            var oldEntry = this._valueBag[name], coll = this.coll;
            if (!!oldEntry && oldEntry.val !== val) {
                disposeVal(oldEntry, coll.uniqueID);
            }
            if (isNt(val)) {
                delete this._valueBag[name];
            }
            else {
                var newEntry = { val: val, isOwnIt: !!isOwnVal };
                this._valueBag[name] = newEntry;
                var errNotification = sys.getErrorNotification(val);
                if (!!errNotification) {
                    errNotification.addOnErrorsChanged(function () {
                        _this.raiseErrorsChanged();
                    }, coll.uniqueID);
                }
                if (this.isEditing && sys.isEditable(val)) {
                    val.beginEdit();
                }
            }
        };
        ItemAspect.prototype.getCustomVal = function (name) {
            if (!this._valueBag) {
                return null;
            }
            var obj = this._valueBag[name];
            return (!obj) ? null : obj.val;
        };
        ItemAspect.prototype.toString = function () {
            return "ItemAspect";
        };
        Object.defineProperty(ItemAspect.prototype, "hasTempVals", {
            get: function () {
                return !!this._tempVals;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemAspect.prototype, "vals", {
            get: function () {
                return this._cloneVals();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemAspect.prototype, "item", {
            get: function () {
                if (!this._item) {
                    this._item = this.coll.itemFactory(this);
                }
                return this._item;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemAspect.prototype, "key", {
            get: function () {
                return this._key;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemAspect.prototype, "coll", {
            get: function () {
                return this._coll;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemAspect.prototype, "status", {
            get: function () {
                return this._status;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemAspect.prototype, "isUpdating", {
            get: function () {
                return this.coll.isUpdating;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemAspect.prototype, "isEditing", {
            get: function () {
                var editingItem = this.coll._getInternal().getEditingItem();
                return !!editingItem && editingItem._aspect === this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemAspect.prototype, "isCanSubmit", {
            get: function () {
                return false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemAspect.prototype, "isHasChanges", {
            get: function () {
                return this._status !== 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemAspect.prototype, "isNew", {
            get: function () {
                return this._status === 1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemAspect.prototype, "isDeleted", {
            get: function () {
                return this._status === 3;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemAspect.prototype, "isEdited", {
            get: function () {
                return this._getFlag(1);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemAspect.prototype, "isDetached", {
            get: function () {
                return !this._getFlag(0);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemAspect.prototype, "isRefreshing", {
            get: function () {
                return this._getFlag(2);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemAspect.prototype, "isCancelling", {
            get: function () {
                return this._getFlag(3);
            },
            enumerable: false,
            configurable: true
        });
        return ItemAspect;
    }(object_4.BaseObject));
    exports.ItemAspect = ItemAspect;
});
define("jriapp_shared/collection/item", ["require", "exports", "jriapp_shared/object"], function (require, exports, object_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CollectionItem = void 0;
    var CollectionItem = (function (_super) {
        __extends(CollectionItem, _super);
        function CollectionItem(aspect) {
            var _this = _super.call(this) || this;
            _this.__aspect = aspect;
            return _this;
        }
        CollectionItem.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            var aspect = this.__aspect;
            if (!aspect.getIsStateDirty()) {
                aspect.dispose();
            }
            _super.prototype.dispose.call(this);
        };
        Object.defineProperty(CollectionItem.prototype, "_aspect", {
            get: function () {
                return this.__aspect;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CollectionItem.prototype, "_key", {
            get: function () {
                return this.__aspect.key;
            },
            enumerable: false,
            configurable: true
        });
        CollectionItem.prototype.toString = function () {
            return "CollectionItem";
        };
        return CollectionItem;
    }(object_5.BaseObject));
    exports.CollectionItem = CollectionItem;
});
define("jriapp_shared/collection/list", ["require", "exports", "jriapp_shared/utils/utils", "jriapp_shared/lang", "jriapp_shared/collection/utils", "jriapp_shared/collection/base", "jriapp_shared/collection/aspect", "jriapp_shared/errors"], function (require, exports, utils_7, lang_9, utils_8, base_1, aspect_1, errors_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseList = exports.ListItemAspect = void 0;
    var utils = utils_7.Utils, Indexer = utils.core.Indexer, format = utils.str.format, isArray = utils.check.isArray, walkField = utils_8.CollUtils.walkField, initVals = utils_8.CollUtils.initVals, sys = utils.sys;
    var ListItemAspect = (function (_super) {
        __extends(ListItemAspect, _super);
        function ListItemAspect() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ListItemAspect.prototype._setProp = function (name, val) {
            if (this.isCancelling) {
                return;
            }
            var error;
            var coll = this.coll, item = this.item, fieldInfo = this.getFieldInfo(name), errors = coll.errors;
            if (this._getProp(name) !== val) {
                try {
                    if (fieldInfo.isReadOnly && !(this.isNew && fieldInfo.allowClientDefault)) {
                        throw new Error(lang_9.ERRS.ERR_FIELD_READONLY);
                    }
                    this._setValue(name, val, 0);
                    sys.raiseProp(item, name);
                    errors.removeError(item, name);
                    var validationInfo = this._validateField(name);
                    if (!!validationInfo && validationInfo.errors.length > 0) {
                        throw new errors_8.ValidationError([validationInfo], this);
                    }
                }
                catch (ex) {
                    if (utils.sys.isValidationError(ex)) {
                        error = ex;
                    }
                    else {
                        error = new errors_8.ValidationError([
                            { fieldName: name, errors: [ex.message] }
                        ], this);
                    }
                    errors.addError(item, name, error.validations[0].errors);
                    throw error;
                }
            }
        };
        ListItemAspect.prototype._getProp = function (name) {
            return this._getValue(name, 0);
        };
        ListItemAspect.prototype.toString = function () {
            if (!this.item) {
                return "ListItemAspect";
            }
            return this.item.toString() + "Aspect";
        };
        Object.defineProperty(ListItemAspect.prototype, "list", {
            get: function () {
                return this.coll;
            },
            enumerable: false,
            configurable: true
        });
        return ListItemAspect;
    }(aspect_1.ItemAspect));
    exports.ListItemAspect = ListItemAspect;
    var BaseList = (function (_super) {
        __extends(BaseList, _super);
        function BaseList(props) {
            var _this = _super.call(this) || this;
            _this._fieldMap = Indexer();
            _this._fieldInfos = [];
            _this._newKey = 0;
            if (!!props) {
                _this._updateFieldMap(props);
            }
            return _this;
        }
        BaseList.prototype._updateFieldMap = function (props) {
            var self = this;
            if (!isArray(props) || props.length === 0) {
                throw new Error(format(lang_9.ERRS.ERR_PARAM_INVALID, "props", props));
            }
            self._fieldMap = Indexer();
            self._fieldInfos = [];
            for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {
                var prop = props_1[_i];
                var fldInfo = base_1.BaseCollection.getEmptyFieldInfo(prop.name);
                fldInfo.dataType = prop.dtype;
                self._fieldMap[prop.name] = fldInfo;
                self._fieldInfos.push(fldInfo);
                walkField(fldInfo, function (fld, fullName) {
                    fld.dependents = null;
                    fld.fullName = fullName;
                });
            }
        };
        BaseList.prototype._clear = function (reason, oper) {
            _super.prototype._clear.call(this, reason, oper);
            this._newKey = 0;
        };
        BaseList.prototype.createItem = function (obj) {
            var isNew = !obj, vals = isNew ? initVals(this.getFieldInfos(), {}) : obj, key = this._getNewKey();
            var aspect = new ListItemAspect(this, vals, key, isNew);
            return aspect.item;
        };
        BaseList.prototype._getNewKey = function () {
            var key = "clkey_" + this._newKey;
            this._newKey += 1;
            return key;
        };
        BaseList.prototype._createNew = function () {
            return this.createItem(null);
        };
        BaseList.prototype.getFieldMap = function () {
            return this._fieldMap;
        };
        BaseList.prototype.getFieldInfos = function () {
            return this._fieldInfos;
        };
        BaseList.prototype.fillItems = function (objArray, clearAll) {
            var self = this, newItems = [], items = [];
            if (!objArray) {
                objArray = [];
            }
            try {
                if (!!clearAll) {
                    this.clear();
                }
                for (var _i = 0, objArray_1 = objArray; _i < objArray_1.length; _i++) {
                    var obj = objArray_1[_i];
                    var item = self.createItem(obj), oldItem = self.getItemByKey(item._key);
                    if (!oldItem) {
                        self._appendItem(item);
                        newItems.push(item);
                        items.push(item);
                        item._aspect._setIsAttached(true);
                    }
                    else {
                        items.push(oldItem);
                    }
                }
                if (newItems.length > 0) {
                    this.objEvents.raiseProp("count");
                }
            }
            finally {
                this._onCollectionChanged({
                    changeType: 2,
                    reason: 0,
                    oper: 1,
                    items: items
                });
                this._onFillEnd({
                    items: items,
                    newItems: newItems,
                    reason: 0
                });
            }
            this.moveFirst();
        };
        BaseList.prototype.getNewItems = function () {
            return this.items.filter(function (item) {
                return item._aspect.isNew;
            });
        };
        BaseList.prototype.resetStatus = function () {
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                item._aspect._resetStatus();
            }
        };
        BaseList.prototype.toArray = function () {
            return this.items.map(function (item) {
                return item._aspect.vals;
            });
        };
        BaseList.prototype.toString = function () {
            return "BaseList";
        };
        return BaseList;
    }(base_1.BaseCollection));
    exports.BaseList = BaseList;
});
define("jriapp_shared/utils/anylist", ["require", "exports", "jriapp_shared/utils/coreutils", "jriapp_shared/utils/sysutils", "jriapp_shared/utils/strutils", "jriapp_shared/utils/debounce", "jriapp_shared/collection/item", "jriapp_shared/collection/validation", "jriapp_shared/collection/list", "jriapp_shared/errors"], function (require, exports, coreutils_12, sysutils_5, strutils_6, debounce_2, item_1, validation_2, list_1, errors_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AnyList = exports.AnyValListItem = exports.AnyItemAspect = void 0;
    var getValue = coreutils_12.CoreUtils.getValue, setValue = coreutils_12.CoreUtils.setValue, Indexer = coreutils_12.CoreUtils.Indexer, startsWith = strutils_6.StringUtils.startsWith, trimBrackets = strutils_6.StringUtils.trimBrackets, sys = sysutils_5.SysUtils;
    var AnyItemAspect = (function (_super) {
        __extends(AnyItemAspect, _super);
        function AnyItemAspect() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AnyItemAspect.prototype._validateField = function (name) {
            return this.coll.errors.validateItemField(this.item, name);
        };
        AnyItemAspect.prototype._cloneVals = function () {
            var obj = _super.prototype._cloneVals.call(this);
            obj.val = JSON.parse(JSON.stringify(obj.val));
            return obj;
        };
        AnyItemAspect.prototype._validateFields = function () {
            return validation_2.Validations.distinct(this._validateItem());
        };
        AnyItemAspect.prototype._getProp = function (name) {
            return this._getValue(name, 0);
        };
        AnyItemAspect.prototype._setProp = function (name, val) {
            if (this._getProp(name) !== val) {
                this._setValue(name, val, 0);
                sys.raiseProp(this.item, name);
            }
        };
        AnyItemAspect.prototype.toString = function () {
            return "AnyItemAspect";
        };
        return AnyItemAspect;
    }(list_1.ListItemAspect));
    exports.AnyItemAspect = AnyItemAspect;
    var AnyValListItem = (function (_super) {
        __extends(AnyValListItem, _super);
        function AnyValListItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AnyValListItem.prototype.isHasProp = function (prop) {
            if (startsWith(prop, "[")) {
                return true;
            }
            return _super.prototype.isHasProp.call(this, prop);
        };
        AnyValListItem.prototype.getProp = function (name) {
            var fieldName = trimBrackets(name);
            return getValue(this.val, fieldName);
        };
        AnyValListItem.prototype.setProp = function (name, val) {
            var coll = this._aspect.coll, errors = coll.errors, old = this.getProp(name);
            if (old !== val) {
                try {
                    var fieldName = trimBrackets(name);
                    setValue(this.val, fieldName, val, false);
                    sys.raiseProp(this, name);
                    errors.removeError(this, name);
                    var validation = this._aspect._validateField(name);
                    if (!!validation && validation.errors.length > 0) {
                        throw new errors_9.ValidationError([validation], this);
                    }
                }
                catch (ex) {
                    var error = void 0;
                    if (sys.isValidationError(ex)) {
                        error = ex;
                    }
                    else {
                        error = new errors_9.ValidationError([
                            { fieldName: name, errors: [ex.message] }
                        ], this);
                    }
                    errors.addError(this, name, error.validations[0].errors);
                    throw error;
                }
            }
        };
        Object.defineProperty(AnyValListItem.prototype, "val", {
            get: function () {
                return this._aspect._getProp("val");
            },
            set: function (v) {
                this._aspect._setProp("val", v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AnyValListItem.prototype, "isPropertyBag", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AnyValListItem.prototype, "list", {
            get: function () {
                return this._aspect.list;
            },
            enumerable: false,
            configurable: true
        });
        AnyValListItem.prototype.toString = function () {
            return "AnyValListItem";
        };
        return AnyValListItem;
    }(item_1.CollectionItem));
    exports.AnyValListItem = AnyValListItem;
    var AnyList = (function (_super) {
        __extends(AnyList, _super);
        function AnyList(onChanged) {
            var _this = _super.call(this, [{ name: "val", dtype: 0 }]) || this;
            _this._saveVal = null;
            _this._onChanged = onChanged;
            _this._debounce = new debounce_2.Debounce();
            _this.addOnBeginEdit(function (_, a) {
                _this._saveVal = JSON.stringify(a.item.val);
            });
            _this.addOnEndEdit(function (_, a) {
                var item = a.item;
                if (a.isCanceled) {
                    _this._saveVal = null;
                    item.objEvents.raiseProp("[*]");
                    return;
                }
                var oldVal = _this._saveVal, newVal = JSON.stringify(item.val);
                _this._saveVal = null;
                if (oldVal !== newVal) {
                    _this.onChanged();
                }
            });
            _this.addOnCollChanged(function (_, a) {
                switch (a.changeType) {
                    case 0:
                        {
                            _this.onChanged();
                        }
                        break;
                    default:
                        break;
                }
            });
            return _this;
        }
        AnyList.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._debounce.dispose();
            this._onChanged = null;
            _super.prototype.dispose.call(this);
        };
        AnyList.prototype.itemFactory = function (aspect) {
            return new AnyValListItem(aspect);
        };
        AnyList.prototype.createItem = function (obj) {
            var isNew = !obj;
            var vals = isNew ? { val: Indexer() } : obj;
            if (!vals.val) {
                vals.val = Indexer();
            }
            var key = this._getNewKey();
            var aspect = new AnyItemAspect(this, vals, key, isNew);
            return aspect.item;
        };
        AnyList.prototype.onChanged = function () {
            var _this = this;
            this._debounce.enque(function () {
                if (!!_this._onChanged) {
                    var arr = _this.items.map(function (item) {
                        return item.val;
                    });
                    _this._onChanged(arr);
                }
            });
        };
        AnyList.prototype.setValues = function (values) {
            var vals = values.map(function (val) {
                return { val: val };
            });
            this.fillItems(vals, true);
        };
        AnyList.prototype.toString = function () {
            return "AnyList";
        };
        return AnyList;
    }(list_1.BaseList));
    exports.AnyList = AnyList;
});
define("jriapp_shared/utils/jsonarray", ["require", "exports", "jriapp_shared/object", "jriapp_shared/utils/coreutils", "jriapp_shared/utils/anylist"], function (require, exports, object_6, coreutils_13, anylist_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonArray = void 0;
    var getNewID = coreutils_13.CoreUtils.getNewID, getValue = coreutils_13.CoreUtils.getValue, setValue = coreutils_13.CoreUtils.setValue;
    var BAG_EVENTS;
    (function (BAG_EVENTS) {
        BAG_EVENTS["errors_changed"] = "errors_changed";
        BAG_EVENTS["validate_bag"] = "validate_bag";
        BAG_EVENTS["validate_field"] = "validate_field";
    })(BAG_EVENTS || (BAG_EVENTS = {}));
    var JsonArray = (function (_super) {
        __extends(JsonArray, _super);
        function JsonArray(owner, pathToArray) {
            var _this = _super.call(this) || this;
            _this._list = null;
            _this._uniqueID = getNewID("jsn");
            _this._owner = owner;
            _this._pathToArray = pathToArray;
            _this.owner.objEvents.onProp("val", function () {
                if (!!_this._list) {
                    _this._list.setValues(_this.getArray());
                }
            }, _this._uniqueID);
            return _this;
        }
        JsonArray.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._owner.objEvents.offNS(this._uniqueID);
            this._list.dispose();
            this._list = null;
            this._owner = null;
            _super.prototype.dispose.call(this);
        };
        JsonArray.prototype.updateArray = function (arr) {
            setValue(this._owner.val, this._pathToArray, arr, false);
            this._owner.updateJson();
        };
        JsonArray.prototype.addOnValidateBag = function (fn, nmspace, context) {
            this.objEvents.on("validate_bag", fn, nmspace, context);
        };
        JsonArray.prototype.offOnValidateBag = function (nmspace) {
            this.objEvents.off("validate_bag", nmspace);
        };
        JsonArray.prototype.addOnValidateField = function (fn, nmspace, context) {
            this.objEvents.on("validate_field", fn, nmspace, context);
        };
        JsonArray.prototype.offOnValidateField = function (nmspace) {
            this.objEvents.off("validate_field", nmspace);
        };
        JsonArray.prototype._validateBag = function (bag) {
            var args = {
                bag: bag,
                result: []
            };
            this.objEvents.raise("validate_bag", args);
            return (!!args.result) ? args.result : [];
        };
        JsonArray.prototype._validateField = function (bag, fieldName) {
            var args = {
                bag: bag,
                fieldName: fieldName,
                errors: []
            };
            this.objEvents.raise("validate_field", args);
            return (!!args.errors && args.errors.length > 0) ? { fieldName: fieldName, errors: args.errors } : null;
        };
        JsonArray.prototype.getArray = function () {
            if (!this._owner) {
                return [];
            }
            var res = getValue(this._owner.val, this._pathToArray);
            return (!res) ? [] : res;
        };
        Object.defineProperty(JsonArray.prototype, "pathToArray", {
            get: function () {
                return this._pathToArray;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(JsonArray.prototype, "owner", {
            get: function () {
                return this._owner;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(JsonArray.prototype, "list", {
            get: function () {
                var _this = this;
                if (!!this._owner && !this._list) {
                    this._list = new anylist_1.AnyList(function (vals) {
                        _this.updateArray(vals);
                    });
                    this._list.addOnValidateField(function (_, args) {
                        var validationInfo = _this._validateField(args.item, args.fieldName);
                        if (!!validationInfo && validationInfo.errors.length > 0) {
                            args.errors = validationInfo.errors;
                        }
                    }, this._uniqueID);
                    this._list.addOnValidateItem(function (_, args) {
                        var validationInfos = _this._validateBag(args.item);
                        args.result = validationInfos;
                    }, this._uniqueID);
                    this._list.setValues(this.getArray());
                }
                return this._list;
            },
            enumerable: false,
            configurable: true
        });
        return JsonArray;
    }(object_6.BaseObject));
    exports.JsonArray = JsonArray;
});
define("jriapp_shared/utils/weakmap", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWeakMap = void 0;
    var _undefined = void 0;
    var counter = (new Date().getTime()) % 1e9;
    function createWeakMap() {
        var win = window;
        if (!win.WeakMap) {
            win.WeakMap = WeakMap;
        }
        return new win.WeakMap();
    }
    exports.createWeakMap = createWeakMap;
    var WeakMap = (function () {
        function WeakMap() {
            this._name = "_wm_" + (Math.random() * 1e9 >>> 0) + (counter++ + "__");
        }
        WeakMap.prototype.set = function (key, value) {
            var entry = key[this._name];
            if (!!entry && entry[0] === key) {
                entry[1] = value;
            }
            else {
                Object.defineProperty(key, this._name, { value: [key, value], writable: true });
            }
            return this;
        };
        WeakMap.prototype.get = function (key) {
            var entry = key[this._name];
            return (!entry ? _undefined : (entry[0] === key ? entry[1] : _undefined));
        };
        WeakMap.prototype.delete = function (key) {
            var entry = key[this._name];
            if (!entry) {
                return false;
            }
            var hasValue = (entry[0] === key);
            entry[0] = entry[1] = _undefined;
            return hasValue;
        };
        WeakMap.prototype.has = function (key) {
            var entry = key[this._name];
            if (!entry) {
                return false;
            }
            return (entry[0] === key);
        };
        return WeakMap;
    }());
});
define("jriapp_shared/collection/dictionary", ["require", "exports", "jriapp_shared/utils/utils", "jriapp_shared/lang", "jriapp_shared/collection/utils", "jriapp_shared/collection/base", "jriapp_shared/collection/list"], function (require, exports, utils_9, lang_10, utils_10, base_2, list_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseDictionary = void 0;
    var utils = utils_9.Utils, format = utils.str.format, isNt = utils.check.isNt, sys = utils.sys, collUtils = utils_10.CollUtils;
    sys.getItemByProp = function (obj, prop) {
        if (obj instanceof BaseDictionary) {
            return obj.getItemByKey(prop);
        }
        else if (obj instanceof base_2.BaseCollection) {
            return obj.getItemByPos(parseInt(prop, 10));
        }
        else {
            return null;
        }
    };
    var BaseDictionary = (function (_super) {
        __extends(BaseDictionary, _super);
        function BaseDictionary(keyName, props) {
            var _this = this;
            if (!keyName) {
                throw new Error(format(lang_10.ERRS.ERR_PARAM_INVALID, "keyName", keyName));
            }
            _this = _super.call(this, props) || this;
            _this._keyName = keyName;
            var keyFld = _this.getFieldInfo(keyName);
            if (!keyFld) {
                throw new Error(format(lang_10.ERRS.ERR_DICTKEY_IS_NOTFOUND, keyName));
            }
            keyFld.isPrimaryKey = 1;
            return _this;
        }
        BaseDictionary.prototype.createItem = function (obj) {
            var isNew = !obj, vals = isNew ? collUtils.initVals(this.getFieldInfos(), {}) : obj;
            var key;
            if (isNew) {
                key = this._getNewKey();
            }
            else {
                if (isNt(vals[this._keyName])) {
                    throw new Error(format(lang_10.ERRS.ERR_DICTKEY_IS_EMPTY, this._keyName));
                }
                key = "" + vals[this._keyName];
            }
            var aspect = new list_2.ListItemAspect(this, vals, key, isNew);
            return aspect.item;
        };
        BaseDictionary.prototype._onItemAdded = function (item) {
            _super.prototype._onItemAdded.call(this, item);
            var key = item[this._keyName], self = this;
            if (isNt(key)) {
                throw new Error(format(lang_10.ERRS.ERR_DICTKEY_IS_EMPTY, this._keyName));
            }
            var oldkey = item._key, newkey = "" + key;
            if (oldkey !== newkey) {
                self._remapItem(oldkey, newkey, item);
                this._onCollectionChanged({
                    changeType: 3,
                    reason: 0,
                    oper: 4,
                    items: [item],
                    old_key: oldkey,
                    new_key: newkey
                });
            }
            this.objEvents.raiseProp("[" + item._key + "]");
        };
        BaseDictionary.prototype._onRemoved = function (item) {
            var key = item[this._keyName];
            _super.prototype._onRemoved.call(this, item);
            this.objEvents.raiseProp("[" + key + "]");
        };
        Object.defineProperty(BaseDictionary.prototype, "keyName", {
            get: function () {
                return this._keyName;
            },
            enumerable: false,
            configurable: true
        });
        BaseDictionary.prototype.toString = function () {
            return "BaseDictionary";
        };
        return BaseDictionary;
    }(list_2.BaseList));
    exports.BaseDictionary = BaseDictionary;
});
define("jriapp_shared/utils/lazy", ["require", "exports", "jriapp_shared/utils/checks"], function (require, exports, checks_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Lazy = void 0;
    var isNt = checks_11.Checks.isNt;
    var Lazy = (function () {
        function Lazy(factory) {
            this._val = null;
            this._factory = factory;
            if (!this._factory) {
                throw new Error("Lazy: Invalid value factory");
            }
        }
        Lazy.prototype.dispose = function () {
            if (this.IsValueCreated) {
                if ("dispose" in this._val) {
                    this._val.dispose();
                }
            }
            this._val = void 0;
            this._factory = null;
        };
        Object.defineProperty(Lazy.prototype, "Value", {
            get: function () {
                if (this._val === null) {
                    this._val = this._factory();
                    if (isNt(this._val)) {
                        throw new Error("Lazy: the value factory did'not returned an object");
                    }
                    this._factory = null;
                }
                return this._val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Lazy.prototype, "IsValueCreated", {
            get: function () {
                return !isNt(this._val);
            },
            enumerable: false,
            configurable: true
        });
        Lazy.prototype.getIsDisposed = function () {
            return this._val === void 0;
        };
        return Lazy;
    }());
    exports.Lazy = Lazy;
});
define("jriapp_shared", ["require", "exports", "jriapp_shared/consts", "jriapp_shared/int", "jriapp_shared/errors", "jriapp_shared/object", "jriapp_shared/utils/jsonbag", "jriapp_shared/utils/jsonarray", "jriapp_shared/utils/dates", "jriapp_shared/utils/weakmap", "jriapp_shared/lang", "jriapp_shared/collection/base", "jriapp_shared/collection/item", "jriapp_shared/collection/aspect", "jriapp_shared/collection/list", "jriapp_shared/collection/dictionary", "jriapp_shared/errors", "jriapp_shared/utils/ipromise", "jriapp_shared/utils/promise", "jriapp_shared/utils/utils", "jriapp_shared/utils/waitqueue", "jriapp_shared/utils/debounce", "jriapp_shared/utils/lazy"], function (require, exports, consts_3, int_2, errors_10, object_7, jsonbag_1, jsonarray_1, dates_2, weakmap_1, lang_11, base_3, item_2, aspect_2, list_3, dictionary_1, errors_11, ipromise_2, promise_6, utils_11, waitqueue_2, debounce_3, lazy_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VERSION = exports.Lazy = exports.Debounce = exports.WaitQueue = exports.Utils = exports.CancellationTokenSource = exports.AbortablePromise = exports.StatefulPromise = exports.ValidationError = exports.BaseDictionary = exports.BaseList = exports.ListItemAspect = exports.ItemAspect = exports.CollectionItem = exports.BaseCollection = exports.LocaleERRS = exports.LocaleSTRS = exports.createWeakMap = void 0;
    __exportStar(consts_3, exports);
    __exportStar(int_2, exports);
    __exportStar(errors_10, exports);
    __exportStar(object_7, exports);
    __exportStar(jsonbag_1, exports);
    __exportStar(jsonarray_1, exports);
    __exportStar(dates_2, exports);
    Object.defineProperty(exports, "createWeakMap", { enumerable: true, get: function () { return weakmap_1.createWeakMap; } });
    Object.defineProperty(exports, "LocaleSTRS", { enumerable: true, get: function () { return lang_11.STRS; } });
    Object.defineProperty(exports, "LocaleERRS", { enumerable: true, get: function () { return lang_11.ERRS; } });
    Object.defineProperty(exports, "BaseCollection", { enumerable: true, get: function () { return base_3.BaseCollection; } });
    Object.defineProperty(exports, "CollectionItem", { enumerable: true, get: function () { return item_2.CollectionItem; } });
    Object.defineProperty(exports, "ItemAspect", { enumerable: true, get: function () { return aspect_2.ItemAspect; } });
    Object.defineProperty(exports, "ListItemAspect", { enumerable: true, get: function () { return list_3.ListItemAspect; } });
    Object.defineProperty(exports, "BaseList", { enumerable: true, get: function () { return list_3.BaseList; } });
    Object.defineProperty(exports, "BaseDictionary", { enumerable: true, get: function () { return dictionary_1.BaseDictionary; } });
    Object.defineProperty(exports, "ValidationError", { enumerable: true, get: function () { return errors_11.ValidationError; } });
    __exportStar(ipromise_2, exports);
    Object.defineProperty(exports, "StatefulPromise", { enumerable: true, get: function () { return promise_6.StatefulPromise; } });
    Object.defineProperty(exports, "AbortablePromise", { enumerable: true, get: function () { return promise_6.AbortablePromise; } });
    Object.defineProperty(exports, "CancellationTokenSource", { enumerable: true, get: function () { return promise_6.CancellationTokenSource; } });
    Object.defineProperty(exports, "Utils", { enumerable: true, get: function () { return utils_11.Utils; } });
    Object.defineProperty(exports, "WaitQueue", { enumerable: true, get: function () { return waitqueue_2.WaitQueue; } });
    Object.defineProperty(exports, "Debounce", { enumerable: true, get: function () { return debounce_3.Debounce; } });
    Object.defineProperty(exports, "Lazy", { enumerable: true, get: function () { return lazy_1.Lazy; } });
    exports.VERSION = "4.0.0";
});

var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
define("jriapp/consts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SubscribeFlags = exports.BindTo = exports.BindScope = exports.LOADER_GIF = exports.ELVIEW_NM = exports.KEYS = exports.DATA_ATTR = exports.STORE_KEY = exports.BINDING_MODE = exports.SERVICES = void 0;
    var SERVICES;
    (function (SERVICES) {
        SERVICES["TOOLTIP_SVC"] = "ITooltipService";
        SERVICES["DATEPICKER_SVC"] = "IDatepicker";
        SERVICES["UIERRORS_SVC"] = "IUIErrorsService";
    })(SERVICES = exports.SERVICES || (exports.SERVICES = {}));
    var BINDING_MODE;
    (function (BINDING_MODE) {
        BINDING_MODE[BINDING_MODE["OneTime"] = 0] = "OneTime";
        BINDING_MODE[BINDING_MODE["OneWay"] = 1] = "OneWay";
        BINDING_MODE[BINDING_MODE["TwoWay"] = 2] = "TwoWay";
        BINDING_MODE[BINDING_MODE["BackWay"] = 3] = "BackWay";
    })(BINDING_MODE = exports.BINDING_MODE || (exports.BINDING_MODE = {}));
    var STORE_KEY;
    (function (STORE_KEY) {
        STORE_KEY["SVC"] = "svc.";
        STORE_KEY["CONVERTER"] = "cnv.";
        STORE_KEY["OBJECT"] = "obj.";
        STORE_KEY["OPTION"] = "opt.";
        STORE_KEY["LOADER"] = "ldr.";
        STORE_KEY["TGROUP"] = "tgrp.";
    })(STORE_KEY = exports.STORE_KEY || (exports.STORE_KEY = {}));
    var DATA_ATTR;
    (function (DATA_ATTR) {
        DATA_ATTR["DATA_BIND"] = "data-bind";
        DATA_ATTR["DATA_VIEW"] = "data-view";
        DATA_ATTR["DATA_VIEW_OPTIONS"] = "data-view-options";
        DATA_ATTR["DATA_EVENT_SCOPE"] = "data-scope";
        DATA_ATTR["DATA_ITEM_KEY"] = "data-key";
        DATA_ATTR["DATA_CONTENT"] = "data-content";
        DATA_ATTR["DATA_COLUMN"] = "data-column";
        DATA_ATTR["DATA_NAME"] = "data-name";
        DATA_ATTR["DATA_REQUIRE"] = "data-require";
    })(DATA_ATTR = exports.DATA_ATTR || (exports.DATA_ATTR = {}));
    var KEYS;
    (function (KEYS) {
        KEYS[KEYS["backspace"] = 8] = "backspace";
        KEYS[KEYS["tab"] = 9] = "tab";
        KEYS[KEYS["enter"] = 13] = "enter";
        KEYS[KEYS["esc"] = 27] = "esc";
        KEYS[KEYS["space"] = 32] = "space";
        KEYS[KEYS["pageUp"] = 33] = "pageUp";
        KEYS[KEYS["pageDown"] = 34] = "pageDown";
        KEYS[KEYS["end"] = 35] = "end";
        KEYS[KEYS["home"] = 36] = "home";
        KEYS[KEYS["left"] = 37] = "left";
        KEYS[KEYS["up"] = 38] = "up";
        KEYS[KEYS["right"] = 39] = "right";
        KEYS[KEYS["down"] = 40] = "down";
        KEYS[KEYS["del"] = 127] = "del";
    })(KEYS = exports.KEYS || (exports.KEYS = {}));
    var ELVIEW_NM;
    (function (ELVIEW_NM) {
        ELVIEW_NM["DataForm"] = "dataform";
    })(ELVIEW_NM = exports.ELVIEW_NM || (exports.ELVIEW_NM = {}));
    var LOADER_GIF;
    (function (LOADER_GIF) {
        LOADER_GIF["Small"] = "loader2.gif";
        LOADER_GIF["Default"] = "loader.gif";
    })(LOADER_GIF = exports.LOADER_GIF || (exports.LOADER_GIF = {}));
    var BindScope;
    (function (BindScope) {
        BindScope[BindScope["Application"] = 0] = "Application";
        BindScope[BindScope["Template"] = 1] = "Template";
        BindScope[BindScope["DataForm"] = 2] = "DataForm";
    })(BindScope = exports.BindScope || (exports.BindScope = {}));
    var BindTo;
    (function (BindTo) {
        BindTo[BindTo["Source"] = 0] = "Source";
        BindTo[BindTo["Target"] = 1] = "Target";
    })(BindTo = exports.BindTo || (exports.BindTo = {}));
    var SubscribeFlags;
    (function (SubscribeFlags) {
        SubscribeFlags[SubscribeFlags["delegationOn"] = 0] = "delegationOn";
        SubscribeFlags[SubscribeFlags["click"] = 1] = "click";
        SubscribeFlags[SubscribeFlags["change"] = 2] = "change";
        SubscribeFlags[SubscribeFlags["keypress"] = 3] = "keypress";
        SubscribeFlags[SubscribeFlags["keydown"] = 4] = "keydown";
        SubscribeFlags[SubscribeFlags["keyup"] = 5] = "keyup";
        SubscribeFlags[SubscribeFlags["input"] = 6] = "input";
    })(SubscribeFlags = exports.SubscribeFlags || (exports.SubscribeFlags = {}));
});
define("jriapp/int", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ButtonCss = exports.Config = void 0;
    exports.Config = jriapp_config || {};
    var ButtonCss = (function () {
        function ButtonCss() {
        }
        ButtonCss.Edit = "jriapp-actions jriapp-edit";
        ButtonCss.Delete = "jriapp-actions jriapp-delete";
        ButtonCss.OK = "jriapp-actions jriapp-ok";
        ButtonCss.Cancel = "jriapp-actions jriapp-cancel";
        return ButtonCss;
    }());
    exports.ButtonCss = ButtonCss;
});
define("jriapp/parsing/int", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.THIS_LEN = exports.DATES = exports.PARSE_TYPE = exports.TAG = exports.TOKEN = exports.spaceRX = exports.getRX = void 0;
    exports.getRX = /^get[(].+[)]$/g, exports.spaceRX = /^\s+$/;
    var TOKEN;
    (function (TOKEN) {
        TOKEN["DELIMETER1"] = ":";
        TOKEN["DELIMETER2"] = "=";
        TOKEN["COMMA"] = ",";
        TOKEN["THIS"] = "this.";
        TOKEN["PARAM"] = "param";
        TOKEN["TARGET_PATH"] = "targetPath";
        TOKEN["BIND"] = "bind";
        TOKEN["GET"] = "get";
        TOKEN["DATE"] = "date";
        TOKEN["INJECT"] = "inject";
    })(TOKEN = exports.TOKEN || (exports.TOKEN = {}));
    var TAG;
    (function (TAG) {
        TAG["NONE"] = "";
        TAG["LITERAL"] = "0";
        TAG["BIND"] = "1";
        TAG["GET"] = "2";
        TAG["DATE"] = "3";
        TAG["INJECT"] = "4";
        TAG["BRACE"] = "5";
        TAG["INDEXER"] = "6";
    })(TAG = exports.TAG || (exports.TAG = {}));
    var PARSE_TYPE;
    (function (PARSE_TYPE) {
        PARSE_TYPE[PARSE_TYPE["NONE"] = 0] = "NONE";
        PARSE_TYPE[PARSE_TYPE["BINDING"] = 1] = "BINDING";
        PARSE_TYPE[PARSE_TYPE["VIEW"] = 2] = "VIEW";
    })(PARSE_TYPE = exports.PARSE_TYPE || (exports.PARSE_TYPE = {}));
    var DATES;
    (function (DATES) {
        DATES["NOW"] = "now";
        DATES["TODAY"] = "today";
        DATES["TOMORROW"] = "tomorrow";
        DATES["YESTERDAY"] = "yesterday";
    })(DATES = exports.DATES || (exports.DATES = {}));
    exports.THIS_LEN = "this.".length;
});
define("jriapp/parsing/helper", ["require", "exports", "jriapp_shared", "jriapp/parsing/int", "jriapp/bootstrapper"], function (require, exports, jriapp_shared_1, int_1, bootstrapper_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Helper = exports.Funcs = void 0;
    var utils = jriapp_shared_1.Utils, _a = utils.check, isNumeric = _a.isNumeric, isBoolString = _a.isBoolString, _undefined = _a._undefined, isString = _a.isString, _b = utils.str, format = _b.format, trim = _b.fastTrim, startsWith = _b.startsWith, trimQuotes = _b.trimQuotes, _c = utils.core, parseBool = _c.parseBool, extend = _c.extend, dates = jriapp_shared_1.DateUtils, _d = jriapp_shared_1.Utils.sys, getBraceLen = _d.getBraceLen, resolvePath = _d.resolvePath, debug = utils.debug, log = utils.log;
    function _reportBug(bug) {
        if (!debug.isDebugging()) {
            return;
        }
        debug.checkStartDebugger();
        log.error(bug);
    }
    var Funcs = (function () {
        function Funcs() {
        }
        Funcs.setKeyVal = function (kv, start, end, val, isKey, isLit) {
            if (start > -1 && start < end) {
                var str = val.substring(start, end);
                var v = !isLit ? trim(str) : str;
                if (!v) {
                    return;
                }
                if (isKey) {
                    kv.key += v;
                }
                else {
                    kv.val += v;
                }
            }
        };
        Funcs.getDate = function (val, format) {
            if (!val) {
                return dates.today();
            }
            else {
                var lower = val.toLowerCase();
                if (startsWith(lower, "startof")) {
                    return dates.startOf(lower.substr("startof".length));
                }
                else if (startsWith(lower, "endof")) {
                    return dates.endOf(lower.substr("endof".length));
                }
                else {
                    switch (val.toLowerCase()) {
                        case "now":
                            return dates.now();
                        case "today":
                            return dates.today();
                        case "tomorrow":
                            return dates.tomorrow();
                        case "yesterday":
                            return dates.yesterday();
                        default:
                            return dates.strToDate(val, format);
                    }
                }
            }
        };
        Funcs.getTag = function (val, start, end) {
            var token = trim(val.substring(start, end));
            var tag = "";
            switch (token) {
                case "bind":
                    tag = "1";
                    break;
                case "get":
                    tag = "2";
                    break;
                case "inject":
                    tag = "4";
                    break;
                case "date":
                    tag = "3";
                    break;
                default:
                    throw new Error("Unknown token: \"" + token + "\" in expression " + val);
            }
            return tag;
        };
        Funcs.checkVal = function (kv) {
            if (!kv.key) {
                return false;
            }
            if (!!kv.val) {
                switch (kv.tag) {
                    case "3":
                        {
                            var args = funcs.getExprArgs(kv.val);
                            var val = args.length > 0 ? args[0] : _undefined;
                            if (isString(val)) {
                                var format_1 = args.length > 1 ? args[1] : "YYYYMMDD";
                                if (!isString(format_1)) {
                                    throw new Error("Invalid expression with key: " + kv.key + " val: " + kv.val);
                                }
                                kv.val = funcs.getDate(val, format_1);
                            }
                            else {
                                if (!!val) {
                                    throw new Error("Invalid expression with key: " + kv.key + " val: " + kv.val);
                                }
                                kv.val = funcs.getDate(_undefined, _undefined);
                            }
                        }
                        break;
                    case "":
                        {
                            if (isNumeric(kv.val)) {
                                kv.val = Number(kv.val);
                            }
                            else if (isBoolString(kv.val)) {
                                kv.val = parseBool(kv.val);
                            }
                        }
                        break;
                }
            }
            return true;
        };
        Funcs.getKeyVals = function (val) {
            var i, ch, literal, parts = [], kv = { tag: "", key: "", val: "" }, isKey = true, start = -1;
            var len = val.length;
            for (i = 0; i < len; i += 1) {
                if (start < 0) {
                    start = i;
                }
                ch = val.charAt(i);
                if (!literal) {
                    switch (ch) {
                        case "'":
                        case '"':
                            funcs.setKeyVal(kv, start, i, val, isKey, false);
                            literal = ch;
                            start = i + 1;
                            if (kv.tag === "") {
                                kv.tag = "0";
                            }
                            break;
                        case "(":
                            if (!isKey && start < i) {
                                var tag = funcs.getTag(val, start, i);
                                var braceLen_1 = getBraceLen(val, i, 0);
                                funcs.setKeyVal(kv, i + 1, i + braceLen_1 - 1, val, isKey, false);
                                if (kv.tag !== "") {
                                    throw new Error("Invalid tag: " + trim(val.substring(start, i)) + " and value: " + kv.val + " in expression: " + val);
                                }
                                kv.tag = tag;
                                i += (braceLen_1 - 1);
                                start = -1;
                            }
                            else {
                                throw new Error("Invalid: \"" + ch + "\" in expression " + val);
                            }
                            break;
                        case "[":
                            funcs.setKeyVal(kv, start, i, val, isKey, false);
                            var braceLen = getBraceLen(val, i, 2);
                            var str = trimQuotes(val.substring(i + 1, i + braceLen - 1));
                            if (!str) {
                                throw new Error("Invalid: \"" + ch + "\" in expression " + val);
                            }
                            if (isKey) {
                                kv.key += "[" + str + "]";
                            }
                            else {
                                kv.val += "[" + str + "]";
                                if (kv.tag !== "") {
                                    throw new Error("Invalid value: " + kv.val + " in expression: " + val);
                                }
                                kv.tag = "6";
                            }
                            i += (braceLen - 1);
                            start = -1;
                            break;
                        case "{":
                            if (!isKey) {
                                var test = trim(val.substring(start, i));
                                if (!!test) {
                                    throw new Error("Invalid word: \"" + test + "{\" in expression " + val);
                                }
                                var braceLen_2 = getBraceLen(val, i, 1);
                                kv.val = val.substring(i + 1, i + braceLen_2 - 1);
                                if (kv.tag !== "") {
                                    throw new Error("Invalid value: " + kv.val + " after brace \"{\" in expression: " + val);
                                }
                                kv.tag = "5";
                                i += (braceLen_2 - 1);
                                start = -1;
                            }
                            else {
                                throw new Error("Invalid: \"" + ch + "\" in expression " + val);
                            }
                            break;
                        case ",":
                            funcs.setKeyVal(kv, start, i, val, isKey, false);
                            start = -1;
                            parts.push(kv);
                            kv = { tag: "", key: "", val: "" };
                            isKey = true;
                            break;
                        case ":":
                        case "=":
                            funcs.setKeyVal(kv, start, i, val, isKey, false);
                            if (kv.tag !== "" || !isKey) {
                                throw new Error("Invalid \"" + ch + "\" at the start of: " + val.substring(i) + " in expression: " + val);
                            }
                            start = -1;
                            isKey = false;
                            break;
                        case ")":
                        case "}":
                        case "]":
                            throw new Error("Invalid: \"" + ch + "\" in expression " + val);
                        default:
                            if (kv.tag !== "" && kv.tag !== "6") {
                                if (ch !== "\t" && ch !== " " && ch !== "\n" && ch !== "\r")
                                    throw new Error("Invalid: \"" + ch + "\" at the start of: " + val.substring(i) + " in expression: " + val);
                            }
                            break;
                    }
                }
                else {
                    switch (ch) {
                        case "'":
                        case '"':
                            if (literal === ch) {
                                var i1 = i + 1, next = i1 < len ? val.charAt(i1) : null;
                                if (next === ch) {
                                    funcs.setKeyVal(kv, start, i + 1, val, isKey, true);
                                    i += 1;
                                    start = -1;
                                }
                                else {
                                    funcs.setKeyVal(kv, start, i, val, isKey, true);
                                    literal = null;
                                    start = -1;
                                }
                            }
                            break;
                    }
                }
            }
            funcs.setKeyVal(kv, start, i, val, isKey, false);
            parts.push(kv);
            parts = parts.filter(function (kv) {
                return funcs.checkVal(kv);
            });
            return parts;
        };
        Funcs.reduceKeyVal = function (kv, parseType, dataContext, res) {
            var isBind = false, bindparts;
            var checkIsBind = parseType === 2 || parseType === 1;
            if (checkIsBind && kv.tag === "1") {
                bindparts = funcs.getExprArgs(kv.val);
                isBind = bindparts.length > 0;
            }
            if (isBind) {
                switch (parseType) {
                    case 2:
                        var source = dataContext || bootstrapper_1.bootstrapper.app;
                        if (bindparts.length > 1) {
                            if (isString(bindparts[1])) {
                                source = resolvePath(bootstrapper_1.bootstrapper.app, bindparts[1]);
                                if (!source) {
                                    throw new Error("Invalid source in the bind expression, see key: " + kv.key + "   val: " + kv.val);
                                }
                            }
                            else {
                                throw new Error("Invalid second parameter in the bind expression, see key: " + kv.key + "   val: " + kv.val);
                            }
                        }
                        if (isString(bindparts[0])) {
                            var boundValue = resolvePath(source, bindparts[0]);
                            if (boundValue === _undefined) {
                                throw new Error("The bind expression returns UNDEFINED value, see key: " + kv.key + "   val: " + kv.val);
                            }
                            res[kv.key] = boundValue;
                        }
                        else {
                            throw new Error("Invalid bind expression, see key: " + kv.key + "   val: " + kv.val);
                        }
                        break;
                    case 1:
                        if (bindparts.length > 0 && kv.key === "param") {
                            res[kv.key] = bindparts;
                            res.isBind = true;
                        }
                        break;
                    default:
                        res[kv.key] = kv.val;
                        break;
                }
            }
            else {
                switch (kv.tag) {
                    case "5":
                        res[kv.key] = helper.parseOption(parseType, kv.val, dataContext);
                        break;
                    case "2":
                        {
                            res[kv.key] = helper.parseGetExpr(0, kv.val, dataContext);
                        }
                        break;
                    case "4":
                        {
                            var args = funcs.getExprArgs(kv.val);
                            var id = args[0], rest = args.slice(1);
                            if (isString(id)) {
                                res[kv.key] = helper.getSvc.apply(helper, __spreadArray([id], rest));
                            }
                            else {
                                throw new Error("Invalid expression with key: " + kv.key + "   val: " + kv.val);
                            }
                        }
                        break;
                    default:
                        res[kv.key] = kv.val;
                        break;
                }
            }
        };
        Funcs.getExprArgs = function (expr) {
            var i, ch, literal, parts = [], start = -1, seekNext = false;
            var len = expr.length;
            var current = "";
            for (i = 0; i < len; i += 1) {
                if (start < 0) {
                    start = i;
                }
                ch = expr.charAt(i);
                if (!literal) {
                    switch (ch) {
                        case "'":
                        case '"':
                            literal = ch;
                            current += expr.substring(start, i);
                            start = i + 1;
                            break;
                        case ',':
                            {
                                if (seekNext && (current != "" || trim(expr.substring(start, i)) != ""))
                                    throw new Error("Invalid expression arguments: " + expr);
                                if (!seekNext) {
                                    current += expr.substring(start, i);
                                    parts.push(current);
                                }
                                else {
                                    seekNext = false;
                                }
                                start = -1;
                                current = "";
                            }
                            break;
                        case '{':
                            {
                                if (trim(current) !== "")
                                    throw new Error("Invalid expression arguments: " + expr);
                                var braceLen = getBraceLen(expr, i, 1);
                                var val = expr.substring(i + 1, i + braceLen - 1);
                                var obj = helper.parseOption(0, val, null);
                                parts.push(obj);
                                i += (braceLen - 1);
                                start = -1;
                                current = "";
                                seekNext = true;
                            }
                            break;
                    }
                }
                else {
                    switch (ch) {
                        case "'":
                        case '"':
                            if (literal === ch) {
                                var i1 = i + 1, next = i1 < len ? expr.charAt(i1) : null;
                                if (next === ch) {
                                    current += expr.substring(start, i + 1);
                                    i += 1;
                                    start = i + 1;
                                }
                                else {
                                    current += expr.substring(start, i);
                                    literal = null;
                                    start = i + 1;
                                }
                            }
                            break;
                    }
                }
            }
            if (start > -1) {
                if (seekNext && (current != "" || trim(expr.substring(start, i)) != ""))
                    throw new Error("Invalid expression arguments: " + expr);
                current += expr.substring(start, i);
                parts.push(current);
            }
            return parts.map(function (p) { return isString(p) ? trim(p) : p; });
        };
        return Funcs;
    }());
    exports.Funcs = Funcs;
    var funcs = Funcs;
    var Helper = (function () {
        function Helper() {
        }
        Helper.getCurlyBraceParts = function (val) {
            var i, ch;
            var parts = [], len = val.length;
            for (i = 0; i < len; i += 1) {
                ch = val.charAt(i);
                switch (ch) {
                    case "{":
                        var braceLen = getBraceLen(val, i, 1);
                        parts.push(trim(val.substr(i + 1, braceLen - 2)));
                        i += (braceLen - 1);
                        break;
                    default:
                        if (!int_1.spaceRX.test(ch)) {
                            throw new Error(format(jriapp_shared_1.LocaleERRS.ERR_EXPR_BRACES_INVALID, val));
                        }
                        break;
                }
            }
            return parts;
        };
        Helper.getBraceContent = function (val, brace) {
            var ch, start = 0;
            var len = val.length;
            var br1;
            switch (brace) {
                case 0:
                    br1 = "(";
                    break;
                case 1:
                    br1 = "{";
                    break;
                case 2:
                    br1 = "[";
                    break;
            }
            for (var i = 0; i < len; i += 1) {
                if (start < 0) {
                    start = i;
                }
                ch = val.charAt(i);
                if (ch === br1) {
                    var braceLen = getBraceLen(val, i, brace);
                    return trim(val.substr(i + 1, braceLen - 2));
                }
            }
            throw new Error("Invalid Expression: " + val);
        };
        Helper.getSvc = function (id) {
            var _a;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var argsdata = [];
            for (var i = 0; i < args.length; ++i) {
                var val = args[i];
                if (isNumeric(val)) {
                    argsdata[i] = Number(val);
                }
                else if (isBoolString(val)) {
                    argsdata[i] = parseBool(val);
                }
                else {
                    argsdata[i] = val;
                }
            }
            return (_a = bootstrapper_1.bootstrapper.app).getSvc.apply(_a, __spreadArray([trimQuotes(id)], argsdata));
        };
        Helper.isGetExpr = function (val) {
            return !!val && int_1.getRX.test(val);
        };
        Helper.getGetParts = function (str) {
            var args = funcs.getExprArgs(str);
            return args.map(function (id) {
                if (!isString(id)) {
                    throw new Error("Invalid get expression: " + str);
                }
                return trim(helper.getOptions(trim(id)));
            });
        };
        Helper.getOptions = function (id) {
            return bootstrapper_1.bootstrapper.app.getOptions(trimQuotes(id));
        };
        Helper.parseGetExpr = function (parseType, strExpr, dataContext) {
            var parts = helper.getGetParts(strExpr);
            return helper.parseOptions(parseType, parts, dataContext);
        };
        Helper.parseOptions = function (parseType, parts, dataContext) {
            var first = parts[0], rest = parts.slice(1);
            var obj = helper.parseOption(parseType, first, dataContext) || {};
            for (var _i = 0, rest_1 = rest; _i < rest_1.length; _i++) {
                var val = rest_1[_i];
                var obj2 = helper.parseOption(parseType, val, dataContext);
                obj = extend(obj, obj2);
            }
            return obj;
        };
        Helper.parseOption = function (parseType, part, dataContext) {
            var res = parseType === 1 ? {
                targetPath: "",
                sourcePath: "",
                to: "",
                target: null,
                source: null,
                mode: "OneWay",
                converter: null,
                param: null,
                isBind: false
            } : {};
            part = trim(part);
            if (helper.isGetExpr(part)) {
                var expr = helper.getBraceContent(part, 0);
                return helper.parseGetExpr(parseType, expr, dataContext);
            }
            var kvals = funcs.getKeyVals(part);
            for (var _i = 0, kvals_1 = kvals; _i < kvals_1.length; _i++) {
                var kv = kvals_1[_i];
                if (parseType === 1 && !kv.val && startsWith(kv.key, "this.")) {
                    kv.val = kv.key.substr(int_1.THIS_LEN);
                    kv.key = "targetPath";
                }
                try {
                    funcs.reduceKeyVal(kv, parseType, dataContext, res);
                }
                catch (err) {
                    res[kv.key] = _undefined;
                    _reportBug(err);
                }
            }
            return res;
        };
        return Helper;
    }());
    exports.Helper = Helper;
    var helper = Helper;
});
define("jriapp/utils/parser", ["require", "exports", "jriapp_shared", "jriapp/parsing/helper"], function (require, exports, jriapp_shared_2, helper_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Parser = void 0;
    var _a = jriapp_shared_2.Utils.str, trim = _a.fastTrim, startsWith = _a.startsWith, endsWith = _a.endsWith, isGetExpr = helper_1.Helper.isGetExpr, getBraceContent = helper_1.Helper.getBraceContent, getCurlyBraceParts = helper_1.Helper.getCurlyBraceParts, getGetParts = helper_1.Helper.getGetParts, parseOptions = helper_1.Helper.parseOptions, parseOption = helper_1.Helper.parseOption;
    function _appendPart(parts, str) {
        if (startsWith(str, "{") && endsWith(str, "}")) {
            var subparts = getCurlyBraceParts(str);
            for (var k = 0; k < subparts.length; k += 1) {
                parts.push(trim(subparts[k]));
            }
        }
        else {
            parts.push(str);
        }
    }
    function _splitIntoParts(str) {
        var parts = [];
        if (isGetExpr(str)) {
            var ids = getBraceContent(str, 0);
            var args = getGetParts(ids);
            for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {
                var val = args_1[_i];
                _appendPart(parts, trim(val));
            }
        }
        else {
            _appendPart(parts, trim(str));
        }
        return parts;
    }
    function _parseOptions(parseType, options, dataContext) {
        var parts = _splitIntoParts(options);
        return parseOptions(parseType, parts, dataContext);
    }
    function _parseBindings(parseType, bindings, dataContext) {
        return bindings.map(function (str) { return parseOption(parseType, str, dataContext); });
    }
    var Parser = (function () {
        function Parser() {
        }
        Parser.parseOptions = function (options) {
            return _parseOptions(0, options, null);
        };
        Parser.parseBindings = function (bindings) {
            var parts = [];
            for (var _i = 0, bindings_1 = bindings; _i < bindings_1.length; _i++) {
                var str = bindings_1[_i];
                var arr = _splitIntoParts(str);
                parts.push.apply(parts, arr);
            }
            return _parseBindings(1, parts, null);
        };
        Parser.parseViewOptions = function (options, dataContext) {
            return _parseOptions(2, options, dataContext);
        };
        return Parser;
    }());
    exports.Parser = Parser;
});
define("jriapp/elview", ["require", "exports", "jriapp_shared", "jriapp/bootstrapper", "jriapp/utils/parser"], function (require, exports, jriapp_shared_3, bootstrapper_2, parser_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createElViewRegister = exports.createElViewFactory = void 0;
    var utils = jriapp_shared_3.Utils, Indexer = utils.core.Indexer, format = utils.str.format, parser = parser_1.Parser, ERRS = jriapp_shared_3.LocaleERRS;
    function createElViewFactory(register) {
        return new ElViewFactory(register);
    }
    exports.createElViewFactory = createElViewFactory;
    function createElViewRegister(next) {
        return new ElViewRegister(next);
    }
    exports.createElViewRegister = createElViewRegister;
    var ElViewRegister = (function () {
        function ElViewRegister(next) {
            this._exports = Indexer();
            this._next = next;
        }
        ElViewRegister.prototype.dispose = function () {
            this._exports = Indexer();
        };
        ElViewRegister.prototype.registerElView = function (name, vwType) {
            if (!bootstrapper_2.getObject(this, name)) {
                bootstrapper_2.registerObject(this, name, vwType);
            }
            else {
                throw new Error(utils.str.format(ERRS.ERR_OBJ_ALREADY_REGISTERED, name));
            }
        };
        ElViewRegister.prototype.getElViewType = function (name) {
            var res = bootstrapper_2.getObject(this, name);
            if (!res && !!this._next) {
                res = this._next.getElViewType(name);
            }
            return res;
        };
        ElViewRegister.prototype.getData = function () {
            return this._exports;
        };
        return ElViewRegister;
    }());
    var ElViewStore = (function () {
        function ElViewStore() {
            this._weakmap = jriapp_shared_3.createWeakMap();
        }
        ElViewStore.prototype.dispose = function () {
        };
        ElViewStore.prototype.getElView = function (el) {
            return this._weakmap.get(el);
        };
        ElViewStore.prototype.setElView = function (el, view) {
            if (!view) {
                this._weakmap.delete(el);
            }
            else {
                this._weakmap.set(el, view);
            }
        };
        return ElViewStore;
    }());
    var ElViewFactory = (function (_super) {
        __extends(ElViewFactory, _super);
        function ElViewFactory(register) {
            var _this = _super.call(this) || this;
            _this._store = new ElViewStore();
            _this._register = createElViewRegister(register);
            return _this;
        }
        ElViewFactory.prototype.dispose = function () {
            if (!this._store) {
                return;
            }
            this._store.dispose();
            this._register.dispose();
            this._store = null;
            this._register = null;
            _super.prototype.dispose.call(this);
        };
        ElViewFactory.prototype.createElView = function (viewInfo) {
            var viewType, elView;
            var el = viewInfo.el, options = viewInfo.options, name = viewInfo.name;
            if (!!name) {
                viewType = this._register.getElViewType(name);
                if (!viewType) {
                    throw new Error(format(ERRS.ERR_ELVIEW_NOT_REGISTERED, name));
                }
            }
            if (!viewType) {
                var nodeNm = el.nodeName.toLowerCase(), attrType = void 0;
                switch (nodeNm) {
                    case "input":
                        {
                            attrType = el.getAttribute("type");
                            nodeNm = nodeNm + ":" + attrType;
                            viewType = this._register.getElViewType(nodeNm);
                        }
                        break;
                    default:
                        viewType = this._register.getElViewType(nodeNm);
                        break;
                }
                if (!viewType) {
                    throw new Error(format(ERRS.ERR_ELVIEW_NOT_CREATED, nodeNm));
                }
            }
            try {
                elView = new viewType(el, options || {});
            }
            catch (e) {
                this._store.setElView(el, null);
                throw e;
            }
            return elView;
        };
        ElViewFactory.prototype.getElView = function (el) {
            return this.store.getElView(el);
        };
        ElViewFactory.prototype.getElementViewInfo = function (el, dataContext) {
            if (dataContext === void 0) { dataContext = null; }
            var viewName = null;
            if (el.hasAttribute("data-view")) {
                var attr = el.getAttribute("data-view");
                if (!!attr && attr !== "default") {
                    viewName = attr;
                }
            }
            var options;
            if (el.hasAttribute("data-view-options")) {
                var attr = el.getAttribute("data-view-options");
                options = parser.parseViewOptions(attr, dataContext);
            }
            else {
                options = Indexer();
            }
            return { el: el, name: viewName, options: options };
        };
        Object.defineProperty(ElViewFactory.prototype, "store", {
            get: function () {
                return this._store;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ElViewFactory.prototype, "register", {
            get: function () {
                return this._register;
            },
            enumerable: false,
            configurable: true
        });
        return ElViewFactory;
    }(jriapp_shared_3.BaseObject));
});
define("jriapp/content", ["require", "exports", "jriapp_shared"], function (require, exports, jriapp_shared_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createContentFactoryList = void 0;
    var ERRS = jriapp_shared_4.LocaleERRS;
    function createContentFactoryList() {
        return new FactoryList();
    }
    exports.createContentFactoryList = createContentFactoryList;
    var LastFactory = (function () {
        function LastFactory() {
        }
        LastFactory.prototype.getContentType = function (_options) {
            throw new Error(ERRS.ERR_BINDING_CONTENT_NOT_FOUND);
        };
        LastFactory.prototype.isExternallyCachable = function (_contentType) {
            return false;
        };
        return LastFactory;
    }());
    var FactoryList = (function () {
        function FactoryList() {
            this._factory = new LastFactory();
        }
        FactoryList.prototype.addFactory = function (factoryGetter) {
            this._factory = factoryGetter(this._factory);
        };
        FactoryList.prototype.getContentType = function (options) {
            return this._factory.getContentType(options);
        };
        FactoryList.prototype.isExternallyCachable = function (contentType) {
            return this._factory.isExternallyCachable(contentType);
        };
        return FactoryList;
    }());
});
define("jriapp/defaults", ["require", "exports", "jriapp_shared", "jriapp/int"], function (require, exports, jriapp_shared_5, int_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Defaults = void 0;
    var utils = jriapp_shared_5.Utils, endsWith = utils.str.endsWith;
    var Defaults = (function (_super) {
        __extends(Defaults, _super);
        function Defaults() {
            var _this = _super.call(this) || this;
            _this._dateFormat = "DD.MM.YYYY";
            _this._dateTimeFormat = "DD.MM.YYYY HH:mm:ss";
            _this._timeFormat = "HH:mm:ss";
            _this._imagesPath = "";
            _this._decimalPoint = ",";
            _this._thousandSep = " ";
            _this._decPrecision = 2;
            return _this;
        }
        Defaults.prototype.toString = function () {
            return "Defaults";
        };
        Object.defineProperty(Defaults.prototype, "dateFormat", {
            get: function () {
                return this._dateFormat;
            },
            set: function (v) {
                if (this._dateFormat !== v) {
                    this._dateFormat = v;
                    this.objEvents.raiseProp("dateFormat");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Defaults.prototype, "timeFormat", {
            get: function () {
                return this._timeFormat;
            },
            set: function (v) {
                if (this._timeFormat !== v) {
                    this._timeFormat = v;
                    this.objEvents.raiseProp("timeFormat");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Defaults.prototype, "dateTimeFormat", {
            get: function () {
                return this._dateTimeFormat;
            },
            set: function (v) {
                if (this._dateTimeFormat !== v) {
                    this._dateTimeFormat = v;
                    this.objEvents.raiseProp("dateTimeFormat");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Defaults.prototype, "imagesPath", {
            get: function () {
                return this._imagesPath;
            },
            set: function (v) {
                if (!v) {
                    v = "";
                }
                if (this._imagesPath !== v) {
                    if (!endsWith(v, "/")) {
                        this._imagesPath = v + "/";
                    }
                    else {
                        this._imagesPath = v;
                    }
                    this.objEvents.raiseProp("imagesPath");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Defaults.prototype, "decimalPoint", {
            get: function () {
                return this._decimalPoint;
            },
            set: function (v) {
                if (this._decimalPoint !== v) {
                    this._decimalPoint = v;
                    this.objEvents.raiseProp("decimalPoint");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Defaults.prototype, "thousandSep", {
            get: function () {
                return this._thousandSep;
            },
            set: function (v) {
                if (this._thousandSep !== v) {
                    this._thousandSep = v;
                    this.objEvents.raiseProp("thousandSep");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Defaults.prototype, "decPrecision", {
            get: function () {
                return this._decPrecision;
            },
            set: function (v) {
                if (this._decPrecision !== v) {
                    this._decPrecision = v;
                    this.objEvents.raiseProp("decPrecision");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Defaults.prototype, "ButtonsCSS", {
            get: function () {
                return int_2.ButtonCss;
            },
            enumerable: false,
            configurable: true
        });
        return Defaults;
    }(jriapp_shared_5.BaseObject));
    exports.Defaults = Defaults;
});
define("jriapp/utils/tloader", ["require", "exports", "jriapp_shared"], function (require, exports, jriapp_shared_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TemplateLoader = exports.registerTemplateGroup = exports.registerLoader = exports.getLoader = void 0;
    var utils = jriapp_shared_6.Utils, isFunc = utils.check.isFunc, _a = utils.core, getValue = _a.getValue, setValue = _a.setValue, format = utils.str.format, _b = utils.async, createDeferred = _b.createDeferred, reject = _b.reject, ERRS = jriapp_shared_6.LocaleERRS, DEBUG = utils.debug, LOG = utils.log;
    var LOADER_EVENTS;
    (function (LOADER_EVENTS) {
        LOADER_EVENTS["loaded"] = "loaded";
    })(LOADER_EVENTS || (LOADER_EVENTS = {}));
    function getLoader(root, name) {
        var name2 = "ldr." + name;
        return getValue(root.getData(), name2);
    }
    exports.getLoader = getLoader;
    function registerLoader(root, name, loader) {
        if (!isFunc(loader)) {
            throw new Error(format(ERRS.ERR_ASSERTION_FAILED, "loader must be a Function"));
        }
        var name2 = "ldr." + name;
        var info = { loader: loader, owner: root };
        setValue(root.getData(), name2, info, true);
    }
    exports.registerLoader = registerLoader;
    function registerTemplateGroup(root, name, obj) {
        var name2 = "tgrp." + name;
        setValue(root.getData(), name2, obj, true);
    }
    exports.registerTemplateGroup = registerTemplateGroup;
    function getTemplateGroup(root, name) {
        var name2 = "tgrp." + name;
        return getValue(root.getData(), name2);
    }
    function getGroupName(fullName) {
        var parts = fullName.split(".");
        if (parts.length > 2) {
            throw new Error("Invalid template name: " + fullName);
        }
        return (parts.length === 1) ? "" : parts[0];
    }
    var TemplateLoader = (function (_super) {
        __extends(TemplateLoader, _super);
        function TemplateLoader() {
            var _this = _super.call(this) || this;
            var self = _this;
            _this._promises = [];
            _this._waitQueue = new jriapp_shared_6.WaitQueue(self);
            return _this;
        }
        TemplateLoader.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            var self = this;
            self._promises = [];
            if (!!self._waitQueue) {
                self._waitQueue.dispose();
                self._waitQueue = null;
            }
            _super.prototype.dispose.call(this);
        };
        TemplateLoader.prototype.addOnLoaded = function (fn, nmspace) {
            this.objEvents.on("loaded", fn, nmspace);
        };
        TemplateLoader.prototype.offOnLoaded = function (nmspace) {
            this.objEvents.off("loaded", nmspace);
        };
        TemplateLoader.prototype.waitForNotLoading = function (callback, callbackArgs) {
            this._waitQueue.enQueue({
                prop: "isLoading",
                groupName: null,
                predicate: function (val) { return !val; },
                action: callback,
                actionArgs: callbackArgs
            });
        };
        TemplateLoader.prototype._onLoaded = function (html, owner) {
            this.objEvents.raise("loaded", { html: html, owner: owner });
        };
        TemplateLoader.prototype.loadTemplatesAsync = function (owner, loader) {
            var self = this, promise = loader(), old = self.isLoading;
            self._promises.push(promise);
            if (self.isLoading !== old) {
                self.objEvents.raiseProp("isLoading");
            }
            var res = promise.then(function (html) {
                self._onLoaded(html, owner);
            });
            res.finally(function () {
                utils.arr.remove(self._promises, promise);
                if (!self.isLoading) {
                    self.objEvents.raiseProp("isLoading");
                }
            });
            return res;
        };
        TemplateLoader.prototype.getTemplateLoader = function (context, name) {
            var self = this, info = context.getTemplateLoaderInfo(name);
            if (!!info) {
                return info.loader;
            }
            else {
                var groupName = getGroupName(name);
                if (!groupName) {
                    return null;
                }
                else {
                    var group_1 = getTemplateGroup(context, groupName);
                    if (!group_1) {
                        throw new Error(format(ERRS.ERR_TEMPLATE_GROUP_NOTREGISTERED, groupName));
                    }
                    return function () {
                        if (!group_1.promise) {
                            group_1.promise = self.loadTemplatesAsync(group_1.owner, group_1.loader);
                        }
                        var deferred = createDeferred(true);
                        group_1.promise.then(function () {
                            var info = context.getTemplateLoaderInfo(name);
                            if (!info) {
                                var error = format(ERRS.ERR_TEMPLATE_NOTREGISTERED, name), rejected_1 = reject(error, true);
                                registerLoader(group_1.owner, name, function () { return rejected_1; });
                                if (DEBUG.isDebugging()) {
                                    LOG.error(error);
                                }
                                throw new Error(error);
                            }
                            var loadPromise = info.loader();
                            loadPromise.then(function (docInfo) {
                                deferred.resolve(docInfo);
                            }, function (err) {
                                deferred.reject(err);
                            });
                        }).catch(function (err) {
                            deferred.reject(err);
                        });
                        return deferred.promise();
                    };
                }
            }
        };
        Object.defineProperty(TemplateLoader.prototype, "isLoading", {
            get: function () {
                return this._promises.length > 0;
            },
            enumerable: false,
            configurable: true
        });
        return TemplateLoader;
    }(jriapp_shared_6.BaseObject));
    exports.TemplateLoader = TemplateLoader;
});
define("jriapp/utils/domevents", ["require", "exports", "jriapp_shared"], function (require, exports, jriapp_shared_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DomEvents = exports.EventWrap = void 0;
    var utils = jriapp_shared_7.Utils, _a = utils.check, isFunc = _a.isFunc, isString = _a.isString, isNt = _a.isNt, arrHelper = utils.arr, format = utils.str.format, debug = utils.debug, ERRS = jriapp_shared_7.LocaleERRS;
    var EventWrap = (function () {
        function EventWrap(ev, target) {
            this._ev = ev;
            this._target = target;
            this._cancelBubble = false;
        }
        Object.defineProperty(EventWrap.prototype, "type", {
            get: function () {
                return this._ev.type;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EventWrap.prototype, "target", {
            get: function () {
                return this._target;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EventWrap.prototype, "bubbles", {
            get: function () {
                return this._ev.bubbles;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EventWrap.prototype, "defaultPrevented", {
            get: function () {
                return this._ev.defaultPrevented;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EventWrap.prototype, "cancelable", {
            get: function () {
                return this._ev.cancelable;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EventWrap.prototype, "isTrusted", {
            get: function () {
                return this._ev.isTrusted;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EventWrap.prototype, "returnValue", {
            get: function () {
                return this._ev.returnValue;
            },
            set: function (v) {
                this._ev.returnValue = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EventWrap.prototype, "srcElement", {
            get: function () {
                return this._ev.srcElement;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EventWrap.prototype, "eventPhase", {
            get: function () {
                return this._ev.eventPhase;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EventWrap.prototype, "cancelBubble", {
            get: function () {
                return this._cancelBubble;
            },
            set: function (v) {
                if (!!v) {
                    this._cancelBubble = v;
                    this._ev.stopPropagation();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EventWrap.prototype, "timeStamp", {
            get: function () {
                return this._ev.timeStamp;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EventWrap.prototype, "currentTarget", {
            get: function () {
                return this._ev.currentTarget;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EventWrap.prototype, "originalEvent", {
            get: function () {
                return this._ev;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EventWrap.prototype, "AT_TARGET", {
            get: function () {
                return this._ev.AT_TARGET;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EventWrap.prototype, "BUBBLING_PHASE", {
            get: function () {
                return this._ev.BUBBLING_PHASE;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EventWrap.prototype, "CAPTURING_PHASE", {
            get: function () {
                return this._ev.CAPTURING_PHASE;
            },
            enumerable: false,
            configurable: true
        });
        EventWrap.prototype.preventDefault = function () {
            this._ev.preventDefault();
        };
        EventWrap.prototype.stopPropagation = function () {
            this._ev.stopPropagation();
            this._cancelBubble = true;
        };
        EventWrap.prototype.stopImmediatePropagation = function () {
            this._ev.stopImmediatePropagation();
        };
        return EventWrap;
    }());
    exports.EventWrap = EventWrap;
    var EventHelper = (function () {
        function EventHelper() {
        }
        EventHelper.Node = function (handler, name, useCapture) {
            return { fn: handler, name: name, useCapture: useCapture };
        };
        EventHelper.add = function (ev, name, handler, nmspace, useCapture) {
            if (!ev) {
                debug.checkStartDebugger();
                throw new Error(format(ERRS.ERR_ASSERTION_FAILED, "ev is a valid object"));
            }
            if (!isFunc(handler)) {
                throw new Error(ERRS.ERR_EVENT_INVALID_FUNC);
            }
            if (!name) {
                throw new Error(format(ERRS.ERR_EVENT_INVALID, "[Empty]"));
            }
            var ns = !nmspace ? "*" : "" + nmspace;
            var list = ev[ns];
            var node = EventHelper.Node(handler, name, useCapture);
            if (!list) {
                ev[ns] = list = [];
            }
            list.push(node);
        };
        EventHelper.getNS = function (ev, ns) {
            if (!ev) {
                return [];
            }
            var res = [], list = ev[ns];
            if (!list) {
                return res;
            }
            for (var k = 0; k < list.length; ++k) {
                res.push(list[k]);
            }
            return res;
        };
        EventHelper.removeNS = function (ev, name, ns) {
            if (!ev) {
                return [];
            }
            var res = [], list = ev[ns];
            if (!list) {
                return res;
            }
            if (!name) {
                delete ev[ns];
                return list;
            }
            var newArr = [];
            for (var k = 0; k < list.length; ++k) {
                if (list[k].name === name) {
                    res.push(list[k]);
                }
                else {
                    newArr.push(list[k]);
                }
            }
            if (newArr.length > 0) {
                ev[ns] = newArr;
            }
            else {
                delete ev[ns];
            }
            return res;
        };
        EventHelper.remove = function (ev, name, nmspace) {
            if (!ev) {
                return [];
            }
            var ns = !nmspace ? "*" : "" + nmspace, arr = [];
            if (ns === "*") {
                var nsKeys = Object.keys(ev);
                for (var i = 0; i < nsKeys.length; ++i) {
                    arr.push(EventHelper.removeNS(ev, name, nsKeys[i]));
                }
                return arrHelper.merge(arr);
            }
            else {
                return EventHelper.removeNS(ev, name, ns);
            }
        };
        EventHelper.toArray = function (ev) {
            if (!ev) {
                return [];
            }
            var nsKeys = Object.keys(ev), arr = [];
            for (var i = 0; i < nsKeys.length; ++i) {
                arr.push(EventHelper.getNS(ev, nsKeys[i]));
            }
            return arrHelper.merge(arr);
        };
        EventHelper.getDelegateListener = function (root, isMatch, listener) {
            var res = function (event) {
                var target = event.target;
                while (!!target && target !== root) {
                    if (isMatch(target)) {
                        var eventWrap = new EventWrap(event, target);
                        listener.apply(target, [eventWrap]);
                        if (eventWrap.cancelBubble) {
                            return;
                        }
                    }
                    target = target.parentElement;
                }
            };
            return res;
        };
        return EventHelper;
    }());
    var helper = EventHelper;
    var weakmap = jriapp_shared_7.createWeakMap();
    function isDelegateArgs(a) {
        return (!a) ? false : isFunc(a.matchElement);
    }
    var DomEvents = (function () {
        function DomEvents() {
        }
        DomEvents.on = function (el, evType, listener, args) {
            var events = weakmap.get(el), ns, useCapture = false;
            if (!events) {
                events = {};
                weakmap.set(el, events);
            }
            if (!!args) {
                if (isString(args)) {
                    ns = args;
                }
                else if (isDelegateArgs(args)) {
                    ns = args.nmspace;
                    listener = helper.getDelegateListener(el, args.matchElement, listener);
                }
                else {
                    ns = args.nmspace;
                    useCapture = !!args.useCapture;
                }
            }
            helper.add(events, evType, listener, ns, useCapture);
            el.addEventListener(evType, listener, useCapture);
        };
        DomEvents.off = function (el, evType, nmspace, useCapture) {
            var ev = weakmap.get(el);
            if (!ev) {
                return;
            }
            var handlers = helper.remove(ev, evType, nmspace);
            for (var i = 0; i < handlers.length; i += 1) {
                var handler = handlers[i];
                if (isNt(useCapture) || (useCapture === handler.useCapture)) {
                    el.removeEventListener(handler.name, handler.fn, handler.useCapture);
                }
            }
        };
        DomEvents.offNS = function (el, nmspace) {
            DomEvents.off(el, null, nmspace);
        };
        return DomEvents;
    }());
    exports.DomEvents = DomEvents;
});
define("jriapp/utils/dom", ["require", "exports", "jriapp_shared", "jriapp/utils/domevents"], function (require, exports, jriapp_shared_8, domevents_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DomUtils = void 0;
    var utils = jriapp_shared_8.Utils, fromList = utils.arr.fromList, fastTrim = utils.str.fastTrim, win = window, doc = win.document, queue = jriapp_shared_8.Utils.queue, Indexer = utils.core.Indexer, hasClassList = ("classList" in window.document.documentElement), weakmap = jriapp_shared_8.createWeakMap();
    var _isTemplateTagAvailable = false;
    var _checkDOMReady = (function () {
        var funcs = [], hack = doc.documentElement.doScroll, domContentLoaded = "DOMContentLoaded";
        var isDOMloaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState);
        if (!isDOMloaded) {
            var callback_1 = function () {
                doc.removeEventListener(domContentLoaded, callback_1);
                isDOMloaded = true;
                var fnOnloaded = null;
                while (fnOnloaded = funcs.shift()) {
                    queue.enque(fnOnloaded);
                }
            };
            doc.addEventListener(domContentLoaded, callback_1);
        }
        return function (fn) {
            isDOMloaded ? queue.enque(fn) : funcs.push(fn);
        };
    })();
    _checkDOMReady(function () { _isTemplateTagAvailable = ('content' in doc.createElement('template')); });
    function getElementContent(root) {
        var frag = doc.createDocumentFragment();
        var child = null;
        while (!!(child = root.firstChild)) {
            frag.appendChild(child);
        }
        return frag;
    }
    var DomUtils = (function () {
        function DomUtils() {
        }
        DomUtils.isTemplateTagAvailable = function () {
            return _isTemplateTagAvailable;
        };
        DomUtils.getData = function (el, key) {
            var map = weakmap.get(el);
            if (!map) {
                return (void 0);
            }
            return map[key];
        };
        DomUtils.setData = function (el, key, val) {
            var map = weakmap.get(el);
            if (!map) {
                map = Indexer();
                weakmap.set(el, map);
            }
            map[key] = val;
        };
        DomUtils.removeData = function (el, key) {
            var map = weakmap.get(el);
            if (!map) {
                return;
            }
            if (!key) {
                weakmap.delete(el);
            }
            else {
                delete map[key];
            }
        };
        DomUtils.isContained = function (node, container) {
            if (!node) {
                return false;
            }
            var contains = container.contains;
            if (!!contains) {
                return contains.call(container, node);
            }
            while (!!(node = node.parentNode)) {
                if (node === container) {
                    return true;
                }
            }
            return false;
        };
        DomUtils.getDocFragment = function (html) {
            if (_isTemplateTagAvailable) {
                var t = doc.createElement('template');
                t.innerHTML = html;
                return t.content;
            }
            else {
                var t = doc.createElement('div');
                t.innerHTML = html;
                return getElementContent(t);
            }
        };
        DomUtils.fromHTML = function (html) {
            var div = doc.createElement("div");
            div.innerHTML = html;
            return fromList(div.children);
        };
        DomUtils.queryAll = function (root, selector) {
            var res = root.querySelectorAll(selector);
            return fromList(res);
        };
        DomUtils.queryOne = function (root, selector) {
            return root.querySelector(selector);
        };
        DomUtils.append = function (parent, children) {
            if (!children) {
                return;
            }
            for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
                var node = children_1[_i];
                parent.appendChild(node);
            }
        };
        DomUtils.prepend = function (parent, child) {
            if (!child) {
                return;
            }
            var firstChild = null;
            if (!(firstChild = parent.firstChild)) {
                parent.appendChild(child);
            }
            else {
                parent.insertBefore(child, firstChild);
            }
        };
        DomUtils.removeNode = function (node) {
            if (!node) {
                return;
            }
            var pnd = node.parentNode;
            if (!!pnd) {
                pnd.removeChild(node);
            }
        };
        DomUtils.insertAfter = function (node, refNode) {
            var parent = refNode.parentNode;
            if (parent.lastChild === refNode) {
                parent.appendChild(node);
            }
            else {
                parent.insertBefore(node, refNode.nextSibling);
            }
        };
        DomUtils.insertBefore = function (node, refNode) {
            var parent = refNode.parentNode;
            return parent.insertBefore(node, refNode);
        };
        DomUtils.wrap = function (elem, wrapper) {
            var parent = elem.parentElement, nsibling = elem.nextSibling;
            if (!parent) {
                return;
            }
            wrapper.appendChild(elem);
            (!nsibling) ? parent.appendChild(wrapper) : parent.insertBefore(wrapper, nsibling);
        };
        DomUtils.unwrap = function (elem) {
            var wrapper = elem.parentElement;
            if (!wrapper) {
                return;
            }
            var parent = wrapper.parentElement, nsibling = wrapper.nextSibling;
            if (!parent) {
                return;
            }
            parent.removeChild(wrapper);
            (!nsibling) ? parent.appendChild(elem) : parent.insertBefore(elem, nsibling);
        };
        DomUtils.getClassMap = function (el) {
            var res = Indexer();
            if (!el) {
                return res;
            }
            var className = el.className;
            if (!className) {
                return res;
            }
            var arr = className.split(" ");
            for (var i = 0; i < arr.length; i += 1) {
                arr[i] = fastTrim(arr[i]);
                if (!!arr[i]) {
                    res[arr[i]] = i;
                }
            }
            return res;
        };
        DomUtils.setClasses = function (elems, classes) {
            if (!elems.length || !classes.length) {
                return;
            }
            var toAdd = [];
            var toRemove = [], removeAll = false;
            classes.forEach(function (v) {
                if (!v) {
                    return;
                }
                var name = fastTrim(v);
                if (!name) {
                    return;
                }
                var op = v.charAt(0);
                if (op == "+" || op == "-") {
                    name = fastTrim(v.substr(1));
                }
                if (!name) {
                    return;
                }
                var arr = name.split(" ");
                for (var i = 0; i < arr.length; i += 1) {
                    var v2 = fastTrim(arr[i]);
                    if (!!v2) {
                        if (op != "-") {
                            toAdd.push(v2);
                        }
                        else {
                            if (name === "*") {
                                removeAll = true;
                            }
                            else {
                                toRemove.push(v2);
                            }
                        }
                    }
                }
            });
            if (removeAll) {
                toRemove = [];
            }
            for (var j = 0; j < elems.length; j += 1) {
                var el = elems[j];
                var map = DomUtils.getClassMap(el);
                if (removeAll) {
                    map = Indexer();
                }
                for (var i = 0; i < toRemove.length; i += 1) {
                    delete map[toRemove[i]];
                }
                for (var i = 0; i < toAdd.length; i += 1) {
                    map[toAdd[i]] = i + 1000;
                }
                var keys = Object.keys(map);
                el.className = keys.join(" ");
            }
        };
        DomUtils.setClass = function (elems, css, remove) {
            if (remove === void 0) { remove = false; }
            if (!elems.length) {
                return;
            }
            if (!css) {
                if (remove) {
                    for (var j = 0; j < elems.length; j += 1) {
                        elems[j].className = "";
                    }
                }
                return;
            }
            var _arr = css.split(" ");
            for (var i = 0; i < _arr.length; i += 1) {
                _arr[i] = fastTrim(_arr[i]);
            }
            var arr = _arr.filter(function (val) { return !!val; });
            if (hasClassList && arr.length === 1) {
                for (var j = 0; j < elems.length; j += 1) {
                    var el = elems[j];
                    if (remove) {
                        el.classList.remove(arr[0]);
                    }
                    else {
                        el.classList.add(arr[0]);
                    }
                }
            }
            else {
                for (var j = 0; j < elems.length; j += 1) {
                    var el = elems[j], map = DomUtils.getClassMap(el);
                    for (var i = 0; i < arr.length; i += 1) {
                        if (remove) {
                            delete map[arr[i]];
                        }
                        else {
                            map[arr[i]] = i + 1000;
                        }
                    }
                    var keys = Object.keys(map);
                    el.className = keys.join(" ");
                }
            }
        };
        DomUtils.addClass = function (elems, css) {
            DomUtils.setClass(elems || [], css, false);
        };
        DomUtils.removeClass = function (elems, css) {
            DomUtils.setClass(elems || [], css, true);
        };
        DomUtils.window = win;
        DomUtils.document = doc;
        DomUtils.ready = _checkDOMReady;
        DomUtils.events = domevents_1.DomEvents;
        return DomUtils;
    }());
    exports.DomUtils = DomUtils;
});
define("jriapp/utils/path", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp/int"], function (require, exports, jriapp_shared_9, dom_1, int_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PathHelper = exports.frameworkJS = void 0;
    var utils = jriapp_shared_9.Utils, doc = dom_1.DomUtils.document, arrHelper = utils.arr, _a = utils.str, format = _a.format, ltrim = _a.ltrim, rtrim = _a.rtrim;
    exports.frameworkJS = int_3.Config.frameworkJS || "jriapp.js";
    var stylesDir = "css", imageDir = "img";
    function fn_getFrameworkPath() {
        var name = exports.frameworkJS;
        var arr = arrHelper.fromList(doc.scripts);
        for (var i = 0; i < arr.length; i += 1) {
            var script = arr[i];
            if (!!script.src) {
                var parts = PathHelper.getUrlParts(script.src);
                var pathName = rtrim(parts.pathname, ["/"]);
                if (!!parts.pathname) {
                    pathName = pathName.toLowerCase();
                    if (!!pathName && pathName.lastIndexOf(name) > -1) {
                        var url = script.src;
                        return PathHelper.getParentUrl(url);
                    }
                }
            }
        }
        return null;
    }
    var _cache = {};
    var PathHelper = (function () {
        function PathHelper() {
        }
        PathHelper.appendBust = function (url) {
            var bust = int_3.Config.bust;
            if (!bust) {
                return url;
            }
            return PathHelper.appendSearch(url, bust);
        };
        PathHelper.appendSearch = function (url, search) {
            search = ltrim(search, ["?", " "]);
            var parts = PathHelper.getUrlParts(url);
            var oldSearch = ltrim(parts.search, ["?", " "]);
            if (!!oldSearch && oldSearch.lastIndexOf(search) > -1) {
                return url;
            }
            if (!oldSearch) {
                url = url + "?" + search;
            }
            else {
                url = url + "&" + search;
            }
            return url;
        };
        PathHelper.getNormalizedUrl = function (url) {
            PathHelper._anchor.href = url;
            return PathHelper._anchor.href;
        };
        PathHelper.getUrlParts = function (url) {
            var parser = PathHelper._anchor;
            parser.href = url;
            if (!parser.host) {
                parser.href = parser.href;
            }
            return {
                protocol: parser.protocol,
                host: parser.host,
                hostname: parser.hostname,
                port: parser.port,
                pathname: parser.pathname,
                hash: parser.hash,
                search: parser.search
            };
        };
        PathHelper.getParentUrl = function (url) {
            var res = "";
            if (url.charAt(url.length - 1) === "/") {
                res = url.slice(0, url.lastIndexOf("/"));
                res = res.slice(0, res.lastIndexOf("/")) + "/";
            }
            else {
                res = url.slice(0, url.lastIndexOf("/")) + "/";
            }
            return res;
        };
        PathHelper.getFrameworkPath = function () {
            var res = _cache["root"];
            if (!res) {
                if (!!int_3.Config.frameworkPath) {
                    res = int_3.Config.frameworkPath.replace(/\/?$/, '/');
                }
                if (!res) {
                    res = fn_getFrameworkPath();
                }
                if (!!res) {
                    _cache["root"] = res;
                }
            }
            if (!res) {
                throw new Error(format("Can not resolve {0} framework path", name));
            }
            return res;
        };
        PathHelper.getFrameworkCssPath = function () {
            var res = _cache["css"];
            if (!res) {
                res = PathHelper.getFrameworkPath() + [stylesDir, "/"].join("");
                _cache["css"] = res;
            }
            return res;
        };
        PathHelper.getFrameworkImgPath = function () {
            var res = _cache["img"];
            if (!res) {
                res = PathHelper.getFrameworkPath() + [imageDir, "/"].join("");
                _cache["img"] = res;
            }
            return res;
        };
        PathHelper._anchor = doc.createElement("a");
        return PathHelper;
    }());
    exports.PathHelper = PathHelper;
});
define("jriapp/utils/sloader", ["require", "exports", "jriapp_shared", "jriapp_shared/utils/asyncutils", "jriapp/utils/dom", "jriapp/utils/path"], function (require, exports, jriapp_shared_10, asyncutils_1, dom_2, path_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCssLoader = exports.frameworkCss = void 0;
    var _resolve = asyncutils_1.AsyncUtils.resolve, _whenAll = asyncutils_1.AsyncUtils.whenAll, createDeferred = asyncutils_1.AsyncUtils.createDeferred, utils = jriapp_shared_10.Utils, dom = dom_2.DomUtils, arrHelper = utils.arr, doc = dom.document, head = doc.head || doc.getElementsByTagName("head")[0];
    var _stylesLoader = null;
    exports.frameworkCss = "jriapp.css";
    function createCssLoader() {
        if (!_stylesLoader) {
            _stylesLoader = new StylesLoader();
        }
        return _stylesLoader;
    }
    exports.createCssLoader = createCssLoader;
    function whenAll(promises) {
        if (!promises) {
            return _resolve(void 0, true);
        }
        if (promises.length === 1) {
            return promises[0];
        }
        var resolved = 0;
        var cnt = promises.length;
        for (var i = 0; i < cnt; i += 1) {
            if (promises[i].state() === 2) {
                ++resolved;
            }
        }
        return (resolved === cnt) ? _resolve(void 0, true) : _whenAll(promises);
    }
    function createLink(url) {
        var link = doc.createElement("link");
        link.rel = "stylesheet";
        link.type = "text/css";
        link.href = url;
        return link;
    }
    var StylesLoader = (function () {
        function StylesLoader() {
            this._loadedCSS = {};
        }
        StylesLoader.prototype.isStyleSheetLoaded = function (url) {
            var testUrl = path_1.PathHelper.getUrlParts(url);
            var arr = arrHelper.fromList(doc.styleSheets);
            for (var i = 0; i < arr.length; i += 1) {
                var cssUrl = path_1.PathHelper.getUrlParts(arr[i].href);
                if (cssUrl.hostname === testUrl.hostname && cssUrl.pathname === testUrl.pathname) {
                    return true;
                }
            }
            return false;
        };
        StylesLoader.prototype.loadByLink = function (url, fnOnload) {
            var link = createLink(url);
            link.onload = function () {
                fnOnload(null);
            };
            link.onerror = function () {
                fnOnload("Error loading: " + url);
            };
            head.appendChild(link);
        };
        StylesLoader.prototype.load = function (url, load) {
            this.loadByLink(url, load);
        };
        ;
        StylesLoader.ensureCssExt = function (name) {
            return name.search(/\.(css|less|scss)$/i) === -1 ? name + ".css" : name;
        };
        StylesLoader.prototype.loadStyle = function (url) {
            url = path_1.PathHelper.appendBust(url);
            var cssUrl = path_1.PathHelper.getNormalizedUrl(url);
            var cssPromise = this._loadedCSS[cssUrl];
            if (!!cssPromise) {
                return cssPromise;
            }
            var deferred = createDeferred(true);
            cssPromise = deferred.promise();
            if (this.isStyleSheetLoaded(url)) {
                deferred.resolve(url);
                this._loadedCSS[cssUrl] = cssPromise;
                return cssPromise;
            }
            this.load(url, function (err) {
                if (!!err) {
                    deferred.reject(err);
                }
                else {
                    deferred.resolve(url);
                }
            });
            this._loadedCSS[cssUrl] = cssPromise;
            return cssPromise;
        };
        StylesLoader.prototype.loadStyles = function (urls) {
            var promises = [];
            for (var i = 0; i < urls.length; i += 1) {
                promises.push(this.loadStyle(urls[i]));
            }
            return whenAll(promises);
        };
        StylesLoader.prototype.loadOwnStyle = function (cssName) {
            cssName = cssName || exports.frameworkCss;
            var cssUrl = path_1.PathHelper.getFrameworkCssPath() + StylesLoader.ensureCssExt(cssName);
            return this.loadStyle(cssUrl);
        };
        StylesLoader.prototype.whenAllLoaded = function () {
            var obj = this._loadedCSS, names = Object.keys(obj), promises = [];
            for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
                var name_1 = names_1[_i];
                promises.push(obj[name_1]);
            }
            return whenAll(promises);
        };
        return StylesLoader;
    }());
});
define("jriapp/bootstrapper", ["require", "exports", "jriapp_shared", "jriapp/elview", "jriapp/content", "jriapp/defaults", "jriapp/utils/tloader", "jriapp/utils/sloader", "jriapp/utils/path", "jriapp/utils/dom", "jriapp_shared/utils/queue", "jriapp/parsing/helper"], function (require, exports, jriapp_shared_11, elview_1, content_1, defaults_1, tloader_1, sloader_1, path_2, dom_3, queue_1, helper_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bootstrapper = exports.Bootstrapper = exports.getObject = exports.unregisterObject = exports.registerObject = exports.getOptions = exports.getSvc = exports.unregisterSvc = exports.registerSvc = exports.getConverter = exports.registerConverter = exports.StartupState = exports.selectableProviderWeakMap = exports.subscribeWeakMap = void 0;
    var utils = jriapp_shared_11.Utils, dom = dom_3.DomUtils, win = dom.window, doc = win.document, isFunc = utils.check.isFunc, _a = utils.async, createDeferred = _a.createDeferred, delay = _a.delay, resolve = _a.resolve, _b = utils.core, forEach = _b.forEach, getNewID = _b.getNewID, getValue = _b.getValue, setValue = _b.setValue, removeValue = _b.removeValue, Indexer = _b.Indexer, fromList = utils.arr.fromList, _c = utils.str, format = _c.format, fastTrim = _c.fastTrim, ERROR = utils.err, ERRS = jriapp_shared_11.LocaleERRS, isGetExpr = helper_2.Helper.isGetExpr, getGetParts = helper_2.Helper.getGetParts, getBraceContent = helper_2.Helper.getBraceContent;
    exports.subscribeWeakMap = jriapp_shared_11.createWeakMap(), exports.selectableProviderWeakMap = jriapp_shared_11.createWeakMap();
    (function () {
        var win = dom.window;
        if (!("Promise" in win)) {
            win.Promise = jriapp_shared_11.StatefulPromise;
        }
        if (!win.requestAnimationFrame) {
            var requestAnimationFrame_1 = win.requestAnimationFrame || win.mozRequestAnimationFrame ||
                win.webkitRequestAnimationFrame || win.msRequestAnimationFrame;
            var cancelAnimationFrame_1 = win.cancelAnimationFrame || win.mozCancelAnimationFrame ||
                (win.webkitCancelAnimationFrame || win.webkitCancelRequestAnimationFrame) ||
                win.msCancelAnimationFrame;
            if (!requestAnimationFrame_1 || !cancelAnimationFrame_1) {
                var queue = queue_1.createQueue(40);
                requestAnimationFrame_1 = queue.enque;
                cancelAnimationFrame_1 = queue.cancel;
            }
            win.requestAnimationFrame = requestAnimationFrame_1;
            win.cancelAnimationFrame = cancelAnimationFrame_1;
        }
    })();
    var _TEMPLATE_SELECTOR = 'script[type="text/x-template"]';
    var _OPTION_SELECTOR = 'script[type="text/x-options"]';
    var _stylesLoader = sloader_1.createCssLoader();
    var eventNames = {
        click: 1,
        change: 2,
        keypress: 3,
        keydown: 4,
        keyup: 5,
        input: 6
    };
    var GLOB_EVENTS;
    (function (GLOB_EVENTS) {
        GLOB_EVENTS["load"] = "load";
        GLOB_EVENTS["unload"] = "unload";
        GLOB_EVENTS["initialized"] = "initialize";
    })(GLOB_EVENTS || (GLOB_EVENTS = {}));
    var StartupState;
    (function (StartupState) {
        StartupState[StartupState["None"] = 0] = "None";
        StartupState[StartupState["Initializing"] = 1] = "Initializing";
        StartupState[StartupState["Initialized"] = 2] = "Initialized";
        StartupState[StartupState["Ready"] = 3] = "Ready";
        StartupState[StartupState["Error"] = 4] = "Error";
        StartupState[StartupState["Disposed"] = 5] = "Disposed";
    })(StartupState = exports.StartupState || (exports.StartupState = {}));
    var _ObjectEvents = (function (_super) {
        __extends(_ObjectEvents, _super);
        function _ObjectEvents() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        _ObjectEvents.prototype.on = function (name, handler, nmspace, context, priority) {
            var owner = this.owner;
            var self = this, isReady = owner.state === 3;
            var isIntialized = (owner.state === 2 || owner.state === 3);
            if ((name === "load" && isReady) || (name === "initialize" && isIntialized)) {
                utils.queue.enque(function () { handler.apply(self, [self, {}]); });
            }
            else {
                _super.prototype.on.call(this, name, handler, nmspace, context, priority);
            }
        };
        return _ObjectEvents;
    }(jriapp_shared_11.ObjectEvents));
    function registerConverter(root, name, obj) {
        var name2 = "cnv." + name;
        if (!getObject(root, name2)) {
            registerObject(root, name2, obj);
        }
        else {
            throw new Error(format(ERRS.ERR_OBJ_ALREADY_REGISTERED, name));
        }
    }
    exports.registerConverter = registerConverter;
    function getConverter(root, name) {
        var name2 = "cnv." + name;
        return getObject(root, name2);
    }
    exports.getConverter = getConverter;
    function registerSvc(root, name, obj) {
        var name2 = "svc." + name;
        registerObject(root, name2, obj);
    }
    exports.registerSvc = registerSvc;
    function unregisterSvc(root, name) {
        var name2 = "svc." + name;
        return unregisterObject(root, name2);
    }
    exports.unregisterSvc = unregisterSvc;
    function getSvc(root, name) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var name2 = "svc." + name, obj = getObject(root, name2);
        if (!obj) {
            return null;
        }
        var res = isFunc(obj) ? obj.apply(void 0, args) : obj;
        if (!res) {
            throw new Error("The factory for service: " + name + " have not returned the service");
        }
        return res;
    }
    exports.getSvc = getSvc;
    function getOptions(root, name) {
        var name2 = "opt." + name;
        return getObject(root, name2);
    }
    exports.getOptions = getOptions;
    function registerObject(root, name, obj) {
        setValue(root.getData(), name, obj, true);
    }
    exports.registerObject = registerObject;
    function unregisterObject(root, name) {
        return removeValue(root.getData(), name);
    }
    exports.unregisterObject = unregisterObject;
    function getObject(root, name) {
        return getValue(root.getData(), name);
    }
    exports.getObject = getObject;
    function registerOptions(root, name, options) {
        var name2 = "opt." + name;
        registerObject(root, name2, options);
    }
    function getRequiredModules(el) {
        var elements = fromList(el.children), result = [];
        for (var i = 0, len = elements.length; i < len; i += 1) {
            var attr = elements[i].getAttribute("data-require");
            if (!!attr) {
                if (isGetExpr(attr)) {
                    var ids = getBraceContent(attr, 0);
                    var parts = getGetParts(ids);
                    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
                        var val = parts_1[_i];
                        if (!!val) {
                            result.push.apply(result, val.split(","));
                        }
                    }
                }
                else {
                    result.push.apply(result, attr.split(","));
                }
            }
        }
        if (result.length === 0) {
            return result;
        }
        var hashMap = Indexer();
        for (var _a = 0, result_1 = result; _a < result_1.length; _a++) {
            var name_2 = result_1[_a];
            if (!!name_2) {
                var _name = fastTrim(name_2);
                if (!!_name) {
                    hashMap[_name] = _name;
                }
            }
        }
        return Object.keys(hashMap);
    }
    var Bootstrapper = (function (_super) {
        __extends(Bootstrapper, _super);
        function Bootstrapper() {
            var _this = _super.call(this) || this;
            var self = _this;
            if (!!exports.bootstrapper) {
                throw new Error(ERRS.ERR_GLOBAL_SINGLTON);
            }
            _this._bootState = 0;
            _this._app = null;
            _this._selectedControl = null;
            _this._uniqueID = getNewID("app");
            _this._extraData = Indexer();
            _this._moduleInits = [];
            _this._templateLoader = null;
            _this._templateLoader = new tloader_1.TemplateLoader();
            _this._templateLoader.addOnLoaded(function (_, a) {
                self._onTemplateLoaded(a.html, a.owner);
            });
            _this._templateLoader.objEvents.addOnError(function (_, a) {
                return self.handleError(a.error, a.source);
            });
            _this._elViewRegister = elview_1.createElViewRegister(null);
            _this._contentFactory = content_1.createContentFactoryList();
            _this._internal = {
                initialize: function () {
                    return self._initialize();
                },
                registerApp: function (app) {
                    self._registerApp(app);
                },
                unregisterApp: function (app) {
                    self._unregisterApp(app);
                }
            };
            _this._defaults = new defaults_1.Defaults();
            _this.defaults.imagesPath = path_2.PathHelper.getFrameworkImgPath();
            _stylesLoader.loadOwnStyle();
            ERROR.addHandler("*", _this);
            return _this;
        }
        Bootstrapper._initFramework = function () {
            dom.ready(function () {
                exports.bootstrapper._getInternal().initialize();
            });
        };
        Bootstrapper.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            var self = this;
            self.objEvents.off();
            self._destroyApp();
            self._extraData = Indexer();
            if (self._templateLoader !== null) {
                self._templateLoader.dispose();
                self._templateLoader = null;
            }
            self._elViewRegister.dispose();
            self._elViewRegister = null;
            self._contentFactory = null;
            self._moduleInits = [];
            dom.events.offNS(doc, this._uniqueID);
            dom.events.offNS(win, this._uniqueID);
            win.onerror = null;
            ERROR.removeHandler("*");
            this._bootState = 5;
            _super.prototype.dispose.call(this);
        };
        Bootstrapper.prototype._bindGlobalEvents = function () {
            var _this = this;
            var self = this, subscribeMap = exports.subscribeWeakMap, selectableMap = exports.selectableProviderWeakMap;
            dom.events.on(doc, "click", function (e) {
                var target = e.target;
                while (!!target && target !== doc) {
                    var obj = selectableMap.get(target);
                    if (!!obj) {
                        self.selectedControl = obj;
                        return;
                    }
                    target = target.parentElement;
                }
                self.selectedControl = null;
            }, this._uniqueID);
            forEach(eventNames, (function (name, flag) {
                var fn_name = "handle_" + name;
                dom.events.on(doc, name, function (e) {
                    var obj = subscribeMap.get(e.target);
                    if (isFunc(obj[fn_name])) {
                        e.cancelBubble = !!(obj[fn_name](e.originalEvent));
                    }
                }, {
                    nmspace: _this._uniqueID,
                    matchElement: function (el) {
                        var obj = subscribeMap.get(el);
                        return !!obj && !!obj.isSubscribed(flag);
                    }
                });
            }));
            dom.events.on(doc, "keydown", function (e) {
                if (!!self._selectedControl) {
                    var selectable = self._selectedControl.selectable;
                    if (!!selectable) {
                        selectable.onKeyDown(e.which, e);
                    }
                }
            }, this._uniqueID);
            dom.events.on(doc, "keyup", function (e) {
                if (!!self._selectedControl) {
                    var selectable = self._selectedControl.selectable;
                    if (!!selectable) {
                        selectable.onKeyUp(e.which, e);
                    }
                }
            }, this._uniqueID);
            dom.events.on(win, "beforeunload", function () {
                self.objEvents.raise("unload", {});
            }, this._uniqueID);
            win.onerror = function (msg, url, linenumber) {
                if (!!msg && msg.toString().indexOf(jriapp_shared_11.DUMY_ERROR) > -1) {
                    return true;
                }
                alert("Error: " + msg + "\nURL: " + url + "\nLine Number: " + linenumber);
                return false;
            };
        };
        Bootstrapper.prototype._onTemplateLoaded = function (html, owner) {
            var divEl = doc.createElement("div");
            divEl.innerHTML = html;
            this._processOptions(owner, divEl);
            this._processTemplates(owner, divEl);
        };
        Bootstrapper.prototype._processOptions = function (owner, root) {
            var jsons = dom.queryAll(root, _OPTION_SELECTOR);
            for (var _i = 0, jsons_1 = jsons; _i < jsons_1.length; _i++) {
                var el = jsons_1[_i];
                var name_3 = el.getAttribute("id");
                if (!name_3) {
                    throw new Error(ERRS.ERR_OPTIONS_HAS_NO_ID);
                }
                registerOptions(owner, name_3, el.innerHTML);
            }
        };
        Bootstrapper.prototype._processTemplates = function (owner, root) {
            var self = this, templates = dom.queryAll(root, _TEMPLATE_SELECTOR);
            for (var _i = 0, templates_1 = templates; _i < templates_1.length; _i++) {
                var el = templates_1[_i];
                var name_4 = el.getAttribute("id");
                if (!name_4) {
                    throw new Error(ERRS.ERR_TEMPLATE_HAS_NO_ID);
                }
                var html = el.innerHTML;
                self._processTemplate(owner, name_4, html);
            }
        };
        Bootstrapper.prototype._processTemplate = function (owner, name, html) {
            var frag = dom.getDocFragment(fastTrim(html)), required = getRequiredModules(frag);
            var res = resolve({ doc: frag, required: required }, true), loader = function () { return res; };
            tloader_1.registerLoader(owner, name, loader);
        };
        Bootstrapper.prototype._createObjEvents = function () {
            return new _ObjectEvents(this);
        };
        Bootstrapper.prototype._init = function () {
            var self = this;
            var promise = self.stylesLoader.whenAllLoaded().then(function () {
                if (self._bootState !== 0) {
                    throw new Error("Invalid operation: bootState !== BootstrapState.None");
                }
                self._bootState = 1;
                self._bindGlobalEvents();
                self._bootState = 2;
                self.objEvents.raise("initialize", {});
                self.objEvents.off("initialize");
                return delay(function () {
                    if (self.getIsStateDirty()) {
                        throw new Error("Bootstrap is in destroyed state");
                    }
                    self._processOptions(self, doc);
                    self._processTemplates(self, doc);
                    self._bootState = 3;
                    self.objEvents.raiseProp("isReady");
                    return self;
                });
            });
            var res = promise.then(function (boot) {
                if (boot._bootState !== 3) {
                    throw new Error("Invalid operation: bootState !== BootstrapState.Ready");
                }
                boot.objEvents.raise("load", {});
                boot.objEvents.off("load");
                return boot;
            });
            return res;
        };
        Bootstrapper.prototype._initialize = function () {
            var _this = this;
            var self = this;
            return self._init().then(function (_) {
                return self;
            }, function (err) {
                self._bootState = 4;
                return ERROR.reThrow(err, _this.handleError(err, self));
            });
        };
        Bootstrapper.prototype._registerApp = function (app) {
            if (!!this._app) {
                throw new Error("Application already registered");
            }
            this._app = app;
            ERROR.addHandler(app.appName, app);
        };
        Bootstrapper.prototype._unregisterApp = function (app) {
            if (!this._app || this._app.appName !== app.appName) {
                throw new Error("Invalid operation");
            }
            try {
                ERROR.removeHandler(app.appName);
            }
            finally {
                this._app = null;
            }
        };
        Bootstrapper.prototype._destroyApp = function () {
            var self = this, app = self._app;
            if (!!app && !app.getIsStateDirty()) {
                app.dispose();
            }
        };
        Bootstrapper.prototype._waitLoaded = function (onLoad) {
            var self = this;
            self.init(function () {
                self.addOnLoad(function () {
                    setTimeout(function () {
                        try {
                            onLoad(self);
                        }
                        catch (err) {
                            ERROR.reThrow(err, self.handleError(err, self));
                        }
                    }, 0);
                });
            });
        };
        Bootstrapper.prototype._getInternal = function () {
            return this._internal;
        };
        Bootstrapper.prototype.addOnDisposed = function (handler, nmspace, context) {
            this.objEvents.addOnDisposed(handler, nmspace, context);
        };
        Bootstrapper.prototype.offOnDisposed = function (nmspace) {
            this.objEvents.offOnDisposed(nmspace);
        };
        Bootstrapper.prototype.addOnError = function (handler, nmspace, context) {
            this.objEvents.addOnError(handler, nmspace, context);
        };
        Bootstrapper.prototype.offOnError = function (nmspace) {
            this.objEvents.offOnError(nmspace);
        };
        Bootstrapper.prototype.addOnLoad = function (fn, nmspace, context) {
            this.objEvents.on("load", fn, nmspace, context);
        };
        Bootstrapper.prototype.addOnUnLoad = function (fn, nmspace, context) {
            this.objEvents.on("unload", fn, nmspace, context);
        };
        Bootstrapper.prototype.addOnInitialize = function (fn, nmspace, context) {
            this.objEvents.on("initialize", fn, nmspace, context);
        };
        Bootstrapper.prototype.addModuleInit = function (fn) {
            if (this._moduleInits.filter(function (val) { return val === fn; }).length === 0) {
                this._moduleInits.push(fn);
                return true;
            }
            return false;
        };
        Bootstrapper.prototype.getData = function () {
            return this._extraData;
        };
        Bootstrapper.prototype.init = function (onInit) {
            var self = this;
            self.addOnInitialize(function () {
                setTimeout(function () {
                    try {
                        onInit(self);
                    }
                    catch (err) {
                        ERROR.reThrow(err, self.handleError(err, self));
                    }
                }, 0);
            });
        };
        Bootstrapper.prototype.startApp = function (appFactory, onStartUp) {
            var self = this, deferred = createDeferred(), promise = deferred.promise();
            self._waitLoaded(function () {
                try {
                    var app = appFactory();
                    deferred.resolve(app.startUp(onStartUp));
                }
                catch (err) {
                    deferred.reject(err);
                }
            });
            var res = promise.then(function (app) {
                return app;
            }, function (err) {
                return ERROR.reThrow(err, self.handleError(err, self));
            });
            return res;
        };
        Bootstrapper.prototype.registerSvc = function (name, obj) {
            registerSvc(this, name, obj);
        };
        Bootstrapper.prototype.unregisterSvc = function (name) {
            unregisterSvc(this, name);
        };
        Bootstrapper.prototype.getSvc = function (name) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var obj = getSvc.apply(void 0, __spreadArray([this, name], args));
            if (!obj) {
                throw new Error("The service: " + name + " is not registered");
            }
            return obj;
        };
        Bootstrapper.prototype.getOptions = function (name) {
            var res = getOptions(this, name);
            if (!res) {
                throw new Error(format(ERRS.ERR_OPTIONS_NOTREGISTERED, name));
            }
            return res;
        };
        Bootstrapper.prototype.registerConverter = function (name, obj) {
            registerConverter(this, name, obj);
        };
        Bootstrapper.prototype.registerElView = function (name, elViewType) {
            this._elViewRegister.registerElView(name, elViewType);
        };
        Bootstrapper.prototype.getImagePath = function (imageName) {
            var images = this.defaults.imagesPath;
            return images + imageName;
        };
        Bootstrapper.prototype.loadOwnStyle = function (name) {
            return this.stylesLoader.loadOwnStyle(name);
        };
        Bootstrapper.prototype.toString = function () {
            return "JRIApp Bootstrap";
        };
        Object.defineProperty(Bootstrapper.prototype, "app", {
            get: function () {
                return this._app;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Bootstrapper.prototype, "stylesLoader", {
            get: function () {
                return _stylesLoader;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Bootstrapper.prototype, "elViewRegister", {
            get: function () {
                return this._elViewRegister;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Bootstrapper.prototype, "contentFactory", {
            get: function () {
                return this._contentFactory;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Bootstrapper.prototype, "templateLoader", {
            get: function () {
                return this._templateLoader;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Bootstrapper.prototype, "selectedControl", {
            get: function () {
                return this._selectedControl;
            },
            set: function (v) {
                if (this._selectedControl !== v) {
                    this._selectedControl = v;
                    this.objEvents.raiseProp("selectedControl");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Bootstrapper.prototype, "defaults", {
            get: function () {
                return this._defaults;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Bootstrapper.prototype, "isReady", {
            get: function () {
                return this._bootState === 3;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Bootstrapper.prototype, "state", {
            get: function () {
                return this._bootState;
            },
            enumerable: false,
            configurable: true
        });
        return Bootstrapper;
    }(jriapp_shared_11.BaseObject));
    exports.Bootstrapper = Bootstrapper;
    exports.bootstrapper = new Bootstrapper();
});
define("jriapp/utils/viewchecks", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ViewChecks = void 0;
    function dummyIsElView(_obj) {
        return false;
    }
    function dummyIsTemplateElView(_obj) {
        return false;
    }
    var ViewChecks = (function () {
        function ViewChecks() {
        }
        ViewChecks.isElView = dummyIsElView;
        ViewChecks.isTemplateElView = dummyIsTemplateElView;
        ViewChecks.isDataForm = function () { return false; };
        ViewChecks.isInsideDataForm = function () { return false; };
        ViewChecks.isInNestedForm = function () { return false; };
        ViewChecks.getParentDataForm = function () { return null; };
        return ViewChecks;
    }());
    exports.ViewChecks = ViewChecks;
});
define("jriapp/converter", ["require", "exports", "jriapp_shared", "jriapp/bootstrapper"], function (require, exports, jriapp_shared_12, bootstrapper_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NotConverter = exports.FloatConverter = exports.DecimalConverter = exports.SmallIntConverter = exports.IntegerConverter = exports.NumberConverter = exports.DateTimeConverter = exports.DateConverter = exports.baseConverter = exports.BaseConverter = exports.NUM_CONV = void 0;
    var utils = jriapp_shared_12.Utils, _a = utils.check, isNt = _a.isNt, isNumber = _a.isNumber, _b = utils.str, format = _b.format, stripNonNumeric = _b.stripNonNumeric, formatNumber = _b.formatNumber, round = utils.core.round, _c = utils.dates, strToDate = _c.strToDate, dateToStr = _c.dateToStr, boot = bootstrapper_3.bootstrapper, ERRS = jriapp_shared_12.LocaleERRS;
    exports.NUM_CONV = { None: 0, Integer: 1, Decimal: 2, Float: 3, SmallInt: 4 };
    var BaseConverter = (function () {
        function BaseConverter() {
        }
        BaseConverter.prototype.convertToSource = function (val, _param, _dataContext) {
            return val;
        };
        BaseConverter.prototype.convertToTarget = function (val, _param, _dataContext) {
            return (isNt(val)) ? null : val;
        };
        return BaseConverter;
    }());
    exports.BaseConverter = BaseConverter;
    exports.baseConverter = new BaseConverter();
    var DateConverter = (function () {
        function DateConverter() {
        }
        DateConverter.prototype.convertToSource = function (val, _param, dataContext) {
            if (!val) {
                return null;
            }
            var defaults = boot.defaults, datepicker = boot.getSvc("IDatepicker");
            return (!!datepicker) ? datepicker.parseDate(val) : dateTimeConverter.convertToSource(val, defaults.dateFormat, dataContext);
        };
        DateConverter.prototype.convertToTarget = function (val, _param, dataContext) {
            if (isNt(val)) {
                return "";
            }
            var defaults = boot.defaults, datepicker = boot.getSvc("IDatepicker");
            return (!!datepicker) ? datepicker.formatDate(val) : dateTimeConverter.convertToTarget(val, defaults.dateFormat, dataContext);
        };
        DateConverter.prototype.toString = function () {
            return "DateConverter";
        };
        return DateConverter;
    }());
    exports.DateConverter = DateConverter;
    var dateConverter = new DateConverter();
    var DateTimeConverter = (function () {
        function DateTimeConverter() {
        }
        DateTimeConverter.prototype.convertToSource = function (val, param, _dataContext) {
            return strToDate(val, param);
        };
        DateTimeConverter.prototype.convertToTarget = function (val, param, _dataContext) {
            return dateToStr(val, param);
        };
        DateTimeConverter.prototype.toString = function () {
            return "DateTimeConverter";
        };
        return DateTimeConverter;
    }());
    exports.DateTimeConverter = DateTimeConverter;
    var dateTimeConverter = new DateTimeConverter();
    var NumberConverter = (function () {
        function NumberConverter() {
        }
        NumberConverter.prototype.convertToSource = function (val, param, _dataContext) {
            if (isNt(val)) {
                return null;
            }
            var defaults = bootstrapper_3.bootstrapper.defaults, dp = defaults.decimalPoint, thousandSep = defaults.thousandSep;
            var prec = 4;
            var value = val.replace(thousandSep, "");
            value = value.replace(dp, ".");
            value = stripNonNumeric(value);
            if (value === "") {
                return null;
            }
            var num = null;
            switch (param) {
                case exports.NUM_CONV.SmallInt:
                    num = parseInt(value, 10);
                    break;
                case exports.NUM_CONV.Integer:
                    num = parseInt(value, 10);
                    break;
                case exports.NUM_CONV.Decimal:
                    prec = defaults.decPrecision;
                    num = round(parseFloat(value), prec);
                    break;
                case exports.NUM_CONV.Float:
                    num = parseFloat(value);
                    break;
                default:
                    num = Number(value);
                    break;
            }
            if (!isNumber(num)) {
                throw new Error(format(ERRS.ERR_CONV_INVALID_NUM, val));
            }
            return num;
        };
        NumberConverter.prototype.convertToTarget = function (val, param, _dataContext) {
            if (isNt(val)) {
                return "";
            }
            var defaults = bootstrapper_3.bootstrapper.defaults, dp = defaults.decimalPoint, thousandSep = defaults.thousandSep;
            var prec;
            switch (param) {
                case exports.NUM_CONV.Integer:
                    prec = 0;
                    return formatNumber(val, prec, dp, thousandSep);
                case exports.NUM_CONV.Decimal:
                    prec = defaults.decPrecision;
                    return formatNumber(val, prec, dp, thousandSep);
                case exports.NUM_CONV.SmallInt:
                    prec = 0;
                    return formatNumber(val, prec, dp, "");
                case exports.NUM_CONV.Float:
                    return formatNumber(val, null, dp, thousandSep);
                default:
                    return formatNumber(val, null, dp, thousandSep);
            }
        };
        NumberConverter.prototype.toString = function () {
            return "NumberConverter";
        };
        return NumberConverter;
    }());
    exports.NumberConverter = NumberConverter;
    var numberConverter = new NumberConverter();
    var IntegerConverter = (function () {
        function IntegerConverter() {
        }
        IntegerConverter.prototype.convertToSource = function (val, _param, dataContext) {
            return numberConverter.convertToSource(val, exports.NUM_CONV.Integer, dataContext);
        };
        IntegerConverter.prototype.convertToTarget = function (val, _param, dataContext) {
            return numberConverter.convertToTarget(val, exports.NUM_CONV.Integer, dataContext);
        };
        IntegerConverter.prototype.toString = function () {
            return "IntegerConverter";
        };
        return IntegerConverter;
    }());
    exports.IntegerConverter = IntegerConverter;
    var integerConverter = new IntegerConverter();
    var SmallIntConverter = (function () {
        function SmallIntConverter() {
        }
        SmallIntConverter.prototype.convertToSource = function (val, _param, dataContext) {
            return numberConverter.convertToSource(val, exports.NUM_CONV.SmallInt, dataContext);
        };
        SmallIntConverter.prototype.convertToTarget = function (val, _param, dataContext) {
            return numberConverter.convertToTarget(val, exports.NUM_CONV.SmallInt, dataContext);
        };
        SmallIntConverter.prototype.toString = function () {
            return "SmallIntConverter";
        };
        return SmallIntConverter;
    }());
    exports.SmallIntConverter = SmallIntConverter;
    var smallIntConverter = new SmallIntConverter();
    var DecimalConverter = (function () {
        function DecimalConverter() {
        }
        DecimalConverter.prototype.convertToSource = function (val, _param, dataContext) {
            return numberConverter.convertToSource(val, exports.NUM_CONV.Decimal, dataContext);
        };
        DecimalConverter.prototype.convertToTarget = function (val, _param, dataContext) {
            return numberConverter.convertToTarget(val, exports.NUM_CONV.Decimal, dataContext);
        };
        DecimalConverter.prototype.toString = function () {
            return "DecimalConverter";
        };
        return DecimalConverter;
    }());
    exports.DecimalConverter = DecimalConverter;
    var decimalConverter = new DecimalConverter();
    var FloatConverter = (function () {
        function FloatConverter() {
        }
        FloatConverter.prototype.convertToSource = function (val, _param, dataContext) {
            return numberConverter.convertToSource(val, exports.NUM_CONV.Float, dataContext);
        };
        FloatConverter.prototype.convertToTarget = function (val, _param, dataContext) {
            return numberConverter.convertToTarget(val, exports.NUM_CONV.Float, dataContext);
        };
        FloatConverter.prototype.toString = function () {
            return "FloatConverter";
        };
        return FloatConverter;
    }());
    exports.FloatConverter = FloatConverter;
    var floatConverter = new FloatConverter();
    var NotConverter = (function () {
        function NotConverter() {
        }
        NotConverter.prototype.convertToSource = function (val, _param, _dataContext) {
            return !val;
        };
        NotConverter.prototype.convertToTarget = function (val, _param, _dataContext) {
            return !val;
        };
        return NotConverter;
    }());
    exports.NotConverter = NotConverter;
    var notConverter = new NotConverter();
    boot.registerConverter("BaseConverter", exports.baseConverter);
    boot.registerConverter("dateConverter", dateConverter);
    boot.registerConverter("dateTimeConverter", dateTimeConverter);
    boot.registerConverter("numberConverter", numberConverter);
    boot.registerConverter("integerConverter", integerConverter);
    boot.registerConverter("smallIntConverter", smallIntConverter);
    boot.registerConverter("decimalConverter", decimalConverter);
    boot.registerConverter("floatConverter", floatConverter);
    boot.registerConverter("notConverter", notConverter);
});
define("jriapp/binding", ["require", "exports", "jriapp_shared", "jriapp/bootstrapper"], function (require, exports, jriapp_shared_13, bootstrapper_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Binding = exports.getBindingOptions = void 0;
    var utils = jriapp_shared_13.Utils, _a = utils.check, isString = _a.isString, isUndefined = _a.isUndefined, isNt = _a.isNt, _undefined = _a._undefined, isHasProp = _a.isHasProp, format = utils.str.format, _b = utils.core, getNewID = _b.getNewID, forEach = _b.forEach, Indexer = _b.Indexer, sys = utils.sys, debug = utils.debug, log = utils.log, ERRS = jriapp_shared_13.LocaleERRS;
    var resolvePath = sys.resolvePath, getPathParts = sys.getPathParts, getErrorNotification = sys.getErrorNotification, getProp = sys.getProp, setProp = sys.setProp, boot = bootstrapper_4.bootstrapper;
    sys.isBinding = function (obj) {
        return (!!obj && obj instanceof Binding);
    };
    var bindModeMap = {
        OneTime: 0,
        OneWay: 1,
        TwoWay: 2,
        BackWay: 3
    };
    function fn_reportUnResolved(bindTo, root, path, propName) {
        if (!debug.isDebugging()) {
            return;
        }
        debug.checkStartDebugger();
        var msg = "Unresolved data binding for ";
        if (bindTo === 0) {
            msg += " Source: ";
        }
        else {
            msg += " Target: ";
        }
        msg += "'" + root + "'";
        msg += ", property: '" + propName + "'";
        msg += ", binding path: '" + path + "'";
        log.error(msg);
    }
    function fn_reportMaxRec(bindTo, src, tgt, spath, tpath) {
        if (!debug.isDebugging()) {
            return;
        }
        debug.checkStartDebugger();
        var msg = "Maximum recursion exceeded for ";
        if (bindTo === 0) {
            msg += "Updating Source value: ";
        }
        else {
            msg += "Updating Target value: ";
        }
        msg += " source:'" + src + "'";
        msg += ", target:'" + tgt + "'";
        msg += ", source path: '" + spath + "'";
        msg += ", target path: '" + tpath + "'";
        log.error(msg);
    }
    function getBindingOptions(bindInfo, defTarget, dataContext) {
        var bindingOpts = {
            targetPath: null,
            sourcePath: null,
            target: null,
            source: null,
            isSourceFixed: false,
            mode: 1,
            converter: null,
            param: null,
            isBind: false
        };
        var app = boot.app;
        var converter;
        if (isString(bindInfo.converter)) {
            converter = app.getConverter(bindInfo.converter);
        }
        else {
            converter = bindInfo.converter;
        }
        var fixedSource = bindInfo.source, fixedTarget = bindInfo.target;
        if (!bindInfo.sourcePath && !!bindInfo.to) {
            bindingOpts.sourcePath = bindInfo.to;
        }
        else if (!!bindInfo.sourcePath) {
            bindingOpts.sourcePath = bindInfo.sourcePath;
        }
        if (!!bindInfo.targetPath) {
            bindingOpts.targetPath = bindInfo.targetPath;
        }
        if (!!bindInfo.param) {
            bindingOpts.param = bindInfo.param;
            bindingOpts.isBind = bindInfo.isBind;
        }
        if (!!bindInfo.mode) {
            bindingOpts.mode = bindModeMap[bindInfo.mode];
        }
        if (!!converter) {
            bindingOpts.converter = converter;
        }
        if (!fixedTarget) {
            bindingOpts.target = defTarget;
        }
        else {
            if (isString(fixedTarget)) {
                if (fixedTarget === "this") {
                    bindingOpts.target = defTarget;
                }
                else {
                    bindingOpts.target = resolvePath(app, fixedTarget);
                }
            }
            else {
                bindingOpts.target = fixedTarget;
            }
        }
        if (!fixedSource) {
            bindingOpts.source = dataContext;
        }
        else {
            bindingOpts.isSourceFixed = true;
            if (isString(fixedSource)) {
                if (fixedSource === "this") {
                    bindingOpts.source = defTarget;
                }
                else {
                    bindingOpts.source = resolvePath(app, fixedSource);
                }
            }
            else {
                bindingOpts.source = fixedSource;
            }
        }
        return bindingOpts;
    }
    exports.getBindingOptions = getBindingOptions;
    var Binding = (function (_super) {
        __extends(Binding, _super);
        function Binding(options) {
            var _this = _super.call(this) || this;
            if (isString(options.mode)) {
                options.mode = bindModeMap[options.mode];
            }
            if (!isString(options.targetPath)) {
                debug.checkStartDebugger();
                throw new Error(format(ERRS.ERR_BIND_TGTPATH_INVALID, options.targetPath));
            }
            if (isNt(options.mode)) {
                debug.checkStartDebugger();
                throw new Error(format(ERRS.ERR_BIND_MODE_INVALID, options.mode));
            }
            if (!options.target) {
                throw new Error(ERRS.ERR_BIND_TARGET_EMPTY);
            }
            if (!sys.isBaseObj(options.target)) {
                throw new Error(ERRS.ERR_BIND_TARGET_INVALID);
            }
            _this._state = null;
            _this._mode = options.mode;
            _this._converter = !options.converter ? null : options.converter;
            _this._param = options.param;
            _this._isBindParam = !!options.isBind;
            _this._srcPath = getPathParts(options.sourcePath);
            _this._tgtPath = getPathParts(options.targetPath);
            if (_this._tgtPath.length < 1) {
                throw new Error(format(ERRS.ERR_BIND_TGTPATH_INVALID, options.targetPath));
            }
            _this._srcFixed = (!!options.isSourceFixed);
            _this._pathItems = Indexer();
            _this._uniqueID = getNewID("bnd");
            _this._srcEnd = null;
            _this._tgtEnd = null;
            _this._source = null;
            _this._target = null;
            _this._umask = 0;
            _this._cntUtgt = 0;
            _this._cntUSrc = 0;
            _this._setTarget(options.target);
            _this._setSource(options.source);
            _this._update();
            var errNotif = getErrorNotification(_this._srcEnd);
            if (!!errNotif && errNotif.getIsHasErrors()) {
                _this._onSrcErrChanged(errNotif);
            }
            return _this;
        }
        Binding.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            var self = this;
            forEach(this._pathItems, function (_key, old) {
                self._cleanUp(old);
            });
            this._pathItems = Indexer();
            this._setSource(null);
            this._setTarget(null);
            this._state = null;
            this._converter = null;
            this._param = null;
            this._srcPath = null;
            this._tgtPath = null;
            this._srcEnd = null;
            this._tgtEnd = null;
            this._source = null;
            this._target = null;
            this._umask = 0;
            _super.prototype.dispose.call(this);
        };
        Binding.prototype._update = function () {
            var umask = this._umask, MAX_REC = 3;
            var flag = 0;
            this._umask = 0;
            if (this._mode === 3) {
                if (!!(umask & 1)) {
                    flag = 1;
                }
            }
            else {
                if (!!(umask & 2)) {
                    flag = 2;
                }
                else if (!!(umask & 1) && (this._mode === 2)) {
                    flag = 1;
                }
            }
            switch (flag) {
                case 1:
                    if (this._cntUtgt === 0) {
                        if (this._cntUSrc < MAX_REC) {
                            this._cntUSrc += 1;
                            try {
                                this.updateSource();
                            }
                            finally {
                                this._cntUSrc -= 1;
                            }
                        }
                        else {
                            fn_reportMaxRec(0, this._source, this._target, this._srcPath.join("."), this._tgtPath.join("."));
                        }
                    }
                    break;
                case 2:
                    if (this._cntUSrc === 0) {
                        if (this._cntUtgt < MAX_REC) {
                            this._cntUtgt += 1;
                            try {
                                this.updateTarget();
                            }
                            finally {
                                this._cntUtgt -= 1;
                            }
                        }
                        else {
                            fn_reportMaxRec(1, this._source, this._target, this._srcPath.join("."), this._tgtPath.join("."));
                        }
                    }
                    break;
            }
        };
        Binding.prototype._onSrcErrChanged = function (errNotif) {
            var errors = [];
            var tgt = this._tgtEnd, src = this._srcEnd, srcPath = this._srcPath;
            if (sys.isValidatable(tgt)) {
                if (!!src && srcPath.length > 0) {
                    var prop = srcPath[srcPath.length - 1];
                    errors = errNotif.getFieldErrors(prop);
                }
                tgt.validationErrors = errors;
            }
        };
        Binding.prototype._getTgtChangedFn = function (self, obj, prop, restPath, lvl) {
            return function () {
                var val = getProp(obj, prop);
                if (restPath.length > 0) {
                    self._setPathItem(null, 1, lvl, restPath);
                }
                self._parseTgt(val, restPath, lvl);
                self._update();
            };
        };
        Binding.prototype._getSrcChangedFn = function (self, obj, prop, restPath, lvl) {
            return function () {
                var val = getProp(obj, prop);
                if (restPath.length > 0) {
                    self._setPathItem(null, 0, lvl, restPath);
                }
                self._parseSrc(val, restPath, lvl);
                self._update();
            };
        };
        Binding.prototype._addOnPropChanged = function (obj, prop, fn) {
            obj.objEvents.onProp(prop, fn, this._uniqueID);
            if (prop !== "[*]" && sys.isPropBag(obj)) {
                obj.objEvents.onProp("[*]", fn, this._uniqueID);
            }
        };
        Binding.prototype._parseSrc = function (obj, path, lvl) {
            var self = this;
            self._srcEnd = null;
            if (sys.isBaseObj(obj) && obj.getIsStateDirty()) {
                return;
            }
            if (path.length === 0) {
                self._srcEnd = obj;
            }
            else {
                self._parseSrc2(obj, path, lvl);
            }
            if (self._mode === 3) {
                if (!!self._srcEnd) {
                    self._umask |= 1;
                }
            }
            else {
                if (!!self._tgtEnd) {
                    self._umask |= 2;
                }
            }
        };
        Binding.prototype._parseSrc2 = function (obj, path, lvl) {
            var self = this, isBaseObj = sys.isBaseObj(obj);
            if (isBaseObj) {
                if (obj.getIsStateDirty()) {
                    return;
                }
                self._setPathItem(obj, 0, lvl, path);
            }
            if (path.length > 1) {
                if (isBaseObj) {
                    var fnChange = self._getSrcChangedFn(self, obj, path[0], path.slice(1), lvl + 1);
                    self._addOnPropChanged(obj, path[0], fnChange);
                }
                if (!!obj) {
                    var nextObj = getProp(obj, path[0]);
                    if (!!nextObj) {
                        self._parseSrc2(nextObj, path.slice(1), lvl + 1);
                    }
                    else if (isUndefined(nextObj)) {
                        fn_reportUnResolved(0, self.source, self._srcPath.join("."), path[0]);
                    }
                }
                return;
            }
            if (!!obj && path.length === 1) {
                var isValidProp = (!debug.isDebugging() ? true : (isBaseObj ? obj.isHasProp(path[0]) : isHasProp(obj, path[0])));
                if (isValidProp) {
                    var updateOnChange = isBaseObj && (self._mode === 1 || self._mode === 2);
                    if (updateOnChange) {
                        var fnUpd = function () {
                            if (!!self._tgtEnd) {
                                self._umask |= 2;
                                self._update();
                            }
                        };
                        self._addOnPropChanged(obj, path[0], fnUpd);
                    }
                    var errNotif = getErrorNotification(obj);
                    if (!!errNotif) {
                        errNotif.addOnErrorsChanged(self._onSrcErrChanged, self._uniqueID, self);
                    }
                    self._srcEnd = obj;
                }
                else {
                    fn_reportUnResolved(0, self.source, self._srcPath.join("."), path[0]);
                }
            }
        };
        Binding.prototype._parseTgt = function (obj, path, lvl) {
            var self = this;
            self._tgtEnd = null;
            if (sys.isBaseObj(obj) && obj.getIsStateDirty()) {
                return;
            }
            if (path.length === 0) {
                self._tgtEnd = obj;
            }
            else {
                self._parseTgt2(obj, path, lvl);
            }
            if (self._mode === 3) {
                if (!!self._srcEnd) {
                    this._umask |= 1;
                }
            }
            else {
                if (!!self._tgtEnd) {
                    this._umask |= 2;
                }
            }
        };
        Binding.prototype._parseTgt2 = function (obj, path, lvl) {
            var self = this, isBaseObj = sys.isBaseObj(obj);
            if (isBaseObj) {
                if (obj.getIsStateDirty()) {
                    return;
                }
                self._setPathItem(obj, 1, lvl, path);
            }
            if (path.length > 1) {
                if (isBaseObj) {
                    var fnChange = self._getTgtChangedFn(self, obj, path[0], path.slice(1), lvl + 1);
                    self._addOnPropChanged(obj, path[0], fnChange);
                }
                if (!!obj) {
                    var nextObj = getProp(obj, path[0]);
                    if (!!nextObj) {
                        self._parseTgt2(nextObj, path.slice(1), lvl + 1);
                    }
                    else if (isUndefined(nextObj)) {
                        fn_reportUnResolved(1, self.target, self._tgtPath.join("."), path[0]);
                    }
                }
                return;
            }
            if (!!obj && path.length === 1) {
                var isValidProp = (!debug.isDebugging() ? true : (isBaseObj ? obj.isHasProp(path[0]) : isHasProp(obj, path[0])));
                if (isValidProp) {
                    var updateOnChange = isBaseObj && (self._mode === 2 || self._mode === 3);
                    if (updateOnChange) {
                        var fnUpd = function () {
                            if (!!self._srcEnd) {
                                self._umask |= 1;
                                self._update();
                            }
                        };
                        self._addOnPropChanged(obj, path[0], fnUpd);
                    }
                    self._tgtEnd = obj;
                }
                else {
                    fn_reportUnResolved(1, self.target, self._tgtPath.join("."), path[0]);
                }
            }
        };
        Binding.prototype._setPathItem = function (newObj, bindingTo, lvl, path) {
            var len = lvl + path.length;
            for (var i = lvl; i < len; i += 1) {
                var key = (bindingTo === 0) ? ("s" + i) : ((bindingTo === 1) ? ("t" + i) : null);
                if (!key) {
                    throw new Error(format(ERRS.ERR_PARAM_INVALID, "bindingTo", bindingTo));
                }
                var oldObj = this._pathItems[key];
                if (!!oldObj) {
                    this._cleanUp(oldObj);
                    delete this._pathItems[key];
                }
                if (!!newObj && i === lvl) {
                    this._pathItems[key] = newObj;
                }
            }
        };
        Binding.prototype._cleanUp = function (obj) {
            if (!!obj) {
                obj.objEvents.offNS(this._uniqueID);
                var errNotif = getErrorNotification(obj);
                if (!!errNotif) {
                    errNotif.offOnErrorsChanged(this._uniqueID);
                }
            }
        };
        Binding.prototype._setTarget = function (value) {
            if (!!this._state) {
                this._state.target = value;
                return false;
            }
            if (this._target !== value) {
                if (!!this._tgtEnd && !(this._mode === 3)) {
                    this._cntUtgt += 1;
                    try {
                        this.targetValue = null;
                    }
                    finally {
                        this._cntUtgt -= 1;
                        if (this._cntUtgt < 0) {
                            throw new Error("Invalid operation: this._cntUtgt = " + this._cntUtgt);
                        }
                    }
                }
                this._setPathItem(null, 1, 0, this._tgtPath);
                if (!!value && !sys.isBaseObj(value)) {
                    throw new Error(ERRS.ERR_BIND_TARGET_INVALID);
                }
                this._target = value;
                this._parseTgt(this._target, this._tgtPath, 0);
                if (!!this._target && !this._tgtEnd) {
                    throw new Error(format(ERRS.ERR_BIND_TGTPATH_INVALID, this._tgtPath.join(".")));
                }
                return true;
            }
            else {
                return false;
            }
        };
        Binding.prototype._setSource = function (value) {
            if (!!this._state) {
                this._state.source = value;
                return false;
            }
            if (this._source !== value) {
                if (!!this._srcEnd && (this._mode === 3)) {
                    this._cntUSrc += 1;
                    try {
                        this.sourceValue = null;
                    }
                    finally {
                        this._cntUSrc -= 1;
                        if (this._cntUSrc < 0) {
                            throw new Error("Invalid Operation: this._cntUSrc = " + this._cntUSrc);
                        }
                    }
                }
                this._setPathItem(null, 0, 0, this._srcPath);
                this._source = value;
                this._parseSrc(this._source, this._srcPath, 0);
                return true;
            }
            else {
                return false;
            }
        };
        Binding.prototype.updateTarget = function () {
            if (this.getIsStateDirty()) {
                return;
            }
            try {
                if (!this._converter) {
                    this.targetValue = this.sourceValue;
                }
                else {
                    this.targetValue = this._converter.convertToTarget(this.sourceValue, this.param, this.source);
                }
            }
            catch (ex) {
                utils.err.reThrow(ex, this.handleError(ex, this));
            }
        };
        Binding.prototype.updateSource = function () {
            if (this.getIsStateDirty()) {
                return;
            }
            try {
                if (!this._converter) {
                    this.sourceValue = this.targetValue;
                }
                else {
                    this.sourceValue = this._converter.convertToSource(this.targetValue, this.param, this.source);
                }
            }
            catch (ex) {
                if (!sys.isValidationError(ex) || !sys.isValidatable(this._tgtEnd)) {
                    utils.err.reThrow(ex, this.handleError(ex, this));
                }
            }
        };
        Binding.prototype.toString = function () {
            return "Binding";
        };
        Object.defineProperty(Binding.prototype, "uniqueID", {
            get: function () {
                return this._uniqueID;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "target", {
            get: function () {
                return this._target;
            },
            set: function (v) {
                if (this._setTarget(v)) {
                    this._update();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "source", {
            get: function () {
                return this._source;
            },
            set: function (v) {
                if (this._setSource(v)) {
                    this._update();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "targetPath", {
            get: function () {
                return this._tgtPath;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "sourcePath", {
            get: function () {
                return this._srcPath;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "sourceValue", {
            get: function () {
                var res = null;
                if (this._srcPath.length === 0) {
                    res = this._srcEnd;
                }
                else if (!!this._srcEnd) {
                    var prop = this._srcPath[this._srcPath.length - 1];
                    res = getProp(this._srcEnd, prop);
                }
                return res;
            },
            set: function (v) {
                if (this._srcPath.length === 0 || !this._srcEnd || v === _undefined) {
                    return;
                }
                var prop = this._srcPath[this._srcPath.length - 1];
                setProp(this._srcEnd, prop, v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "targetValue", {
            get: function () {
                var res = null;
                if (this._tgtPath.length === 0) {
                    res = this._tgtEnd;
                }
                else if (!!this._tgtEnd) {
                    var prop = this._tgtPath[this._tgtPath.length - 1];
                    res = getProp(this._tgtEnd, prop);
                }
                return res;
            },
            set: function (v) {
                if (this._tgtPath.length === 0 || !this._tgtEnd || v === _undefined) {
                    return;
                }
                var prop = this._tgtPath[this._tgtPath.length - 1];
                setProp(this._tgtEnd, prop, v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "isSourceFixed", {
            get: function () {
                return this._srcFixed;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "mode", {
            get: function () {
                return this._mode;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "converter", {
            get: function () {
                return this._converter;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "param", {
            get: function () {
                if (this._isBindParam) {
                    if (isNt(this._param)) {
                        return this._param;
                    }
                    var bindparts = this._param;
                    var source = this.source;
                    if (bindparts.length > 1) {
                        source = resolvePath(this.app, bindparts[1]);
                    }
                    return resolvePath(source, bindparts[0]);
                }
                else {
                    return this._param;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "isDisabled", {
            get: function () {
                return !!this._state;
            },
            set: function (v) {
                var s;
                v = !!v;
                if (this.isDisabled !== v) {
                    if (v) {
                        s = { source: this._source, target: this._target };
                        try {
                            this.target = null;
                            this.source = null;
                        }
                        finally {
                            this._state = s;
                        }
                    }
                    else {
                        s = this._state;
                        this._state = null;
                        this._setTarget(s.target);
                        this._setSource(s.source);
                        this._update();
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "app", {
            get: function () {
                return boot.app;
            },
            enumerable: false,
            configurable: true
        });
        return Binding;
    }(jriapp_shared_13.BaseObject));
    exports.Binding = Binding;
});
define("jriapp/template", ["require", "exports", "jriapp_shared", "jriapp/bootstrapper", "jriapp/utils/viewchecks", "jriapp/utils/dom"], function (require, exports, jriapp_shared_14, bootstrapper_5, viewchecks_1, dom_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTemplate = exports.css = void 0;
    var utils = jriapp_shared_14.Utils, reject = utils.async.reject, dom = dom_4.DomUtils, viewChecks = viewchecks_1.ViewChecks, _a = utils.check, isFunc = _a.isFunc, isThenable = _a.isThenable, format = utils.str.format, arrHelper = utils.arr, sys = utils.sys, boot = bootstrapper_5.bootstrapper, ERRS = jriapp_shared_14.LocaleERRS, ERROR = utils.err, doc = dom.document;
    var css;
    (function (css) {
        css["templateContainer"] = "ria-template-container";
        css["templateError"] = "ria-template-error";
    })(css = exports.css || (exports.css = {}));
    function createTemplate(options) {
        return new Template(options);
    }
    exports.createTemplate = createTemplate;
    var Template = (function (_super) {
        __extends(Template, _super);
        function Template(options) {
            var _this = _super.call(this) || this;
            if (options.parentEl === null) {
                var parentEl = doc.createElement('div');
                dom.addClass([parentEl], "ria-template-container");
                _this._el = parentEl;
                _this._removeElOnDispose = true;
            }
            else {
                _this._el = options.parentEl;
                _this._removeElOnDispose = false;
            }
            _this._dataContext = options.dataContext;
            _this._templEvents = options.templEvents;
            _this._isLoaded = false;
            _this._lfTime = null;
            _this._templateID = null;
            _this._templElView = null;
            return _this;
        }
        Template.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._unloadTemplate();
            if (!!this._el && this._removeElOnDispose) {
                dom.removeNode(this._el);
            }
            this._el = null;
            this._dataContext = null;
            this._templEvents = null;
            _super.prototype.dispose.call(this);
        };
        Template.prototype._getBindings = function () {
            return !this._lfTime ? [] : this._lfTime.findAll(sys.isBinding);
        };
        Template.prototype._getTemplateElView = function () {
            return !this._lfTime ? null : this._lfTime.findFirst(viewChecks.isTemplateElView);
        };
        Template.prototype._loadAsync = function (name) {
            var self = this, loader = this.app.getTemplateLoader(name);
            var promise;
            if (isFunc(loader) && isThenable(promise = loader())) {
                return promise;
            }
            else {
                return reject(new Error(format(ERRS.ERR_TEMPLATE_ID_INVALID, self.templateID)));
            }
        };
        Template.prototype._loadTemplate = function () {
            var self = this, id = self.templateID, templateEl = self.el;
            try {
                if (self._isLoaded) {
                    self._unloadTemplate();
                }
                if (!!id) {
                    return self._loadAsync(id).then(function (docInfo) {
                        return self._dataBind(templateEl, docInfo);
                    }).catch(function (err) {
                        if (!!err && !!err.message) {
                            throw err;
                        }
                        else {
                            throw new Error(format(ERRS.ERR_TEMPLATE_ID_INVALID, self.templateID));
                        }
                    });
                }
                else {
                    return reject(format(ERRS.ERR_TEMPLATE_ID_INVALID, self.templateID));
                }
            }
            catch (ex) {
                return reject(ex);
            }
        };
        Template.prototype._onLoading = function () {
            if (!!this._templEvents) {
                this._templEvents.templateLoading(this);
            }
        };
        Template.prototype._onLoaded = function (error) {
            this._templElView = this._getTemplateElView();
            if (!!this._templEvents) {
                this._templEvents.templateLoaded(this, error);
            }
            if (!!this._templElView) {
                this._templElView.templateLoaded(this, error);
            }
        };
        Template.prototype._unloadTemplate = function () {
            try {
                if (!!this._templEvents) {
                    this._templEvents.templateUnLoading(this);
                }
                if (!!this._templElView) {
                    this._templElView.templateUnLoading(this);
                }
            }
            finally {
                this._cleanUp();
            }
        };
        Template.prototype._dataBind = function (el, docInfo) {
            var self = this;
            if (self.getIsStateDirty()) {
                ERROR.abort();
            }
            if (self._isLoaded) {
                self._unloadTemplate();
            }
            if (!docInfo) {
                throw new Error(format(ERRS.ERR_TEMPLATE_ID_INVALID, self.templateID));
            }
            el.appendChild(docInfo.doc.cloneNode(true));
            self._isLoaded = true;
            dom.removeClass([el], "ria-template-error");
            self._onLoading();
            var promise = self.app._getInternal().bindTemplate(el, this.dataContext, docInfo.required);
            return promise.then(function (lftm) {
                if (self.getIsStateDirty()) {
                    lftm.dispose();
                    ERROR.abort();
                }
                if (!!docInfo.required) {
                    docInfo.required = null;
                }
                self._lfTime = lftm;
                self._updateBindingSource();
                self._onLoaded(null);
                return el;
            });
        };
        Template.prototype._onFail = function (templateEl, err) {
            var self = this;
            if (self.getIsStateDirty()) {
                return;
            }
            self._onLoaded(err);
            if (ERROR.checkIsAbort(err)) {
                return;
            }
            dom.setClass([templateEl], "ria-template-error", false);
            var ex;
            if (!!err) {
                if (!!err.message) {
                    ex = err;
                }
                else if (!!err.statusText) {
                    ex = new Error(err.statusText);
                }
                else {
                    ex = new Error("error: " + err);
                }
            }
            if (!ex) {
                ex = new Error(format(ERRS.ERR_TEMPLATE_ID_INVALID, self.templateID));
            }
            self.handleError(ex, self);
        };
        Template.prototype._updateBindingSource = function () {
            var bindings = this._getBindings(), len = bindings.length;
            for (var i = 0; i < len; i += 1) {
                var binding = bindings[i];
                if (!binding.isSourceFixed) {
                    binding.source = this.dataContext;
                }
            }
        };
        Template.prototype._cleanUp = function () {
            if (!!this._lfTime) {
                this._lfTime.dispose();
                this._lfTime = null;
            }
            this._templElView = null;
            if (this._isLoaded) {
                this.el.innerHTML = "";
                this._isLoaded = false;
            }
        };
        Template.prototype.findElByDataName = function (name) {
            return arrHelper.fromList(this._el.querySelectorAll(["*[", "data-name", '="', name, '"]'].join("")));
        };
        Template.prototype.findElViewsByDataName = function (name) {
            var els = this.findElByDataName(name), res = [], viewStore = boot.app.viewFactory.store;
            for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
                var el = els_1[_i];
                var elView = viewStore.getElView(el);
                if (!!elView) {
                    res.push(elView);
                }
            }
            return res;
        };
        Template.prototype.toString = function () {
            return "ITemplate";
        };
        Object.defineProperty(Template.prototype, "isLoaded", {
            get: function () {
                return this._isLoaded;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Template.prototype, "dataContext", {
            get: function () {
                return this._dataContext;
            },
            set: function (v) {
                if (this._dataContext !== v) {
                    this._dataContext = v;
                    this._updateBindingSource();
                    this.objEvents.raiseProp("dataContext");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Template.prototype, "templateID", {
            get: function () {
                return this._templateID;
            },
            set: function (v) {
                var _this = this;
                if (this._templateID !== v) {
                    this._templateID = v;
                    var el_1 = this.el;
                    this._loadTemplate().catch(function (err) {
                        if (_this.getIsStateDirty()) {
                            return;
                        }
                        _this._onFail(el_1, err);
                    });
                    this.objEvents.raiseProp("templateID");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Template.prototype, "el", {
            get: function () {
                return this._el;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Template.prototype, "app", {
            get: function () {
                return bootstrapper_5.bootstrapper.app;
            },
            enumerable: false,
            configurable: true
        });
        return Template;
    }(jriapp_shared_14.BaseObject));
});
define("jriapp/utils/lifetime", ["require", "exports", "jriapp_shared"], function (require, exports, jriapp_shared_15) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LifeTimeScope = void 0;
    var utils = jriapp_shared_15.Utils;
    var LifeTimeScope = (function (_super) {
        __extends(LifeTimeScope, _super);
        function LifeTimeScope() {
            var _this = _super.call(this) || this;
            _this._objs = [];
            return _this;
        }
        LifeTimeScope.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            for (var _i = 0, _a = this._objs; _i < _a.length; _i++) {
                var obj = _a[_i];
                if (!obj.getIsStateDirty()) {
                    obj.dispose();
                }
            }
            this._objs = [];
            _super.prototype.dispose.call(this);
        };
        LifeTimeScope.prototype.addObj = function (b) {
            this._objs.push(b);
        };
        LifeTimeScope.prototype.removeObj = function (b) {
            utils.arr.remove(this._objs, b);
        };
        LifeTimeScope.prototype.getObjs = function () {
            return this._objs;
        };
        LifeTimeScope.prototype.findAll = function (predicate) {
            return this._objs.filter(predicate);
        };
        LifeTimeScope.prototype.findFirst = function (predicate) {
            var arr = this._objs, len = arr.length;
            for (var i = 0; i < len; i += 1) {
                if (predicate(arr[i])) {
                    return arr[i];
                }
            }
            return null;
        };
        LifeTimeScope.prototype.toString = function () {
            return "LifeTimeScope";
        };
        return LifeTimeScope;
    }(jriapp_shared_15.BaseObject));
    exports.LifeTimeScope = LifeTimeScope;
});
define("jriapp/utils/propwatcher", ["require", "exports", "jriapp_shared"], function (require, exports, jriapp_shared_16) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PropWatcher = void 0;
    var coreUtils = jriapp_shared_16.Utils.core;
    var PropWatcher = (function (_super) {
        __extends(PropWatcher, _super);
        function PropWatcher() {
            var _this = _super.call(this) || this;
            _this._uniqueID = coreUtils.getNewID("prw");
            _this._objs = [];
            return _this;
        }
        PropWatcher.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            var self = this;
            for (var _i = 0, _a = this._objs; _i < _a.length; _i++) {
                var obj = _a[_i];
                self.removeWatch(obj);
            }
            this._objs = [];
            _super.prototype.dispose.call(this);
        };
        PropWatcher.create = function () {
            return new PropWatcher();
        };
        PropWatcher.prototype.addPropWatch = function (obj, prop, fnOnChange) {
            var self = this;
            obj.objEvents.onProp(prop, function (_, a) {
                fnOnChange(a.property);
            }, self.uniqueID);
            if (self._objs.indexOf(obj) < 0) {
                self._objs.push(obj);
            }
        };
        PropWatcher.prototype.addWatch = function (obj, props, fnOnChange) {
            var self = this;
            obj.objEvents.onProp("*", function (_, a) {
                if (props.indexOf(a.property) > -1) {
                    fnOnChange(a.property);
                }
            }, self.uniqueID);
            if (self._objs.indexOf(obj) < 0) {
                self._objs.push(obj);
            }
        };
        PropWatcher.prototype.removeWatch = function (obj) {
            obj.objEvents.offNS(this.uniqueID);
        };
        PropWatcher.prototype.toString = function () {
            return "PropWatcher " + this._uniqueID;
        };
        Object.defineProperty(PropWatcher.prototype, "uniqueID", {
            get: function () {
                return this._uniqueID;
            },
            enumerable: false,
            configurable: true
        });
        return PropWatcher;
    }(jriapp_shared_16.BaseObject));
    exports.PropWatcher = PropWatcher;
});
define("jriapp/mvvm", ["require", "exports", "jriapp_shared"], function (require, exports, jriapp_shared_17) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ViewModel = exports.BaseCommand = exports.Command = void 0;
    var getNewID = jriapp_shared_17.Utils.core.getNewID;
    var CMD_EVENTS;
    (function (CMD_EVENTS) {
        CMD_EVENTS["can_execute_changed"] = "canExecute_changed";
    })(CMD_EVENTS || (CMD_EVENTS = {}));
    var Command = (function (_super) {
        __extends(Command, _super);
        function Command(fnAction, fnCanExecute) {
            var _this = _super.call(this) || this;
            _this._uniqueID = getNewID("cmd");
            _this._action = fnAction;
            _this._predicate = fnCanExecute;
            return _this;
        }
        Command.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._action = null;
            this._predicate = null;
            _super.prototype.dispose.call(this);
        };
        Command.prototype._canExecute = function (param) {
            var predicate = this._predicate;
            return !predicate ? true : predicate(param);
        };
        Command.prototype._execute = function (param) {
            var action = this._action;
            if (!!action) {
                action(param);
            }
        };
        Command.prototype.addOnCanExecuteChanged = function (fn, nmspace, context) {
            this.objEvents.on("canExecute_changed", fn, nmspace, context);
        };
        Command.prototype.offOnCanExecuteChanged = function (nmspace) {
            this.objEvents.off("canExecute_changed", nmspace);
        };
        Command.prototype.canExecute = function (param) {
            return this._canExecute(param);
        };
        Command.prototype.execute = function (param) {
            this._execute(param);
        };
        Command.prototype.raiseCanExecuteChanged = function () {
            this.objEvents.raise("canExecute_changed", {});
        };
        Command.prototype.toString = function () {
            return "Command";
        };
        Object.defineProperty(Command.prototype, "uniqueID", {
            get: function () {
                return this._uniqueID;
            },
            enumerable: false,
            configurable: true
        });
        return Command;
    }(jriapp_shared_17.BaseObject));
    exports.Command = Command;
    var BaseCommand = (function (_super) {
        __extends(BaseCommand, _super);
        function BaseCommand(owner) {
            var _this = _super.call(this, null, null) || this;
            _this._owner = owner;
            return _this;
        }
        BaseCommand.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._owner = null;
            _super.prototype.dispose.call(this);
        };
        BaseCommand.prototype._canExecute = function (param) {
            return this.isCanExecute(param);
        };
        BaseCommand.prototype._execute = function (param) {
            this.action(param);
        };
        Object.defineProperty(BaseCommand.prototype, "owner", {
            get: function () {
                return this._owner;
            },
            enumerable: false,
            configurable: true
        });
        return BaseCommand;
    }(Command));
    exports.BaseCommand = BaseCommand;
    var ViewModel = (function (_super) {
        __extends(ViewModel, _super);
        function ViewModel(app) {
            var _this = _super.call(this) || this;
            _this._app = app;
            _this._uniqueID = getNewID("vm");
            return _this;
        }
        ViewModel.prototype.addOnDisposed = function (handler, nmspace, context) {
            this.objEvents.addOnDisposed(handler, nmspace, context);
        };
        ViewModel.prototype.offOnDisposed = function (nmspace) {
            this.objEvents.offOnDisposed(nmspace);
        };
        ViewModel.prototype.addOnError = function (handler, nmspace, context) {
            this.objEvents.addOnError(handler, nmspace, context);
        };
        ViewModel.prototype.offOnError = function (nmspace) {
            this.objEvents.offOnError(nmspace);
        };
        ViewModel.prototype.toString = function () {
            return "ViewModel";
        };
        Object.defineProperty(ViewModel.prototype, "uniqueID", {
            get: function () {
                return this._uniqueID;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ViewModel.prototype, "app", {
            get: function () {
                return this._app;
            },
            enumerable: false,
            configurable: true
        });
        return ViewModel;
    }(jriapp_shared_17.BaseObject));
    exports.ViewModel = ViewModel;
});
define("jriapp/utils/mloader", ["require", "exports", "jriapp_shared", "jriapp/int", "jriapp/utils/sloader"], function (require, exports, jriapp_shared_18, int_4, sloader_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.create = void 0;
    var utils = jriapp_shared_18.Utils, _a = utils.core, forEach = _a.forEach, Indexer = _a.Indexer, startsWith = utils.str.startsWith, _b = utils.async, _reject = _b.reject, _resolve = _b.resolve, _whenAll = _b.whenAll, createDeferred = _b.createDeferred, arrHelper = utils.arr, CSSPrefix = "css!";
    var _moduleLoader = null;
    function create() {
        if (!_moduleLoader) {
            _moduleLoader = new ModuleLoader();
        }
        return _moduleLoader;
    }
    exports.create = create;
    var LOAD_STATE;
    (function (LOAD_STATE) {
        LOAD_STATE[LOAD_STATE["NONE"] = 0] = "NONE";
        LOAD_STATE[LOAD_STATE["LOADING"] = 1] = "LOADING";
        LOAD_STATE[LOAD_STATE["LOADED"] = 2] = "LOADED";
    })(LOAD_STATE || (LOAD_STATE = {}));
    function whenAll(loads) {
        if (!loads || loads.length === 0) {
            return _resolve(void 0, true);
        }
        if (loads.length === 1) {
            return loads[0].defered.promise();
        }
        var cnt = loads.length;
        var resolved = 0, err = null;
        for (var i = 0; i < cnt; i += 1) {
            if (loads[i].state === 2) {
                ++resolved;
                if (!!loads[i].err) {
                    err = loads[i].err;
                }
            }
        }
        if (resolved === cnt) {
            return !err ? _resolve(void 0, true) : _reject(err);
        }
        else {
            return _whenAll(loads.map(function (load) {
                return load.defered.promise();
            }));
        }
    }
    var ModuleLoader = (function () {
        function ModuleLoader() {
            this._loads = Indexer();
            this._cssLoads = Indexer();
        }
        ModuleLoader.prototype.load = function (names) {
            var self = this;
            var cssNames = names.filter(function (val) { return self.isCSS(val); }), cssLoads = self.loadCSS(cssNames), modNames = names.filter(function (val) { return !self.isCSS(val); }), forLoad = modNames.filter(function (val) {
                return !self._loads[val];
            });
            if (forLoad.length > 0) {
                forLoad.forEach(function (name) {
                    var load = {
                        name: name,
                        err: null,
                        state: 1,
                        defered: createDeferred(true)
                    };
                    self._loads[name] = load;
                    new Promise(function (resolve_1, reject_1) { require([name], resolve_1, reject_1); }).then(function () {
                        load.state = 2;
                        load.defered.resolve();
                    }, function (err) {
                        load.state = 2;
                        load.err = err;
                        load.defered.reject("Error loading modules: " + ("" + err));
                    });
                });
            }
            var loads = arrHelper.merge([modNames.map(function (name) {
                    return self._loads[name];
                }), cssLoads]);
            return whenAll(loads);
        };
        ModuleLoader.prototype.whenAllLoaded = function () {
            var loads = [];
            forEach(this._loads, function (_, val) {
                loads.push(val);
            });
            return whenAll(loads);
        };
        ModuleLoader.prototype.loadCSS = function (names) {
            var self = this, forLoad = names.filter(function (val) {
                return !self._cssLoads[val];
            }), urls = forLoad.map(function (val) {
                return self.getUrl(val);
            });
            if (forLoad.length > 0) {
                var cssLoader = sloader_2.createCssLoader();
                forLoad.forEach(function (name) {
                    self._cssLoads[name] = {
                        name: name,
                        err: null,
                        state: 1,
                        defered: createDeferred(true)
                    };
                });
                cssLoader.loadStyles(urls).then(function () {
                    forLoad.forEach(function (name) {
                        var load = self._cssLoads[name];
                        load.state = 2;
                        load.defered.resolve();
                    });
                }, function (err) {
                    forLoad.forEach(function (name) {
                        var load = self._cssLoads[name];
                        load.state = 2;
                        load.err = err;
                        load.defered.reject(err);
                    });
                });
            }
            var loads = names.map(function (name) {
                return self._cssLoads[name];
            });
            return loads;
        };
        ModuleLoader.prototype.isCSS = function (name) {
            return !!name && startsWith(name, CSSPrefix);
        };
        ModuleLoader.prototype.getUrl = function (name) {
            if (this.isCSS(name)) {
                name = name.substr(CSSPrefix.length);
            }
            var url = int_4.Config.cssPath || "";
            url = url.replace(/\/?$/, '/');
            return "" + url + name;
        };
        return ModuleLoader;
    }());
});
define("jriapp/databindsvc", ["require", "exports", "jriapp_shared", "jriapp/utils/lifetime", "jriapp/utils/dom", "jriapp/utils/mloader", "jriapp/binding", "jriapp/utils/viewchecks", "jriapp/utils/parser"], function (require, exports, jriapp_shared_19, lifetime_1, dom_5, mloader_1, binding_1, viewchecks_2, parser_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDataBindSvc = void 0;
    var utils = jriapp_shared_19.Utils, createDeferred = utils.async.createDeferred, viewChecks = viewchecks_2.ViewChecks, dom = dom_5.DomUtils, startsWith = utils.str.startsWith, parser = parser_2.Parser, forEach = utils.core.forEach, toMap = utils.arr.toMap;
    function createDataBindSvc(app) {
        return new DataBindingService(app);
    }
    exports.createDataBindSvc = createDataBindSvc;
    function toBindable(el) {
        var attr;
        var allAttrs = el.attributes, res = {
            el: el,
            needToBind: false,
            dataForm: false,
            bindings: [],
            elView: null
        };
        var n = allAttrs.length;
        var dataViewName, hasOptions = false;
        for (var i = 0; i < n; i++) {
            attr = allAttrs[i];
            if (startsWith(attr.name, "data-bind")) {
                res.bindings.push(attr.value);
            }
            if (attr.name === "data-view") {
                dataViewName = attr.value;
            }
            if (attr.name === "data-view-options") {
                hasOptions = true;
            }
        }
        if (dataViewName === "dataform") {
            res.dataForm = true;
        }
        res.needToBind = !!dataViewName || hasOptions || res.bindings.length > 0;
        return res.needToBind ? res : null;
    }
    function getBindables(scope) {
        var result = [], allElems = dom.queryAll(scope, "*");
        for (var _i = 0, allElems_1 = allElems; _i < allElems_1.length; _i++) {
            var el = allElems_1[_i];
            var res = toBindable(el);
            if (!!res) {
                result.push(res);
            }
        }
        return result;
    }
    function filterBindables(scope, bindElems) {
        var forms = bindElems.filter(function (bindElem) {
            return !!bindElem.dataForm;
        }).map(function (bindElem) {
            return bindElem.el;
        });
        if (forms.length === 0) {
            return bindElems;
        }
        return bindElems.filter(function (bindElem) {
            return !viewChecks.isInNestedForm(scope, forms, bindElem.el);
        });
    }
    var DataBindingService = (function (_super) {
        __extends(DataBindingService, _super);
        function DataBindingService(app) {
            var _this = _super.call(this) || this;
            _this._app = app;
            _this._root = app.appRoot;
            _this._elViewFactory = app.viewFactory;
            _this._objLifeTime = null;
            _this._mloader = mloader_1.create();
            return _this;
        }
        DataBindingService.prototype.dispose = function () {
            this._cleanUp();
            this._elViewFactory = null;
            this._mloader = null;
            this._app = null;
            _super.prototype.dispose.call(this);
        };
        DataBindingService.prototype._cleanUp = function () {
            if (!!this._objLifeTime) {
                this._objLifeTime.dispose();
                this._objLifeTime = null;
            }
        };
        DataBindingService.prototype._bindElView = function (args) {
            var self = this, _a = args.bind, elView = _a.elView, bindings = _a.bindings, dataContext = args.dataContext;
            if ((bindings === null || bindings === void 0 ? void 0 : bindings.length) > 0) {
                var bindInfos = parser.parseBindings(bindings);
                try {
                    elView.bindingState = 1;
                    for (var _i = 0, bindInfos_1 = bindInfos; _i < bindInfos_1.length; _i++) {
                        var bindInfo = bindInfos_1[_i];
                        var op = binding_1.getBindingOptions(bindInfo, elView, dataContext);
                        var binding = self.bind(op);
                        args.lftm.addObj(binding);
                    }
                }
                finally {
                    elView.bindingState = 0;
                }
            }
        };
        DataBindingService.prototype.bindTemplate = function (templateEl, dataContext, required) {
            var self = this;
            var res;
            if (!!required && required.length > 0) {
                res = self._mloader.load(required).then(function () {
                    return self.bindElements({
                        scope: templateEl,
                        bind: 1,
                        dataContext: dataContext
                    });
                });
            }
            else {
                res = self.bindElements({
                    scope: templateEl,
                    bind: 1,
                    dataContext: dataContext
                });
            }
            res.catch(function (err) {
                utils.queue.enque(function () {
                    self.handleError(err, self);
                });
            });
            return res;
        };
        DataBindingService.prototype.bindElements = function (args) {
            var self = this, defer = createDeferred(true), scope = args.scope, lftm = new lifetime_1.LifeTimeScope();
            try {
                var bindElems = getBindables(scope);
                var bindables = filterBindables(scope, bindElems);
                for (var _i = 0, bindables_1 = bindables; _i < bindables_1.length; _i++) {
                    var bindElem = bindables_1[_i];
                    var factory = self._elViewFactory;
                    var elView = factory.getElView(bindElem.el);
                    if (!elView) {
                        var info = factory.getElementViewInfo(bindElem.el, args.dataContext);
                        elView = factory.createElView(info);
                        lftm.addObj(elView);
                    }
                    bindElem.elView = elView;
                }
                var viewsArr = bindables.map(function (bindElem) {
                    self._bindElView({
                        bind: bindElem,
                        lftm: lftm,
                        dataContext: args.dataContext
                    });
                    return bindElem.elView;
                }).filter(function (v) { return !!v.viewMounted; });
                var viewMap = toMap(viewsArr, function (v) { return v.uniqueID; });
                forEach(viewMap, function (_n, v) { v.viewMounted(); });
                defer.resolve(lftm);
            }
            catch (err) {
                lftm.dispose();
                self.handleError(err, self);
                setTimeout(function () {
                    defer.reject(new jriapp_shared_19.DummyError(err));
                }, 0);
            }
            return defer.promise();
        };
        DataBindingService.prototype.setUpBindings = function () {
            var bindScope = this._root, dataContext = this._app, self = this;
            this._cleanUp();
            var promise = this.bindElements({
                scope: bindScope,
                bind: 0,
                dataContext: dataContext
            });
            return promise.then(function (lftm) {
                if (self.getIsStateDirty()) {
                    lftm.dispose();
                    return;
                }
                self._objLifeTime = lftm;
            });
        };
        DataBindingService.prototype.bind = function (opts) {
            return new binding_1.Binding(opts);
        };
        return DataBindingService;
    }(jriapp_shared_19.BaseObject));
});
define("jriapp/app", ["require", "exports", "jriapp_shared", "jriapp/bootstrapper", "jriapp/utils/dom", "jriapp/utils/tloader", "jriapp/elview", "jriapp/databindsvc"], function (require, exports, jriapp_shared_20, bootstrapper_6, dom_6, tloader_2, elview_2, databindsvc_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Application = void 0;
    var utils = jriapp_shared_20.Utils, dom = dom_6.DomUtils, doc = dom.document, format = utils.str.format, isThenable = utils.check.isThenable, boot = bootstrapper_6.bootstrapper, sys = utils.sys, ERRS = jriapp_shared_20.LocaleERRS, _a = utils.core, forEach = _a.forEach, getNewID = _a.getNewID, memoize = _a.memoize, Indexer = _a.Indexer, _b = utils.async, createDeferred = _b.createDeferred, resolve = _b.resolve, reject = _b.reject, http = utils.http;
    var APP_EVENTS;
    (function (APP_EVENTS) {
        APP_EVENTS["startup"] = "startup";
    })(APP_EVENTS || (APP_EVENTS = {}));
    var AppState;
    (function (AppState) {
        AppState[AppState["None"] = 0] = "None";
        AppState[AppState["Starting"] = 1] = "Starting";
        AppState[AppState["Started"] = 2] = "Started";
        AppState[AppState["Disposed"] = 3] = "Disposed";
        AppState[AppState["Error"] = 4] = "Error";
    })(AppState || (AppState = {}));
    var Application = (function (_super) {
        __extends(Application, _super);
        function Application(options) {
            var _this = _super.call(this) || this;
            if (!options) {
                options = Indexer();
            }
            var self = _this, moduleInits = options.modulesInits || Indexer(), appName = jriapp_shared_20.APP_NAME;
            _this._appName = appName;
            _this._options = options;
            if (!!boot.app) {
                throw new Error(format(ERRS.ERR_APP_NAME_NOT_UNIQUE, appName));
            }
            _this._uniqueID = getNewID("app");
            _this._appState = 0;
            _this._moduleInits = moduleInits;
            _this._viewFactory = elview_2.createElViewFactory(boot.elViewRegister);
            _this._dataBindingService = databindsvc_1.createDataBindSvc(_this);
            _this._objMaps = [];
            _this._extraData = Indexer();
            _this._UC = Indexer();
            _this._internal = {
                bindTemplate: function (templateEl, dataContext, required) {
                    return self._dataBindingService.bindTemplate(templateEl, dataContext, required);
                },
                bindElements: function (args) {
                    return self._dataBindingService.bindElements(args);
                },
                getTemplateLoaderInfo: function (name) {
                    return self._getTemplateLoaderInfo(name);
                },
                getData: function () {
                    return self._extraData;
                }
            };
            boot._getInternal().registerApp(_this);
            return _this;
        }
        Application.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            var self = this;
            try {
                self._appState = 3;
                boot._getInternal().unregisterApp(self);
                self._cleanUpObjMaps();
                self._dataBindingService.dispose();
                self._dataBindingService = null;
                self._viewFactory.dispose();
                self._extraData = Indexer();
                self._moduleInits = Indexer();
                self._UC = Indexer();
                self._options = null;
                self._viewFactory = null;
            }
            finally {
                _super.prototype.dispose.call(this);
            }
        };
        Application.prototype._cleanUpObjMaps = function () {
            var self = this;
            var _loop_1 = function (objMap) {
                forEach(objMap, function (name) {
                    var obj = objMap[name];
                    if (sys.isBaseObj(obj)) {
                        if (!obj.getIsDisposed()) {
                            obj.objEvents.offNS(self.uniqueID);
                        }
                    }
                });
            };
            for (var _i = 0, _a = this._objMaps; _i < _a.length; _i++) {
                var objMap = _a[_i];
                _loop_1(objMap);
            }
            this._objMaps = [];
        };
        Application.prototype._initAppModules = function () {
            var self = this, keys = Object.keys(self._moduleInits);
            keys.forEach(function (key) {
                var initFn = self._moduleInits[key];
                initFn(self);
            });
        };
        Application.prototype._getTemplateLoaderInfo = function (name) {
            var res = tloader_2.getLoader(this, name);
            if (!res) {
                res = tloader_2.getLoader(boot, name);
            }
            return res;
        };
        Application.prototype.onStartUp = function () {
        };
        Application.prototype._getInternal = function () {
            return this._internal;
        };
        Application.prototype.addOnDisposed = function (handler, nmspace, context) {
            this.objEvents.addOnDisposed(handler, nmspace, context);
        };
        Application.prototype.offOnDisposed = function (nmspace) {
            this.objEvents.offOnDisposed(nmspace);
        };
        Application.prototype.addOnError = function (handler, nmspace, context) {
            this.objEvents.addOnError(handler, nmspace, context);
        };
        Application.prototype.offOnError = function (nmspace) {
            this.objEvents.offOnError(nmspace);
        };
        Application.prototype.addOnStartUp = function (fn, nmspace, context) {
            this.objEvents.on("startup", fn, nmspace, context);
        };
        Application.prototype.offOnStartUp = function (nmspace) {
            this.objEvents.off("startup", nmspace);
        };
        Application.prototype.getData = function () {
            return this._extraData;
        };
        Application.prototype.bind = function (opts) {
            return this._dataBindingService.bind(opts);
        };
        Application.prototype.registerConverter = function (name, obj) {
            bootstrapper_6.registerConverter(this, name, obj);
        };
        Application.prototype.getConverter = function (name) {
            var res = bootstrapper_6.getConverter(this, name);
            if (!res) {
                res = bootstrapper_6.getConverter(boot, name);
            }
            if (!res) {
                throw new Error(format(ERRS.ERR_CONVERTER_NOTREGISTERED, name));
            }
            return res;
        };
        Application.prototype.registerSvc = function (name, obj) {
            bootstrapper_6.registerSvc(this, name, obj);
        };
        Application.prototype.unregisterSvc = function (name) {
            bootstrapper_6.unregisterSvc(this, name);
        };
        Application.prototype.getSvc = function (name) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var obj = bootstrapper_6.getSvc.apply(void 0, __spreadArray([this, name], args));
            if (!obj) {
                obj = bootstrapper_6.getSvc.apply(void 0, __spreadArray([boot, name], args));
            }
            if (!obj) {
                throw new Error("The service: " + name + " is not registered");
            }
            return obj;
        };
        Application.prototype.registerElView = function (name, vwType) {
            this._viewFactory.register.registerElView(name, vwType);
        };
        Application.prototype.registerObject = function (name, obj) {
            var self = this, name2 = "obj." + name;
            if (sys.isBaseObj(obj)) {
                obj.objEvents.addOnDisposed(function () {
                    bootstrapper_6.unregisterObject(self, name2);
                }, self.uniqueID);
            }
            var objMap = bootstrapper_6.registerObject(self, name2, obj);
            if (this._objMaps.indexOf(objMap) < 0) {
                this._objMaps.push(objMap);
            }
        };
        Application.prototype.getObject = function (name) {
            var name2 = "obj." + name, res = bootstrapper_6.getObject(this, name2);
            return res;
        };
        Application.prototype.startUp = function (onStartUp) {
            var self = this, deferred = createDeferred();
            if (this._appState !== 0) {
                return deferred.reject(new Error("Application can not be started when state != AppState.None"));
            }
            var fnStartApp = function () {
                try {
                    self._initAppModules();
                    var onStartupRes1 = self.onStartUp();
                    var setupPromise1 = void 0;
                    if (isThenable(onStartupRes1)) {
                        setupPromise1 = onStartupRes1;
                    }
                    else {
                        setupPromise1 = createDeferred().resolve();
                    }
                    var promise_1 = setupPromise1.then(function () {
                        self.objEvents.raise("startup", {});
                        var onStartupRes2 = (!!onStartUp) ? onStartUp.apply(self, [self]) : null;
                        var setupPromise2;
                        if (isThenable(onStartupRes2)) {
                            setupPromise2 = onStartupRes2.then(function () {
                                return self._dataBindingService.setUpBindings();
                            }, function (err) {
                                deferred.reject(err);
                                throw err;
                            });
                        }
                        else {
                            setupPromise2 = self._dataBindingService.setUpBindings();
                        }
                        return setupPromise2;
                    });
                    promise_1.then(function () {
                        deferred.resolve(self);
                    }, function (err) {
                        deferred.reject(err);
                    });
                }
                catch (ex) {
                    deferred.reject(ex);
                }
            };
            this._appState = 1;
            var promise = deferred.promise().then(function () {
                self._appState = 2;
                return self;
            }, function (err) {
                self._appState = 4;
                throw err;
            });
            try {
                if (!!onStartUp && !utils.check.isFunc(onStartUp)) {
                    throw new Error(ERRS.ERR_APP_SETUP_INVALID);
                }
                boot.templateLoader.waitForNotLoading(fnStartApp, null);
            }
            catch (ex) {
                deferred.reject(ex);
            }
            return promise;
        };
        Application.prototype.loadTemplates = function (url) {
            return boot.templateLoader.loadTemplatesAsync(this, function () { return http.getAjax(url); });
        };
        Application.prototype.registerTemplateLoader = function (name, loader) {
            var fn = memoize(function () {
                return loader().then(function (html) { return { doc: dom.getDocFragment(html), required: null }; });
            });
            tloader_2.registerLoader(this, name, fn);
        };
        Application.prototype.registerTemplateById = function (name, templateId) {
            var fn = memoize(function () {
                var el = dom.queryOne(doc, "#" + templateId);
                if (!el) {
                    throw new Error(format(ERRS.ERR_TEMPLATE_ID_INVALID, templateId));
                }
                return resolve({ doc: dom.getDocFragment(el.innerHTML), required: null }, true);
            });
            tloader_2.registerLoader(this, name, fn);
        };
        Application.prototype.getTemplateLoader = function (name) {
            var res = boot.templateLoader.getTemplateLoader(this._getInternal(), name);
            if (!res) {
                res = function () { return reject(new Error(format(ERRS.ERR_TEMPLATE_NOTREGISTERED, name))); };
            }
            return res;
        };
        Application.prototype.registerTemplateGroup = function (name, url) {
            var group = {
                name: name,
                url: url,
                loader: function () {
                    return http.getAjax(group.url);
                },
                promise: null,
                owner: this
            };
            tloader_2.registerTemplateGroup(this, name, group);
        };
        Application.prototype.getOptions = function (name) {
            var res = bootstrapper_6.getOptions(this, name);
            if (!res) {
                res = bootstrapper_6.getOptions(boot, name);
            }
            if (!res) {
                throw new Error(format(ERRS.ERR_OPTIONS_NOTREGISTERED, name));
            }
            return res;
        };
        Application.prototype.toString = function () {
            return "Application: " + this.appName;
        };
        Object.defineProperty(Application.prototype, "uniqueID", {
            get: function () {
                return this._uniqueID;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Application.prototype, "options", {
            get: function () {
                return this._options;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Application.prototype, "appName", {
            get: function () {
                return this._appName;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Application.prototype, "appRoot", {
            get: function () {
                return (!this._options || !this._options.appRoot) ? doc : this._options.appRoot;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Application.prototype, "viewFactory", {
            get: function () {
                return this._viewFactory;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Application.prototype, "UC", {
            get: function () {
                return this._UC;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Application.prototype, "app", {
            get: function () {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        return Application;
    }(jriapp_shared_20.BaseObject));
    exports.Application = Application;
});
define("jriapp", ["require", "exports", "jriapp/bootstrapper", "jriapp_shared", "jriapp_shared/collection/const", "jriapp_shared/collection/int", "jriapp_shared/utils/jsonbag", "jriapp_shared/utils/promise", "jriapp/consts", "jriapp/utils/dom", "jriapp/utils/viewchecks", "jriapp/converter", "jriapp/bootstrapper", "jriapp/binding", "jriapp/template", "jriapp/utils/lifetime", "jriapp/utils/propwatcher", "jriapp/mvvm", "jriapp/app"], function (require, exports, bootstrapper_7, jriapp_shared_21, const_1, int_5, jsonbag_1, promise_2, consts_1, dom_7, viewchecks_3, converter_1, bootstrapper_8, binding_2, template_1, lifetime_2, propwatcher_1, mvvm_1, app_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VERSION = exports.Application = exports.Command = exports.BaseCommand = exports.ViewModel = exports.PropWatcher = exports.LifeTimeScope = exports.createTemplate = exports.Binding = exports.selectableProviderWeakMap = exports.subscribeWeakMap = exports.bootstrapper = exports.BaseConverter = exports.ViewChecks = exports.DOM = exports.SubscribeFlags = exports.BindTo = exports.BINDING_MODE = exports.KEYS = exports.StatefulPromise = void 0;
    __exportStar(jriapp_shared_21, exports);
    __exportStar(const_1, exports);
    __exportStar(int_5, exports);
    __exportStar(jsonbag_1, exports);
    Object.defineProperty(exports, "StatefulPromise", { enumerable: true, get: function () { return promise_2.StatefulPromise; } });
    Object.defineProperty(exports, "KEYS", { enumerable: true, get: function () { return consts_1.KEYS; } });
    Object.defineProperty(exports, "BINDING_MODE", { enumerable: true, get: function () { return consts_1.BINDING_MODE; } });
    Object.defineProperty(exports, "BindTo", { enumerable: true, get: function () { return consts_1.BindTo; } });
    Object.defineProperty(exports, "SubscribeFlags", { enumerable: true, get: function () { return consts_1.SubscribeFlags; } });
    Object.defineProperty(exports, "DOM", { enumerable: true, get: function () { return dom_7.DomUtils; } });
    Object.defineProperty(exports, "ViewChecks", { enumerable: true, get: function () { return viewchecks_3.ViewChecks; } });
    Object.defineProperty(exports, "BaseConverter", { enumerable: true, get: function () { return converter_1.BaseConverter; } });
    Object.defineProperty(exports, "bootstrapper", { enumerable: true, get: function () { return bootstrapper_8.bootstrapper; } });
    Object.defineProperty(exports, "subscribeWeakMap", { enumerable: true, get: function () { return bootstrapper_8.subscribeWeakMap; } });
    Object.defineProperty(exports, "selectableProviderWeakMap", { enumerable: true, get: function () { return bootstrapper_8.selectableProviderWeakMap; } });
    Object.defineProperty(exports, "Binding", { enumerable: true, get: function () { return binding_2.Binding; } });
    Object.defineProperty(exports, "createTemplate", { enumerable: true, get: function () { return template_1.createTemplate; } });
    Object.defineProperty(exports, "LifeTimeScope", { enumerable: true, get: function () { return lifetime_2.LifeTimeScope; } });
    Object.defineProperty(exports, "PropWatcher", { enumerable: true, get: function () { return propwatcher_1.PropWatcher; } });
    Object.defineProperty(exports, "ViewModel", { enumerable: true, get: function () { return mvvm_1.ViewModel; } });
    Object.defineProperty(exports, "BaseCommand", { enumerable: true, get: function () { return mvvm_1.BaseCommand; } });
    Object.defineProperty(exports, "Command", { enumerable: true, get: function () { return mvvm_1.Command; } });
    Object.defineProperty(exports, "Application", { enumerable: true, get: function () { return app_1.Application; } });
    exports.VERSION = "4.0.0";
    bootstrapper_7.Bootstrapper._initFramework();
});

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
define("jriapp_db/const", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DATA_OPER = exports.DELETE_ACTION = exports.REFRESH_MODE = exports.FLAGS = void 0;
    var FLAGS;
    (function (FLAGS) {
        FLAGS[FLAGS["None"] = 0] = "None";
        FLAGS[FLAGS["Changed"] = 1] = "Changed";
        FLAGS[FLAGS["Setted"] = 2] = "Setted";
        FLAGS[FLAGS["Refreshed"] = 4] = "Refreshed";
    })(FLAGS = exports.FLAGS || (exports.FLAGS = {}));
    var REFRESH_MODE;
    (function (REFRESH_MODE) {
        REFRESH_MODE[REFRESH_MODE["NONE"] = 0] = "NONE";
        REFRESH_MODE[REFRESH_MODE["RefreshCurrent"] = 1] = "RefreshCurrent";
        REFRESH_MODE[REFRESH_MODE["MergeIntoCurrent"] = 2] = "MergeIntoCurrent";
        REFRESH_MODE[REFRESH_MODE["CommitChanges"] = 3] = "CommitChanges";
    })(REFRESH_MODE = exports.REFRESH_MODE || (exports.REFRESH_MODE = {}));
    var DELETE_ACTION;
    (function (DELETE_ACTION) {
        DELETE_ACTION[DELETE_ACTION["NoAction"] = 0] = "NoAction";
        DELETE_ACTION[DELETE_ACTION["Cascade"] = 1] = "Cascade";
        DELETE_ACTION[DELETE_ACTION["SetNulls"] = 2] = "SetNulls";
    })(DELETE_ACTION = exports.DELETE_ACTION || (exports.DELETE_ACTION = {}));
    var DATA_OPER;
    (function (DATA_OPER) {
        DATA_OPER[DATA_OPER["None"] = 0] = "None";
        DATA_OPER[DATA_OPER["Submit"] = 1] = "Submit";
        DATA_OPER[DATA_OPER["Query"] = 2] = "Query";
        DATA_OPER[DATA_OPER["Invoke"] = 3] = "Invoke";
        DATA_OPER[DATA_OPER["Refresh"] = 4] = "Refresh";
        DATA_OPER[DATA_OPER["Init"] = 5] = "Init";
    })(DATA_OPER = exports.DATA_OPER || (exports.DATA_OPER = {}));
});
define("jriapp_db/datacache", ["require", "exports", "jriapp_shared"], function (require, exports, jriapp_shared_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataCache = void 0;
    var utils = jriapp_shared_1.Utils, isNt = utils.check.isNt, _a = utils.core, forEach = _a.forEach, Indexer = _a.Indexer;
    var DataCache = (function (_super) {
        __extends(DataCache, _super);
        function DataCache(query) {
            var _this = _super.call(this) || this;
            _this._query = query;
            _this._pages = Indexer();
            _this._itemsByKey = Indexer();
            _this._totalCount = 0;
            return _this;
        }
        DataCache.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this.clear();
            _super.prototype.dispose.call(this);
        };
        DataCache.prototype._getPrevPageIndex = function (currentPageIndex) {
            var pageIndex = -1;
            forEach(this._pages, function (_, page) {
                var cachePageIndex = page.pageIndex;
                if (cachePageIndex > pageIndex && cachePageIndex < currentPageIndex) {
                    pageIndex = cachePageIndex;
                }
            });
            return pageIndex;
        };
        DataCache.prototype.getNextRange = function (pageIndex) {
            var half = Math.floor(((this.loadPageCount - 1) / 2));
            var above = (pageIndex + half) + ((this.loadPageCount - 1) % 2);
            var below = (pageIndex - half);
            var prev = this._getPrevPageIndex(pageIndex);
            if (below < 0) {
                above += (0 - below);
                below = 0;
            }
            if (below <= prev) {
                above += (prev - below + 1);
                below += (prev - below + 1);
            }
            if (this._pageCount > this.loadPageCount && above > (this._pageCount - 1)) {
                below -= (above - (this._pageCount - 1));
                if (below < 0) {
                    below = 0;
                }
                above = this._pageCount - 1;
            }
            if (below <= prev) {
                above += (prev - below + 1);
                below += (prev - below + 1);
            }
            var cnt = above - below + 1;
            if (cnt < this.loadPageCount) {
                above += this.loadPageCount - cnt;
                cnt = above - below + 1;
            }
            var start = below;
            var end = above;
            return { start: start, end: end, cnt: cnt };
        };
        DataCache.prototype.clear = function () {
            this._pages = Indexer();
            this._itemsByKey = Indexer();
        };
        DataCache.prototype.getPage = function (pageIndex) {
            return this._pages[pageIndex];
        };
        DataCache.prototype.getPageItems = function (pageIndex) {
            var page = this.getPage(pageIndex);
            if (!page) {
                return [];
            }
            var dbSet = this._query.dbSet, keyMap = this._itemsByKey;
            var res = page.keys.map(function (key) {
                var kv = keyMap[key];
                return (!kv) ? null : dbSet.createEntityFromObj(kv.val, kv.key);
            }).filter(function (item) { return !!item; });
            return res;
        };
        DataCache.prototype.setPageItems = function (pageIndex, items) {
            this.deletePage(pageIndex);
            if (items.length === 0) {
                return;
            }
            var kvs = items.map(function (item) { return { key: item._key, val: item._aspect.vals }; });
            var page = { keys: kvs.map(function (kv) { return kv.key; }), pageIndex: pageIndex };
            this._pages[pageIndex] = page;
            var keyMap = this._itemsByKey, len = kvs.length;
            for (var j = 0; j < len; j += 1) {
                var kv = kvs[j];
                keyMap[kv.key] = kv;
            }
        };
        DataCache.prototype.fill = function (startIndex, items) {
            var len = items.length, pageSize = this.pageSize;
            for (var i = 0; i < this.loadPageCount; i += 1) {
                var pageItems = [], pgstart = (i * pageSize);
                if (pgstart >= len) {
                    break;
                }
                for (var j = 0; j < pageSize; j += 1) {
                    var k = pgstart + j;
                    if (k < len) {
                        pageItems.push(items[k]);
                    }
                    else {
                        break;
                    }
                }
                this.setPageItems(startIndex + i, pageItems);
            }
        };
        DataCache.prototype.deletePage = function (pageIndex) {
            var page = this.getPage(pageIndex);
            if (!page) {
                return;
            }
            var keys = page.keys;
            for (var j = 0; j < keys.length; j += 1) {
                delete this._itemsByKey[keys[j]];
            }
            delete this._pages[pageIndex];
        };
        DataCache.prototype.hasPage = function (pageIndex) {
            return !!this.getPage(pageIndex);
        };
        DataCache.prototype.getItemByKey = function (key) {
            var kv = this._itemsByKey[key];
            if (!kv) {
                return null;
            }
            return this._query.dbSet.createEntityFromObj(kv.val, kv.key);
        };
        DataCache.prototype.toString = function () {
            return "DataCache";
        };
        Object.defineProperty(DataCache.prototype, "_pageCount", {
            get: function () {
                var rowCount = this.totalCount, rowPerPage = this.pageSize;
                var result = 0;
                if ((rowCount === 0) || (rowPerPage === 0)) {
                    return result;
                }
                if ((rowCount % rowPerPage) === 0) {
                    result = (rowCount / rowPerPage);
                }
                else {
                    result = (rowCount / rowPerPage);
                    result = Math.floor(result) + 1;
                }
                return result;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataCache.prototype, "pageSize", {
            get: function () {
                return this._query.pageSize;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataCache.prototype, "loadPageCount", {
            get: function () {
                return this._query.loadPageCount;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataCache.prototype, "totalCount", {
            get: function () {
                return this._totalCount;
            },
            set: function (v) {
                if (isNt(v)) {
                    v = 0;
                }
                if (v !== this._totalCount) {
                    this._totalCount = v;
                    this.objEvents.raiseProp("totalCount");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataCache.prototype, "cacheSize", {
            get: function () {
                var indexes = Object.keys(this._pages);
                return indexes.length;
            },
            enumerable: false,
            configurable: true
        });
        return DataCache;
    }(jriapp_shared_1.BaseObject));
    exports.DataCache = DataCache;
});
define("jriapp_db/dataquery", ["require", "exports", "jriapp_shared", "jriapp_shared/collection/utils", "jriapp_db/datacache"], function (require, exports, jriapp_shared_2, utils_1, datacache_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataQuery = void 0;
    var utils = jriapp_shared_2.Utils, _a = utils.check, isNt = _a.isNt, isArray = _a.isArray, isDate = _a.isDate, format = utils.str.format, Indexer = utils.core.Indexer, arrHelper = utils.arr, valUtils = utils_1.ValueUtils;
    var DataQuery = (function (_super) {
        __extends(DataQuery, _super);
        function DataQuery(dbSet, queryInfo) {
            var _this = _super.call(this) || this;
            var self = _this;
            _this._dbSet = dbSet;
            _this._queryInfo = queryInfo;
            _this._filterInfo = { filterItems: [] };
            _this._sortInfo = { sortItems: [] };
            _this._isIncludeTotalCount = true;
            _this._isClearPrevData = true;
            _this._pageSize = dbSet.pageSize;
            _this._pageIndex = dbSet.pageIndex;
            _this._params = Indexer();
            _this._loadPageCount = 1;
            _this._isClearCacheOnEveryLoad = true;
            _this._isForAppend = false;
            _this._dataCache = null;
            _this._cacheInvalidated = false;
            _this._isPagingEnabled = dbSet.isPagingEnabled;
            _this._internal = {
                clearCache: function () {
                    self._clearCache();
                },
                getCache: function () {
                    return self._getCache();
                },
                isPageCached: function (pageIndex) {
                    return self._isPageCached(pageIndex);
                },
                updateCache: function (pageIndex, items) {
                    self._updateCache(pageIndex, items);
                },
                getQueryInfo: function () {
                    return self._queryInfo;
                }
            };
            return _this;
        }
        DataQuery.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._clearCache();
            _super.prototype.dispose.call(this);
        };
        DataQuery.prototype._addSort = function (fieldName, sortOrder) {
            var ord = !isNt(sortOrder) ? sortOrder : 0;
            var sortItem = { fieldName: fieldName, sortOrder: ord };
            this._sortInfo.sortItems.push(sortItem);
            this._cacheInvalidated = true;
        };
        DataQuery.prototype._addFilterItem = function (fieldName, operand, value, checkFieldName) {
            if (checkFieldName === void 0) { checkFieldName = true; }
            var fkind = 0, vals = [];
            var stz = this.serverTimezone;
            if (!isArray(value)) {
                vals = [value];
            }
            else {
                vals = value;
            }
            var tmpVals = arrHelper.clone(vals);
            var fld = null;
            if (checkFieldName) {
                fld = this.getFieldInfo(fieldName);
            }
            if (!!fld) {
                vals = tmpVals.map(function (v) { return valUtils.stringifyValue(v, fld.dateConversion, fld.dataType, stz); });
            }
            else {
                vals = tmpVals.map(function (v) { return valUtils.stringifyValue(v, 0, isDate(v) ? 7 : 0, stz); });
            }
            switch (operand) {
                case 0:
                case 9:
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 6:
                case 8:
                    fkind = operand;
                    break;
                case 1:
                    fkind = operand;
                    if (value.length !== 2) {
                        throw new Error(jriapp_shared_2.LocaleERRS.ERR_QUERY_BETWEEN);
                    }
                    break;
                default:
                    throw new Error(format(jriapp_shared_2.LocaleERRS.ERR_QUERY_OPERATOR_INVALID, operand));
            }
            var filterItem = { fieldName: fieldName, kind: fkind, values: vals };
            this._filterInfo.filterItems.push(filterItem);
            this._cacheInvalidated = true;
        };
        DataQuery.prototype._resetCacheInvalidated = function () {
            this._cacheInvalidated = false;
        };
        DataQuery.prototype._clearCache = function () {
            if (!!this._dataCache) {
                this._dataCache.dispose();
                this._dataCache = null;
            }
            this._resetCacheInvalidated();
        };
        DataQuery.prototype._getCache = function () {
            if (!this._dataCache) {
                this._dataCache = new datacache_1.DataCache(this);
            }
            return this._dataCache;
        };
        DataQuery.prototype._isPageCached = function (pageIndex) {
            if (!this._dataCache) {
                return false;
            }
            return this._dataCache.hasPage(pageIndex);
        };
        DataQuery.prototype._updateCache = function (pageIndex, items) {
            var cache = this._dataCache;
            if (!cache) {
                return;
            }
            cache.setPageItems(pageIndex, items);
        };
        DataQuery.prototype._getInternal = function () {
            return this._internal;
        };
        DataQuery.prototype.where = function (fieldName, operand, value, checkFieldName) {
            if (checkFieldName === void 0) { checkFieldName = true; }
            this._addFilterItem(fieldName, operand, value, checkFieldName);
            return this;
        };
        DataQuery.prototype.and = function (fieldName, operand, value, checkFieldName) {
            if (checkFieldName === void 0) { checkFieldName = true; }
            this._addFilterItem(fieldName, operand, value, checkFieldName);
            return this;
        };
        DataQuery.prototype.orderBy = function (fieldName, sortOrder) {
            this._addSort(fieldName, sortOrder);
            return this;
        };
        DataQuery.prototype.thenBy = function (fieldName, sortOrder) {
            this._addSort(fieldName, sortOrder);
            return this;
        };
        DataQuery.prototype.clearSort = function () {
            this._sortInfo.sortItems = [];
            this._cacheInvalidated = true;
            return this;
        };
        DataQuery.prototype.clearFilter = function () {
            this._filterInfo.filterItems = [];
            this._cacheInvalidated = true;
            return this;
        };
        DataQuery.prototype.clearParams = function () {
            this._params = Indexer();
            this._cacheInvalidated = true;
            return this;
        };
        DataQuery.prototype.getFieldInfo = function (fieldName) {
            return this._dbSet.getFieldInfo(fieldName);
        };
        DataQuery.prototype.getFieldNames = function () {
            return this._dbSet.getFieldNames();
        };
        DataQuery.prototype.load = function () {
            return this.dbSet.dbContext.load(this);
        };
        DataQuery.prototype.toString = function () {
            return "DataQuery";
        };
        Object.defineProperty(DataQuery.prototype, "serverTimezone", {
            get: function () {
                return this._dbSet.dbContext.serverTimezone;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataQuery.prototype, "dbSet", {
            get: function () {
                return this._dbSet;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataQuery.prototype, "dbSetName", {
            get: function () {
                return this._dbSet.dbSetName;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataQuery.prototype, "queryName", {
            get: function () {
                return this._queryInfo.methodName;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataQuery.prototype, "filterInfo", {
            get: function () {
                return this._filterInfo;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataQuery.prototype, "sortInfo", {
            get: function () {
                return this._sortInfo;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataQuery.prototype, "isIncludeTotalCount", {
            get: function () {
                return this._isIncludeTotalCount && !this.isForAppend;
            },
            set: function (v) {
                this._isIncludeTotalCount = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataQuery.prototype, "isClearPrevData", {
            get: function () {
                return this._isClearPrevData && !this.isForAppend;
            },
            set: function (v) {
                this._isClearPrevData = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataQuery.prototype, "pageSize", {
            get: function () {
                return this._pageSize;
            },
            set: function (v) {
                if (this._pageSize !== v) {
                    this._pageSize = v;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataQuery.prototype, "pageIndex", {
            get: function () {
                return this._pageIndex;
            },
            set: function (v) {
                if (this._pageIndex !== v) {
                    this._pageIndex = v;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataQuery.prototype, "params", {
            get: function () {
                return this._params;
            },
            set: function (v) {
                if (this._params !== v) {
                    this._params = v;
                    this._cacheInvalidated = true;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataQuery.prototype, "isPagingEnabled", {
            get: function () {
                return this._isPagingEnabled && !this.isForAppend;
            },
            set: function (v) {
                this._isPagingEnabled = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataQuery.prototype, "loadPageCount", {
            get: function () {
                return this.isForAppend ? 1 : this._loadPageCount;
            },
            set: function (v) {
                if (v < 1) {
                    v = 1;
                }
                if (this._loadPageCount !== v) {
                    this._loadPageCount = v;
                    if (v === 1 || this.isForAppend) {
                        this._clearCache();
                    }
                    this.objEvents.raiseProp("loadPageCount");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataQuery.prototype, "isClearCacheOnEveryLoad", {
            get: function () {
                return this._isClearCacheOnEveryLoad || this.isForAppend;
            },
            set: function (v) {
                if (this._isClearCacheOnEveryLoad !== v) {
                    this._isClearCacheOnEveryLoad = v;
                    this.objEvents.raiseProp("isClearCacheOnEveryLoad");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataQuery.prototype, "isForAppend", {
            get: function () {
                return this._isForAppend;
            },
            set: function (v) {
                if (this._isForAppend !== v) {
                    this._isForAppend = v;
                    this.objEvents.raiseProp("isForAppend");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataQuery.prototype, "isCacheValid", {
            get: function () {
                return !!this._dataCache && !this._cacheInvalidated && !this.isForAppend;
            },
            enumerable: false,
            configurable: true
        });
        return DataQuery;
    }(jriapp_shared_2.BaseObject));
    exports.DataQuery = DataQuery;
});
define("jriapp_db/dbset", ["require", "exports", "jriapp_shared", "jriapp_shared/collection/base", "jriapp_shared/collection/utils", "jriapp_db/dataquery", "jriapp_db/entity_aspect"], function (require, exports, jriapp_shared_3, base_1, utils_2, dataquery_1, entity_aspect_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DbSet = void 0;
    var utils = jriapp_shared_3.Utils, _a = utils.check, isArray = _a.isArray, isNt = _a.isNt, format = utils.str.format, _b = utils.core, getValue = _b.getValue, setValue = _b.setValue, merge = _b.merge, forEach = _b.forEach, Indexer = _b.Indexer, ERROR = utils.err, parseValue = utils_2.ValueUtils.parseValue, stringifyValue = utils_2.ValueUtils.stringifyValue, getPKFields = utils_2.CollUtils.getPKFields, walkField = utils_2.CollUtils.walkField, walkFields = utils_2.CollUtils.walkFields, objToVals = utils_2.CollUtils.objToVals, initVals = utils_2.CollUtils.initVals, getObjectField = utils_2.CollUtils.getObjectField;
    function doFieldDependences(dbSet, info) {
        if (!info.dependentOn) {
            return;
        }
        var deps = info.dependentOn.split(",");
        for (var _i = 0, deps_1 = deps; _i < deps_1.length; _i++) {
            var depOn = deps_1[_i];
            var depOnFld = dbSet.getFieldInfo(depOn);
            if (!depOnFld) {
                throw new Error(format(jriapp_shared_3.LocaleERRS.ERR_CALC_FIELD_DEFINE, depOn));
            }
            if (info === depOnFld) {
                throw new Error(format(jriapp_shared_3.LocaleERRS.ERR_CALC_FIELD_SELF_DEPEND, depOn));
            }
            if (depOnFld.dependents.indexOf(info.fullName) < 0) {
                depOnFld.dependents.push(info.fullName);
            }
        }
    }
    var DBSET_EVENTS;
    (function (DBSET_EVENTS) {
        DBSET_EVENTS["loaded"] = "dbset_loaded";
    })(DBSET_EVENTS || (DBSET_EVENTS = {}));
    var DbSet = (function (_super) {
        __extends(DbSet, _super);
        function DbSet(opts) {
            var _this = _super.call(this) || this;
            var self = _this, dbContext = opts.dbContext, dbSetInfo = opts.dbSetInfo, fieldInfos = dbSetInfo.fieldInfos;
            _this._dbContext = dbContext;
            _this._dbSetName = dbSetInfo.dbSetName;
            _this.options.enablePaging = dbSetInfo.enablePaging;
            _this.options.pageSize = dbSetInfo.pageSize;
            _this._query = null;
            _this._isSubmitOnDelete = false;
            _this._navfldMap = Indexer();
            _this._calcfldMap = Indexer();
            _this._fieldMap = Indexer();
            _this._fieldInfos = fieldInfos;
            _this._pkFields = getPKFields(fieldInfos);
            _this._isPageFilled = false;
            _this._newKey = 0;
            _this._pageDebounce = new jriapp_shared_3.Debounce(400);
            _this._trackAssoc = Indexer();
            _this._trackAssocMap = Indexer();
            _this._childAssocMap = Indexer();
            _this._parentAssocMap = Indexer();
            _this._changeCount = 0;
            _this._changeCache = Indexer();
            _this._ignorePageChanged = false;
            for (var _i = 0, fieldInfos_1 = fieldInfos; _i < fieldInfos_1.length; _i++) {
                var f = fieldInfos_1[_i];
                self._fieldMap[f.fieldName] = f;
                walkField(f, function (fld, fullName) {
                    fld.dependents = [];
                    fld.fullName = fullName;
                });
            }
            walkFields(fieldInfos, function (fld, fullName) {
                if (fld.fieldType === 3) {
                    setValue(self._navfldMap, fullName, self._doNavigationField(opts, fld), true);
                }
                else if (fld.fieldType === 2) {
                    setValue(self._calcfldMap, fullName, self._doCalculatedField(opts, fld), true);
                }
            });
            self._mapAssocFields();
            var extraInternal = {
                getCalcFieldVal: function (fieldName, item) {
                    return self._getCalcFieldVal(fieldName, item);
                },
                getNavFieldVal: function (fieldName, item) {
                    return self._getNavFieldVal(fieldName, item);
                },
                setNavFieldVal: function (fieldName, item, value) {
                    self._setNavFieldVal(fieldName, item, value);
                },
                beforeLoad: function (query, oldQuery) {
                    self._beforeLoad(query, oldQuery);
                },
                updatePermissions: function (perms) {
                    self._updatePermissions(perms);
                },
                getChildToParentNames: function (childFieldName) {
                    return self._getChildToParentNames(childFieldName);
                },
                fillFromService: function (info) {
                    return self._fillFromService(info);
                },
                fillFromCache: function (info) {
                    return self._fillFromCache(info);
                },
                commitChanges: function (rows) {
                    self._commitChanges(rows);
                },
                setItemInvalid: function (row) {
                    return self._setItemInvalid(row);
                },
                getChanges: function () {
                    return self._getChanges();
                },
                getTrackAssocInfo: function () {
                    return self._getTrackAssocInfo();
                },
                addToChanged: function (item) {
                    self._addToChanged(item);
                },
                removeFromChanged: function (key) {
                    self._removeFromChanged(key);
                },
                onItemStatusChanged: function (item, oldStatus) {
                    self._onItemStatusChanged(item, oldStatus);
                },
                setQuery: function (query) {
                    self._setQuery(query);
                }
            };
            var internal = _this._getInternal();
            _this._setInternal(merge(extraInternal, internal));
            _this.dbContext.objEvents.onProp("isSubmiting", function () {
                self.objEvents.raiseProp("isBusy");
            }, _this.dbSetName);
            _this.objEvents.onProp("isLoading", function () {
                self.objEvents.raiseProp("isBusy");
            });
            return _this;
        }
        DbSet.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._pageDebounce.dispose();
            this._pageDebounce = null;
            this.clear();
            var dbContext = this.dbContext;
            this._dbContext = null;
            if (!!dbContext) {
                dbContext.objEvents.offNS(this.dbSetName);
            }
            this._navfldMap = Indexer();
            this._calcfldMap = Indexer();
            _super.prototype.dispose.call(this);
        };
        DbSet.prototype.handleError = function (error, source) {
            return (!this._dbContext) ? _super.prototype.handleError.call(this, error, source) : this._dbContext.handleError(error, source);
        };
        DbSet.prototype._mapAssocFields = function () {
            var trackAssoc = this._trackAssoc, tasKeys = Object.keys(trackAssoc), trackAssocMap = this._trackAssocMap;
            var len = tasKeys.length;
            for (var i = 0; i < len; i += 1) {
                var assoc = trackAssoc[tasKeys[i]], len2 = assoc.fieldRels.length;
                for (var j = 0; j < len2; j += 1) {
                    var frel = assoc.fieldRels[j];
                    if (!isArray(trackAssocMap[frel.childField])) {
                        trackAssocMap[frel.childField] = [assoc.childToParentName];
                    }
                    else {
                        trackAssocMap[frel.childField].push(assoc.childToParentName);
                    }
                }
            }
        };
        DbSet.prototype._doNavigationField = function (opts, fieldInfo) {
            var self = this, result = {
                getFunc: function (_item) {
                    throw new Error("Navigation get function for the field: " + fieldInfo.fieldName + " is not implemented");
                },
                setFunc: function (_v, _item) {
                    throw new Error("Navigation set function for the field: " + fieldInfo.fieldName + " is not implemented");
                }
            };
            var isChild = true, assocs = opts.childAssoc.filter(function (a) {
                return a.childToParentName === fieldInfo.fieldName;
            });
            if (assocs.length === 0) {
                assocs = opts.parentAssoc.filter(function (a) {
                    return a.parentToChildrenName === fieldInfo.fieldName;
                });
                isChild = false;
            }
            if (assocs.length !== 1) {
                throw new Error(format(jriapp_shared_3.LocaleERRS.ERR_PARAM_INVALID_TYPE, "assocs", "Array"));
            }
            var assocName = assocs[0].name;
            fieldInfo.isReadOnly = true;
            if (isChild) {
                fieldInfo.isReadOnly = false;
                self._childAssocMap[assocs[0].childToParentName] = assocs[0];
                for (var _i = 0, _a = assocs[0].fieldRels; _i < _a.length; _i++) {
                    var frel = _a[_i];
                    var childFld = self.getFieldInfo(frel.childField);
                    if (!fieldInfo.isReadOnly && (childFld.isReadOnly && !childFld.allowClientDefault)) {
                        fieldInfo.isReadOnly = true;
                    }
                }
                result.getFunc = function (item) {
                    var assoc = self.dbContext.getAssociation(assocName);
                    return assoc.getParentItem(item);
                };
                if (!fieldInfo.isReadOnly) {
                    self._trackAssoc[assocName] = assocs[0];
                    result.setFunc = function (v, item) {
                        var assoc = self.dbContext.getAssociation(assocName);
                        if (!!v) {
                            if ((v._aspect.dbSetName !== assoc.parentDS.dbSetName)) {
                                throw new Error(format(jriapp_shared_3.LocaleERRS.ERR_PARAM_INVALID_TYPE, "value", assoc.parentDS.dbSetName));
                            }
                            if (v._aspect.isNew) {
                                item._aspect._setFieldVal(fieldInfo.fieldName, v._key);
                            }
                            else {
                                var len = assoc.childFldInfos.length;
                                for (var i = 0; i < len; i += 1) {
                                    item[assoc.childFldInfos[i].fieldName] = v[assoc.parentFldInfos[i].fieldName];
                                }
                            }
                        }
                        else {
                            var oldKey = item._aspect._getFieldVal(fieldInfo.fieldName);
                            if (!!oldKey) {
                                item._aspect._setFieldVal(fieldInfo.fieldName, null);
                            }
                            var len = assoc.childFldInfos.length;
                            for (var i = 0; i < len; i += 1) {
                                item[assoc.childFldInfos[i].fieldName] = null;
                            }
                        }
                    };
                }
            }
            else {
                self._parentAssocMap[assocs[0].parentToChildrenName] = assocs[0];
                result.getFunc = function (item) {
                    return self.dbContext.getAssociation(assocName).getChildItems(item);
                };
            }
            return result;
        };
        DbSet.prototype._doCalculatedField = function (_opts, fieldInfo) {
            var self = this, result = {
                getFunc: function (_item) { throw new Error(format("Calculated field:'{0}' is not initialized", fieldInfo.fieldName)); }
            };
            fieldInfo.isReadOnly = true;
            if (!!fieldInfo.dependentOn) {
                doFieldDependences(self, fieldInfo);
            }
            return result;
        };
        DbSet.prototype._refreshValues = function (path, item, values, names, rm) {
            var self = this, dependents = utils.core.Indexer();
            values.forEach(function (value, index) {
                var name = names[index], fieldName = path + name.n, fld = self.getFieldInfo(fieldName);
                if (!fld) {
                    throw new Error(format(jriapp_shared_3.LocaleERRS.ERR_DBSET_INVALID_FIELDNAME, self.dbSetName, fieldName));
                }
                if (fld.fieldType === 5) {
                    self._refreshValues(fieldName + ".", item, value, name.p, rm);
                }
                else {
                    item._aspect._refreshValue(value, fieldName, rm, dependents);
                }
            });
            item._aspect._updateDependents(dependents);
        };
        DbSet.prototype._applyFieldVals = function (vals, path, values, names) {
            var self = this, stz = self.dbContext.serverTimezone;
            values.forEach(function (value, index) {
                var name = names[index], fieldName = path + name.n, fld = self.getFieldInfo(fieldName);
                if (!fld) {
                    throw new Error(format(jriapp_shared_3.LocaleERRS.ERR_DBSET_INVALID_FIELDNAME, self.dbSetName, fieldName));
                }
                if (fld.fieldType === 5) {
                    self._applyFieldVals(vals, fieldName + ".", value, name.p);
                }
                else {
                    var val = parseValue(value, fld.dataType, fld.dateConversion, stz);
                    setValue(vals, fieldName, val, false);
                }
            });
        };
        DbSet.prototype._getNewKey = function () {
            var key = "clkey_" + this._newKey;
            this._newKey += 1;
            return key;
        };
        DbSet.prototype._onItemAdded = function (item) {
            _super.prototype._onItemAdded.call(this, item);
            this._addToChanged(item);
        };
        DbSet.prototype._createNew = function () {
            return this.createEntityFromData(null, null);
        };
        DbSet.prototype._clear = function (reason, oper) {
            try {
                _super.prototype._clear.call(this, reason, oper);
            }
            finally {
                this._newKey = 0;
                this._isPageFilled = false;
            }
        };
        DbSet.prototype._onPageChanging = function () {
            var res = _super.prototype._onPageChanging.call(this);
            if (!res) {
                return res;
            }
            this.rejectChanges();
            var query = this.query;
            if (!!query && query.loadPageCount > 1 && this._isPageFilled) {
                query._getInternal().updateCache(this.pageIndex, this.items);
            }
            return res;
        };
        DbSet.prototype._onPageChanged = function () {
            var self = this;
            this._isPageFilled = false;
            this.cancelEdit();
            _super.prototype._onPageChanged.call(this);
            if (this._ignorePageChanged) {
                return;
            }
            self.query.pageIndex = self.pageIndex;
            self._pageDebounce.enque(function () {
                self.dbContext._getInternal().load(self.query, 1);
            });
        };
        DbSet.prototype._onPageSizeChanged = function () {
            _super.prototype._onPageSizeChanged.call(this);
            if (!!this._query) {
                this._query.pageSize = this.pageSize;
            }
        };
        DbSet.prototype._defineCalculatedField = function (fullName, getFunc) {
            var calcDef = getValue(this._calcfldMap, fullName);
            if (!calcDef) {
                throw new Error(format(jriapp_shared_3.LocaleERRS.ERR_PARAM_INVALID, "calculated fieldName", fullName));
            }
            calcDef.getFunc = getFunc;
        };
        DbSet.prototype._getStrValue = function (val, fieldInfo) {
            var dcnv = fieldInfo.dateConversion, stz = this.dbContext.serverTimezone;
            return stringifyValue(val, dcnv, fieldInfo.dataType, stz);
        };
        DbSet.prototype._getKeyValue = function (vals) {
            var pkFlds = this._pkFields, len = pkFlds.length;
            if (len === 1) {
                var val = getValue(vals, pkFlds[0].fieldName);
                if (isNt(val)) {
                    throw new Error("Empty key field value for: " + pkFlds[0].fieldName);
                }
                return this._getStrValue(val, pkFlds[0]);
            }
            else {
                var pkVals = [];
                for (var i = 0; i < len; i += 1) {
                    var val = getValue(vals, pkFlds[i].fieldName);
                    if (isNt(val)) {
                        throw new Error("Empty key field value for: " + pkFlds[i].fieldName);
                    }
                    var strval = this._getStrValue(val, pkFlds[i]);
                    pkVals.push(strval);
                }
                return pkVals.join(";");
            }
        };
        DbSet.prototype._getCalcFieldVal = function (fieldName, item) {
            try {
                var val = getValue(this._calcfldMap, fieldName);
                return val.getFunc.call(item, item);
            }
            catch (err) {
                ERROR.reThrow(err, this.handleError(err, this));
            }
        };
        DbSet.prototype._getNavFieldVal = function (fieldName, item) {
            var val = getValue(this._navfldMap, fieldName);
            return val.getFunc.call(item, item);
        };
        DbSet.prototype._setNavFieldVal = function (fieldName, item, value) {
            var val = getValue(this._navfldMap, fieldName);
            val.setFunc.call(item, value, item);
        };
        DbSet.prototype._beforeLoad = function (query, oldQuery) {
            if (!!query.isForAppend) {
                query.pageSize = this.pageSize;
                query.pageIndex = this.pageIndex;
                this._query = query;
            }
            else {
                if (oldQuery !== query) {
                    query.pageIndex = 0;
                    this._query = query;
                    if (!!oldQuery) {
                        oldQuery.dispose();
                    }
                }
                if (query.pageSize !== this.pageSize) {
                    this._ignorePageChanged = true;
                    try {
                        this.pageIndex = 0;
                        this.pageSize = query.pageSize;
                    }
                    finally {
                        this._ignorePageChanged = false;
                    }
                }
                if (query.pageIndex !== this.pageIndex) {
                    this._ignorePageChanged = true;
                    try {
                        this.pageIndex = query.pageIndex;
                    }
                    finally {
                        this._ignorePageChanged = false;
                    }
                }
                if (!query.isCacheValid) {
                    query._getInternal().clearCache();
                }
            }
        };
        DbSet.prototype._getChildToParentNames = function (childFieldName) { return this._trackAssocMap[childFieldName]; };
        DbSet.prototype._afterFill = function (result, isClearAll) {
            var self = this;
            if (!isNt(result.fetchedItems)) {
                this._onLoaded(result.fetchedItems);
            }
            this._onCollectionChanged({
                changeType: !isClearAll ? 1 : 2,
                reason: result.reason,
                oper: 1,
                items: result.newItems
            });
            this._onFillEnd({
                items: result.items,
                newItems: result.newItems,
                reason: result.reason
            });
            this._isPageFilled = true;
            if (!!isClearAll) {
                self.moveFirst();
            }
        };
        DbSet.prototype._fillFromService = function (info) {
            var self = this, res = info.res, fieldNames = res.names, rows = res.rows || [], isPagingEnabled = this.isPagingEnabled, query = info.query;
            var isClearAll = true;
            if (!!query && !query.getIsStateDirty()) {
                isClearAll = query.isClearPrevData;
                if (query.isClearCacheOnEveryLoad) {
                    query._getInternal().clearCache();
                }
                if (isClearAll) {
                    this._clear(info.reason, 1);
                }
            }
            var fetchedItems = rows.map(function (row) {
                var key = row.k;
                if (!key) {
                    throw new Error(jriapp_shared_3.LocaleERRS.ERR_KEY_IS_EMPTY);
                }
                var item = self.getItemByKey(key);
                if (!item) {
                    item = self.createEntityFromData(row, fieldNames);
                }
                else {
                    self._refreshValues("", item, row.v, fieldNames, 1);
                }
                return item;
            });
            var _fetchedItems = fetchedItems;
            if (!!query && !query.getIsStateDirty()) {
                if (query.isIncludeTotalCount && !isNt(res.totalCount)) {
                    this.totalCount = res.totalCount;
                }
                if (query.loadPageCount > 1 && isPagingEnabled) {
                    var dataCache = query._getInternal().getCache();
                    if (query.isIncludeTotalCount && !isNt(res.totalCount)) {
                        dataCache.totalCount = res.totalCount;
                    }
                    dataCache.fill(res.pageIndex, fetchedItems);
                    _fetchedItems = dataCache.getPageItems(query.pageIndex);
                }
            }
            var newItems = [], items = [];
            for (var _i = 0, _fetchedItems_1 = _fetchedItems; _i < _fetchedItems_1.length; _i++) {
                var item = _fetchedItems_1[_i];
                var oldItem = self.getItemByKey(item._key);
                if (!oldItem) {
                    self._appendItem(item);
                    newItems.push(item);
                    items.push(item);
                    item._aspect._setIsAttached(true);
                }
                else {
                    items.push(oldItem);
                }
            }
            if (newItems.length > 0) {
                this._onCountChanged();
            }
            var result = {
                newItems: newItems,
                fetchedItems: fetchedItems,
                items: items,
                reason: info.reason,
                outOfBandData: info.res.extraInfo
            };
            info.onFillEnd();
            this._afterFill(result, isClearAll);
            return result;
        };
        DbSet.prototype._fillFromCache = function (args) {
            var query = args.query;
            if (!query) {
                throw new Error(format(jriapp_shared_3.LocaleERRS.ERR_ASSERTION_FAILED, "query is not null"));
            }
            if (query.getIsStateDirty()) {
                throw new Error(format(jriapp_shared_3.LocaleERRS.ERR_ASSERTION_FAILED, "query not destroyed"));
            }
            var dataCache = query._getInternal().getCache(), arr = dataCache.getPageItems(query.pageIndex);
            this._replaceItems(args.reason, 1, arr);
            var items = [];
            for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
                var item = arr_1[_i];
                items.push(item);
            }
            if (items.length > 0) {
                this._onCountChanged();
            }
            var result = {
                newItems: items,
                fetchedItems: null,
                items: items,
                reason: args.reason,
                outOfBandData: null
            };
            this._afterFill(result, true);
            return result;
        };
        DbSet.prototype._commitChanges = function (rows) {
            var self = this;
            for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
                var rowInfo = rows_1[_i];
                var oldKey = rowInfo.clientKey, newKey = rowInfo.serverKey, item = self.getItemByKey(oldKey);
                if (!item) {
                    throw new Error(format(jriapp_shared_3.LocaleERRS.ERR_KEY_IS_NOTFOUND, oldKey));
                }
                var itemStatus = item._aspect.status;
                item._aspect._acceptChanges(rowInfo);
                if (itemStatus === 1) {
                    item._aspect._updateKeys(rowInfo.serverKey);
                    self._remapItem(oldKey, newKey, item);
                    self._onCollectionChanged({
                        changeType: 3,
                        reason: 0,
                        oper: 4,
                        items: [item],
                        old_key: oldKey,
                        new_key: newKey
                    });
                }
            }
        };
        DbSet.prototype._setItemInvalid = function (row) {
            var item = this.getItemByKey(row.clientKey), errors = Indexer();
            row.invalid.forEach(function (err) {
                if (!err.fieldName) {
                    err.fieldName = "*";
                }
                if (isArray(errors[err.fieldName])) {
                    errors[err.fieldName].push(err.message);
                }
                else {
                    errors[err.fieldName] = [err.message];
                }
            });
            var res = [];
            forEach(errors, function (fieldName, err) {
                res.push({ fieldName: fieldName, errors: err });
            });
            this.errors.addErrors(item, res);
            return item;
        };
        DbSet.prototype._getChanges = function () {
            var changes = [], csh = this._changeCache;
            forEach(csh, function (_key, item) {
                changes.push(item._aspect._getRowInfo());
            });
            return changes;
        };
        DbSet.prototype._getTrackAssocInfo = function () {
            var self = this, res = [], csh = this._changeCache, trackAssoc = self._trackAssoc;
            forEach(csh, function (_key, item) {
                forEach(trackAssoc, function (assocName, assocInfo) {
                    var parentKey = item._aspect._getFieldVal(assocInfo.childToParentName), childKey = item._key;
                    if (!!parentKey && !!childKey) {
                        res.push({ assocName: assocName, parentKey: parentKey, childKey: childKey });
                    }
                });
            });
            return res;
        };
        DbSet.prototype._addToChanged = function (item) {
            if (item._aspect.isDetached) {
                return;
            }
            if (!this._changeCache[item._key]) {
                this._changeCache[item._key] = item;
                this._changeCount += 1;
                if (this._changeCount === 1) {
                    this.objEvents.raiseProp("isHasChanges");
                }
            }
        };
        DbSet.prototype._removeFromChanged = function (key) {
            if (!key) {
                return;
            }
            if (!!this._changeCache[key]) {
                delete this._changeCache[key];
                this._changeCount -= 1;
                if (this._changeCount === 0) {
                    this.objEvents.raiseProp("isHasChanges");
                }
            }
        };
        DbSet.prototype._setQuery = function (query) {
            this._query = query;
        };
        DbSet.prototype._onItemStatusChanged = function (item, oldStatus) {
            var _this = this;
            _super.prototype._onItemStatusChanged.call(this, item, oldStatus);
            if (item._aspect.isDeleted && this.isSubmitOnDelete) {
                this.dbContext.submitChanges().catch(function (_err) {
                    utils.queue.enque(function () {
                        _this.dbContext.rejectChanges();
                    });
                });
            }
        };
        DbSet.prototype._onRemoved = function (item) {
            this._removeFromChanged(item._key);
            _super.prototype._onRemoved.call(this, item);
        };
        DbSet.prototype._onLoaded = function (items) {
            if (this.objEvents.canRaise("dbset_loaded")) {
                var vals = items.map(function (item) { return item._aspect.vals; });
                this.objEvents.raise("dbset_loaded", { vals: vals });
            }
        };
        DbSet.prototype._destroyQuery = function () {
            var query = this._query;
            this._query = null;
            if (!!query) {
                query.dispose();
            }
        };
        DbSet.prototype._getNames = function () {
            var fieldInfos = this.getFieldInfos(), names = [];
            walkFields(fieldInfos, function (fld, _fullName, arr) {
                if (fld.fieldType === 5) {
                    var res = [];
                    arr.push({
                        n: fld.fieldName, p: res
                    });
                    return res;
                }
                else {
                    var isOK = fld.fieldType === 0 || fld.fieldType === 4 || fld.fieldType === 6;
                    if (isOK) {
                        arr.push({
                            n: fld.fieldName, p: null
                        });
                    }
                    return arr;
                }
            }, names);
            return names;
        };
        DbSet.prototype.getFieldMap = function () {
            return this._fieldMap;
        };
        DbSet.prototype.getFieldInfos = function () {
            return this._fieldInfos;
        };
        DbSet.prototype.createEntityFromObj = function (obj, key) {
            var isNew = !obj, vals = objToVals(this.getFieldInfos(), obj), _key = isNew ? this._getNewKey() : (!key ? this._getKeyValue(vals) : key);
            var aspect = new entity_aspect_1.EntityAspect(this, vals, _key, isNew);
            return aspect.item;
        };
        DbSet.prototype.createEntityFromData = function (row, fieldNames) {
            var vals = initVals(this.getFieldInfos(), {}), isNew = !row;
            if (!!row) {
                this._applyFieldVals(vals, "", row.v, fieldNames);
            }
            var aspect = new entity_aspect_1.EntityAspect(this, vals, isNew ? this._getNewKey() : row.k, isNew);
            return aspect.item;
        };
        DbSet.prototype._getInternal = function () {
            return _super.prototype._getInternal.call(this);
        };
        DbSet.prototype.refreshData = function (data) {
            for (var _i = 0, _a = data.rows; _i < _a.length; _i++) {
                var row = _a[_i];
                var key = row.k;
                if (!key) {
                    throw new Error(jriapp_shared_3.LocaleERRS.ERR_KEY_IS_EMPTY);
                }
                var item = this.getItemByKey(key);
                if (!!item) {
                    this._refreshValues("", item, row.v, data.names, 1);
                }
            }
        };
        DbSet.prototype.fillData = function (data, isAppend) {
            var self = this, reason = 0;
            this._destroyQuery();
            var isClearAll = !isAppend;
            if (isClearAll) {
                self._clear(reason, 1);
            }
            var fetchedItems = data.rows.map(function (row) {
                var key = row.k;
                if (!key) {
                    throw new Error(jriapp_shared_3.LocaleERRS.ERR_KEY_IS_EMPTY);
                }
                var item = self.getItemByKey(key);
                if (!item) {
                    item = self.createEntityFromData(row, data.names);
                }
                else {
                    self._refreshValues("", item, row.v, data.names, 1);
                }
                return item;
            });
            var newItems = [], items = [];
            fetchedItems.forEach(function (item) {
                var oldItem = self.getItemByKey(item._key);
                if (!oldItem) {
                    self._appendItem(item);
                    newItems.push(item);
                    items.push(item);
                    item._aspect._setIsAttached(true);
                }
                else {
                    items.push(oldItem);
                }
            });
            if (newItems.length > 0) {
                this._onCountChanged();
            }
            this.totalCount = fetchedItems.length;
            var result = {
                newItems: newItems,
                fetchedItems: fetchedItems,
                items: items,
                reason: 0,
                outOfBandData: null
            };
            this._afterFill(result, isClearAll);
            return result;
        };
        DbSet.prototype.fillItems = function (data, isAppend) {
            var self = this, reason = 0;
            this._destroyQuery();
            var isClearAll = !isAppend;
            if (isClearAll) {
                self._clear(reason, 1);
            }
            var fetchedItems = data.map(function (obj) {
                return self.createEntityFromObj(obj);
            });
            var newItems = [], items = [];
            fetchedItems.forEach(function (item) {
                var oldItem = self.getItemByKey(item._key);
                if (!oldItem) {
                    self._appendItem(item);
                    newItems.push(item);
                    items.push(item);
                    item._aspect._setIsAttached(true);
                }
                else {
                    items.push(oldItem);
                }
            });
            if (newItems.length > 0) {
                this._onCountChanged();
            }
            this.totalCount = fetchedItems.length;
            var result = {
                newItems: newItems,
                fetchedItems: fetchedItems,
                items: items,
                reason: 0,
                outOfBandData: null
            };
            this._afterFill(result, isClearAll);
            return result;
        };
        DbSet.prototype.addOnLoaded = function (fn, nmspace, context, priority) {
            this.objEvents.on("dbset_loaded", fn, nmspace, context, priority);
        };
        DbSet.prototype.offOnLoaded = function (nmspace) {
            this.objEvents.off("dbset_loaded", nmspace);
        };
        DbSet.prototype.waitForNotBusy = function (callback, groupName) {
            this._waitForProp("isBusy", callback, groupName);
        };
        DbSet.prototype.getFieldInfo = function (fieldName) {
            var parts = fieldName.split(".");
            var fld = this._fieldMap[parts[0]];
            if (!fld) {
                throw new Error(format(jriapp_shared_3.LocaleERRS.ERR_DBSET_INVALID_FIELDNAME, this.dbSetName, fieldName));
            }
            if (parts.length === 1) {
                return fld;
            }
            if (fld.fieldType === 5) {
                for (var i = 1; i < parts.length; i += 1) {
                    fld = getObjectField(parts[i], fld.nested);
                }
                return fld;
            }
            else if (fld.fieldType === 3) {
                var assoc = this._childAssocMap[fld.fieldName];
                if (!!assoc) {
                    var parentDB = this.dbContext.getDbSet(assoc.parentDbSetName);
                    return parentDB.getFieldInfo(parts.slice(1).join("."));
                }
            }
            throw new Error(format(jriapp_shared_3.LocaleERRS.ERR_DBSET_INVALID_FIELDNAME, this.dbSetName, fieldName));
        };
        DbSet.prototype.sort = function (fieldNames, sortOrder) {
            var self = this, query = self.query;
            if (!isNt(query)) {
                query.clearSort();
                for (var i = 0; i < fieldNames.length; i += 1) {
                    switch (i) {
                        case 0:
                            query.orderBy(fieldNames[i], sortOrder);
                            break;
                        default:
                            query.thenBy(fieldNames[i], sortOrder);
                            break;
                    }
                }
                query.isClearPrevData = true;
                query.pageIndex = 0;
                return self.dbContext._getInternal().load(query, 2);
            }
            else {
                return _super.prototype.sort.call(this, fieldNames, sortOrder);
            }
        };
        DbSet.prototype.acceptChanges = function () {
            if (!this.isHasChanges) {
                return;
            }
            var csh = this._changeCache;
            forEach(csh, function (key) {
                var item = csh[key];
                item._aspect.acceptChanges();
            });
            if (this.isHasChanges) {
                throw new Error("Invalid Operation: the changes are left after the acceptChanges operation");
            }
        };
        DbSet.prototype.rejectChanges = function () {
            if (!this.isHasChanges) {
                return;
            }
            var csh = this._changeCache;
            forEach(csh, function (key) {
                var item = csh[key];
                item._aspect.rejectChanges();
            });
            if (this.isHasChanges) {
                throw new Error("Invalid Operation: the changes are left after the rejectChanges operation");
            }
        };
        DbSet.prototype.deleteOnSubmit = function (item) {
            item._aspect.deleteOnSubmit();
        };
        DbSet.prototype.clear = function () {
            this._destroyQuery();
            _super.prototype.clear.call(this);
        };
        DbSet.prototype.createQuery = function (name) {
            var queryInfo = this.dbContext._getInternal().getQueryInfo(name);
            if (!queryInfo) {
                throw new Error(format(jriapp_shared_3.LocaleERRS.ERR_QUERY_NAME_NOTFOUND, name));
            }
            return new dataquery_1.DataQuery(this, queryInfo);
        };
        DbSet.prototype.toString = function () {
            return this.dbSetName;
        };
        Object.defineProperty(DbSet.prototype, "dbContext", {
            get: function () {
                return this._dbContext;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbSet.prototype, "dbSetName", {
            get: function () {
                return this._dbSetName;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbSet.prototype, "query", {
            get: function () {
                return this._query;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbSet.prototype, "isHasChanges", {
            get: function () {
                return this._changeCount > 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbSet.prototype, "cacheSize", {
            get: function () {
                var query = this._query;
                if (!!query && query.isCacheValid) {
                    var dataCache = query._getInternal().getCache();
                    return dataCache.cacheSize;
                }
                return 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbSet.prototype, "isSubmitOnDelete", {
            get: function () {
                return this._isSubmitOnDelete;
            },
            set: function (v) {
                if (this._isSubmitOnDelete !== v) {
                    this._isSubmitOnDelete = !!v;
                    this.objEvents.raiseProp("isSubmitOnDelete");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbSet.prototype, "isBusy", {
            get: function () {
                return this.isLoading || this.dbContext.isSubmiting;
            },
            enumerable: false,
            configurable: true
        });
        return DbSet;
    }(base_1.BaseCollection));
    exports.DbSet = DbSet;
});
define("jriapp_db/dbsets", ["require", "exports", "jriapp_shared"], function (require, exports, jriapp_shared_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DbSets = void 0;
    var utils = jriapp_shared_4.Utils, Indexer = utils.core.Indexer, format = utils.str.format;
    var DBSETS_EVENTS;
    (function (DBSETS_EVENTS) {
        DBSETS_EVENTS["DBSET_CREATING"] = "dbset_creating";
    })(DBSETS_EVENTS || (DBSETS_EVENTS = {}));
    var DbSets = (function (_super) {
        __extends(DbSets, _super);
        function DbSets(dbContext) {
            var _this = _super.call(this) || this;
            _this._dbContext = dbContext;
            _this._arrDbSets = [];
            _this._dbSets = Indexer();
            return _this;
        }
        DbSets.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            for (var _i = 0, _a = this._arrDbSets; _i < _a.length; _i++) {
                var dbSet = _a[_i];
                dbSet.dispose();
            }
            this._arrDbSets = [];
            this._dbSets = null;
            this._dbContext = null;
            _super.prototype.dispose.call(this);
        };
        DbSets.prototype._dbSetCreated = function (dbSet) {
            var _this = this;
            this._arrDbSets.push(dbSet);
            dbSet.objEvents.onProp("isHasChanges", function (sender) {
                _this._dbContext._getInternal().onDbSetHasChangesChanged(sender);
            });
        };
        DbSets.prototype._createDbSet = function (name, dbSetType) {
            var self = this, dbContext = this._dbContext;
            if (!!self._dbSets[name]) {
                throw new Error(utils.str.format("DbSet: {0} is already created", name));
            }
            self._dbSets[name] = new jriapp_shared_4.Lazy(function () {
                var args = { name: name, dbSetType: dbSetType };
                self.objEvents.raise("dbset_creating", args);
                var res = new args.dbSetType(dbContext);
                self._dbSetCreated(res);
                return res;
            });
        };
        DbSets.prototype.addOnDbSetCreating = function (fn, nmspace, context) {
            this.objEvents.on("dbset_creating", fn, nmspace, context);
        };
        DbSets.prototype.offOnDbSetCreating = function (nmspace) {
            this.objEvents.off("dbset_creating", nmspace);
        };
        Object.defineProperty(DbSets.prototype, "dbSetNames", {
            get: function () {
                return Object.keys(this._dbSets);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbSets.prototype, "arrDbSets", {
            get: function () {
                return this._arrDbSets;
            },
            enumerable: false,
            configurable: true
        });
        DbSets.prototype.findDbSet = function (name) {
            var res = this._dbSets[name];
            if (!res) {
                return null;
            }
            return res.Value;
        };
        DbSets.prototype.getDbSet = function (name) {
            var dbSet = this.findDbSet(name);
            if (!dbSet) {
                throw new Error(format(jriapp_shared_4.LocaleERRS.ERR_DBSET_NAME_INVALID, name));
            }
            return dbSet;
        };
        return DbSets;
    }(jriapp_shared_4.BaseObject));
    exports.DbSets = DbSets;
});
define("jriapp_db/association", ["require", "exports", "jriapp_shared"], function (require, exports, jriapp_shared_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Association = void 0;
    var utils = jriapp_shared_5.Utils, format = utils.str.format, _a = utils.core, getNewID = _a.getNewID, extend = _a.extend, Indexer = _a.Indexer, arrHelper = utils.arr;
    var Association = (function (_super) {
        __extends(Association, _super);
        function Association(options) {
            var _this = _super.call(this) || this;
            var self = _this;
            _this._uniqueID = getNewID("ass");
            var opts = extend({
                dbContext: null,
                parentName: "",
                childName: "",
                parentKeyFields: [],
                childKeyFields: [],
                parentToChildrenName: null,
                childToParentName: null,
                name: _this._uniqueID,
                onDeleteAction: 0
            }, options);
            _this._name = opts.name;
            _this._dbContext = opts.dbContext;
            _this._onDeleteAction = opts.onDeleteAction;
            _this._parentDS = opts.dbContext.getDbSet(opts.parentName);
            _this._childDS = opts.dbContext.getDbSet(opts.childName);
            _this._parentFldInfos = opts.parentKeyFields.map(function (name) {
                return self._parentDS.getFieldInfo(name);
            });
            _this._childFldInfos = opts.childKeyFields.map(function (name) {
                return self._childDS.getFieldInfo(name);
            });
            _this._parentToChildrenName = opts.parentToChildrenName;
            _this._childToParentName = opts.childToParentName;
            _this._parentMap = Indexer();
            _this._childMap = Indexer();
            _this._bindParentDS();
            var changed1 = _this._mapParentItems(_this._parentDS.items);
            _this._bindChildDS();
            var changed2 = _this._mapChildren(_this._childDS.items);
            _this._saveParentFKey = null;
            _this._saveChildFKey = null;
            _this._debounce = new jriapp_shared_5.Debounce();
            _this._changed = Indexer();
            _this._notifyBound = self._notify.bind(self);
            self._notifyParentChanged(changed1);
            self._notifyChildrenChanged(changed2);
            return _this;
        }
        Association.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._debounce.dispose();
            this._debounce = null;
            this._changed = Indexer();
            this._unbindParentDS();
            this._unbindChildDS();
            this._parentMap = null;
            this._childMap = null;
            this._parentFldInfos = null;
            this._childFldInfos = null;
            _super.prototype.dispose.call(this);
        };
        Association.prototype.handleError = function (error, source) {
            return (!this._dbContext) ? _super.prototype.handleError.call(this, error, source) : this._dbContext.handleError(error, source);
        };
        Association.prototype._bindParentDS = function () {
            var self = this, ds = this._parentDS;
            if (!ds) {
                return;
            }
            ds.addOnCollChanged(function (_, args) {
                self._onParentCollChanged(args);
            }, self._uniqueID, null, 2);
            ds.addOnBeginEdit(function (_, args) {
                self._onParentEdit(args.item, true, false);
            }, self._uniqueID, null, 2);
            ds.addOnEndEdit(function (_, args) {
                self._onParentEdit(args.item, false, args.isCanceled);
            }, self._uniqueID, null, 2);
            ds.addOnItemDeleting(function () {
            }, self._uniqueID, null, 2);
            ds.addOnStatusChanged(function (_, args) {
                self._onParentStatusChanged(args.item, args.oldStatus);
            }, self._uniqueID, null, 2);
            ds.addOnCommitChanges(function (_, args) {
                self._onParentCommitChanges(args.item, args.isBegin, args.isRejected, args.status);
            }, self._uniqueID, null, 2);
        };
        Association.prototype._bindChildDS = function () {
            var self = this, ds = this._childDS;
            if (!ds) {
                return;
            }
            ds.addOnCollChanged(function (_, args) {
                self._onChildCollChanged(args);
            }, self._uniqueID, null, 2);
            ds.addOnBeginEdit(function (_, args) {
                self._onChildEdit(args.item, true, false);
            }, self._uniqueID, null, 2);
            ds.addOnEndEdit(function (_, args) {
                self._onChildEdit(args.item, false, args.isCanceled);
            }, self._uniqueID, null, 2);
            ds.addOnStatusChanged(function (_, args) {
                self._onChildStatusChanged(args.item, args.oldStatus);
            }, self._uniqueID, null, 2);
            ds.addOnCommitChanges(function (_, args) {
                self._onChildCommitChanges(args.item, args.isBegin, args.isRejected, args.status);
            }, self._uniqueID, null, 2);
        };
        Association.prototype._onParentCollChanged = function (args) {
            var self = this, changedKeys = Indexer();
            var item, changed = [];
            switch (args.changeType) {
                case 2:
                    changed = self.refreshParentMap();
                    break;
                case 1:
                    changed = self._mapParentItems(args.items);
                    break;
                case 0:
                    {
                        for (var _i = 0, _a = args.items; _i < _a.length; _i++) {
                            var item_1 = _a[_i];
                            var key = self._unMapParentItem(item_1);
                            if (!!key) {
                                changedKeys[key] = null;
                            }
                        }
                        changed = Object.keys(changedKeys);
                    }
                    break;
                case 3:
                    {
                        if (!!args.old_key) {
                            item = this._parentMap[args.old_key];
                            if (!!item) {
                                delete this._parentMap[args.old_key];
                                changed = this._mapParentItems([item]);
                            }
                        }
                    }
                    break;
                default:
                    throw new Error(format(jriapp_shared_5.LocaleERRS.ERR_COLLECTION_CHANGETYPE_INVALID, args.changeType));
            }
            self._notifyParentChanged(changed);
        };
        Association.prototype._onParentEdit = function (item, isBegin, isCanceled) {
            var self = this;
            if (isBegin) {
                self._storeParentFKey(item);
            }
            else {
                if (!isCanceled) {
                    self._checkParentFKey(item);
                }
                else {
                    self._saveParentFKey = null;
                }
            }
        };
        Association.prototype._onParentCommitChanges = function (item, isBegin, isRejected, status) {
            var self = this;
            var fkey;
            if (isBegin) {
                if (isRejected && status === 1) {
                    fkey = this._unMapParentItem(item);
                    if (!!fkey) {
                        self._notifyParentChanged([fkey]);
                    }
                    return;
                }
                else if (!isRejected && status === 3) {
                    fkey = this._unMapParentItem(item);
                    if (!!fkey) {
                        self._notifyParentChanged([fkey]);
                    }
                    return;
                }
                self._storeParentFKey(item);
            }
            else {
                self._checkParentFKey(item);
            }
        };
        Association.prototype._storeParentFKey = function (item) {
            var self = this, fkey = self.getParentFKey(item);
            if (fkey !== null && !!self._parentMap[fkey]) {
                self._saveParentFKey = fkey;
            }
        };
        Association.prototype._checkParentFKey = function (item) {
            var self = this, savedKey = self._saveParentFKey;
            var fkey;
            self._saveParentFKey = null;
            fkey = self.getParentFKey(item);
            if (fkey !== savedKey) {
                if (!!savedKey) {
                    self._notifyChildrenChanged([savedKey]);
                    self._notifyParentChanged([savedKey]);
                    delete self._parentMap[savedKey];
                }
                if (!!fkey) {
                    self._mapParentItems([item]);
                    self._notifyChildrenChanged([fkey]);
                    self._notifyParentChanged([fkey]);
                }
            }
        };
        Association.prototype._onParentStatusChanged = function (item, _oldStatus) {
            var self = this, newStatus = item._aspect.status;
            var fkey = null;
            var children;
            if (newStatus === 3) {
                children = self.getChildItems(item);
                fkey = this._unMapParentItem(item);
                switch (self.onDeleteAction) {
                    case 0:
                        break;
                    case 1:
                        {
                            for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
                                var child = children_1[_i];
                                child._aspect.deleteItem();
                            }
                        }
                        break;
                    case 2:
                        {
                            for (var _a = 0, children_2 = children; _a < children_2.length; _a++) {
                                var child = children_2[_a];
                                var isEdit = child._aspect.isEditing;
                                if (!isEdit) {
                                    child._aspect.beginEdit();
                                }
                                try {
                                    for (var _b = 0, _c = self._childFldInfos; _b < _c.length; _b++) {
                                        var f = _c[_b];
                                        child[f.fieldName] = null;
                                    }
                                    if (!isEdit) {
                                        child._aspect.endEdit();
                                    }
                                }
                                finally {
                                    if (!isEdit) {
                                        child._aspect.cancelEdit();
                                    }
                                }
                            }
                        }
                        break;
                }
                if (!!fkey) {
                    self._notifyParentChanged([fkey]);
                }
            }
        };
        Association.prototype._onChildCollChanged = function (args) {
            var self = this, items = args.items, changedKeys = Indexer();
            var item, changed = [];
            switch (args.changeType) {
                case 2:
                    changed = self.refreshChildMap();
                    break;
                case 1:
                    changed = self._mapChildren(items);
                    break;
                case 0:
                    {
                        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                            var item_2 = items_1[_i];
                            var key = self._unMapChildItem(item_2);
                            if (!!key) {
                                changedKeys[key] = null;
                            }
                        }
                        changed = Object.keys(changedKeys);
                    }
                    break;
                case 3:
                    {
                        if (!!args.old_key) {
                            item = items[0];
                            if (!!item) {
                                var parentKey = item._aspect._getFieldVal(this._childToParentName);
                                if (!!parentKey) {
                                    delete this._childMap[parentKey];
                                    item._aspect._clearFieldVal(this._childToParentName);
                                }
                                changed = this._mapChildren([item]);
                            }
                        }
                    }
                    break;
                default:
                    throw new Error(format(jriapp_shared_5.LocaleERRS.ERR_COLLECTION_CHANGETYPE_INVALID, args.changeType));
            }
            self._notifyChildrenChanged(changed);
        };
        Association.prototype._notifyChildrenChanged = function (changed) {
            this._notifyChanged([], changed);
        };
        Association.prototype._notifyParentChanged = function (changed) {
            this._notifyChanged(changed, []);
        };
        Association.prototype._notifyChanged = function (changedPkeys, changedCkeys) {
            var self = this;
            if (changedPkeys.length > 0 || changedCkeys.length > 0) {
                for (var _i = 0, changedPkeys_1 = changedPkeys; _i < changedPkeys_1.length; _i++) {
                    var key = changedPkeys_1[_i];
                    var res = self._changed[key] || { children: {}, parent: null };
                    var children = self._childMap[key];
                    if (!!children) {
                        for (var _a = 0, children_3 = children; _a < children_3.length; _a++) {
                            var child = children_3[_a];
                            res.children[child._key] = child;
                        }
                    }
                    self._changed[key] = res;
                }
                for (var _b = 0, changedCkeys_1 = changedCkeys; _b < changedCkeys_1.length; _b++) {
                    var key = changedCkeys_1[_b];
                    var res = self._changed[key] || { children: {}, parent: null };
                    var item = self._parentMap[key];
                    if (!!item) {
                        res.parent = item;
                    }
                    self._changed[key] = res;
                }
                this._debounce.enque(this._notifyBound);
            }
        };
        Association.prototype._notify = function () {
            var self = this, changed = self._changed;
            self._changed = Indexer();
            try {
                var fkeys = Object.keys(changed);
                for (var k = 0; k < fkeys.length; k += 1) {
                    var fkey = fkeys[k], map = changed[fkey];
                    self._onParentChanged(fkey, map.children);
                    if (!!map.parent) {
                        self._onChildrenChanged(fkey, map.parent);
                    }
                }
            }
            catch (err) {
                self.handleError(err, self);
            }
        };
        Association.prototype._onChildEdit = function (item, isBegin, isCanceled) {
            var self = this;
            if (isBegin) {
                self._storeChildFKey(item);
            }
            else {
                if (!isCanceled) {
                    self._checkChildFKey(item);
                }
                else {
                    self._saveChildFKey = null;
                }
            }
        };
        Association.prototype._onChildCommitChanges = function (item, isBegin, isRejected, status) {
            var self = this;
            var fkey;
            if (isBegin) {
                if (isRejected && status === 1) {
                    fkey = this._unMapChildItem(item);
                    if (!!fkey) {
                        self._notifyChildrenChanged([fkey]);
                    }
                    return;
                }
                else if (!isRejected && status === 3) {
                    fkey = self._unMapChildItem(item);
                    if (!!fkey) {
                        self._notifyChildrenChanged([fkey]);
                    }
                    return;
                }
                self._storeChildFKey(item);
            }
            else {
                self._checkChildFKey(item);
            }
        };
        Association.prototype._storeChildFKey = function (item) {
            var self = this, fkey = self.getChildFKey(item);
            if (!!fkey) {
                var arr = self._childMap[fkey];
                if (!!arr && arr.indexOf(item) > -1) {
                    self._saveChildFKey = fkey;
                }
            }
        };
        Association.prototype._checkChildFKey = function (item) {
            var self = this, savedKey = self._saveChildFKey, fkey = self.getChildFKey(item);
            self._saveChildFKey = null;
            if (fkey !== savedKey) {
                if (!!savedKey) {
                    self._notifyParentChanged([savedKey]);
                    self._notifyChildrenChanged([savedKey]);
                    var arr = self._childMap[savedKey];
                    arrHelper.remove(arr, item);
                    if (arr.length === 0) {
                        delete self._childMap[savedKey];
                    }
                }
                if (!!fkey) {
                    self._mapChildren([item]);
                    self._notifyParentChanged([fkey]);
                    self._notifyChildrenChanged([fkey]);
                }
            }
        };
        Association.prototype._onChildStatusChanged = function (item, _oldStatus) {
            var self = this, newStatus = item._aspect.status;
            var fkey = self.getChildFKey(item);
            if (!fkey) {
                return;
            }
            if (newStatus === 3) {
                fkey = self._unMapChildItem(item);
                if (!!fkey) {
                    self._notifyChildrenChanged([fkey]);
                }
            }
        };
        Association.prototype._getItemKey = function (finf, ds, item) {
            var arr = [], internal = ds._getInternal(), len = finf.length;
            for (var i = 0; i < len; i += 1) {
                var val = item[finf[i].fieldName];
                var strval = internal.getStrValue(val, finf[i]);
                if (strval === null) {
                    return null;
                }
                arr.push(strval);
            }
            return arr.join(";");
        };
        Association.prototype._resetChildMap = function () {
            var self = this, fkeys = Object.keys(this._childMap);
            this._childMap = Indexer();
            self._notifyChildrenChanged(fkeys);
        };
        Association.prototype._resetParentMap = function () {
            var self = this, fkeys = Object.keys(this._parentMap);
            this._parentMap = Indexer();
            self._notifyParentChanged(fkeys);
        };
        Association.prototype._unMapChildItem = function (item) {
            var fkey, arr, idx, changedKey = null;
            fkey = this.getChildFKey(item);
            if (!!fkey) {
                arr = this._childMap[fkey];
                if (!!arr) {
                    idx = arrHelper.remove(arr, item);
                    if (idx > -1) {
                        if (arr.length === 0) {
                            delete this._childMap[fkey];
                        }
                        changedKey = fkey;
                    }
                }
            }
            return changedKey;
        };
        Association.prototype._unMapParentItem = function (item) {
            var fkey, changedKey = null;
            fkey = this.getParentFKey(item);
            if (!!fkey && !!this._parentMap[fkey]) {
                delete this._parentMap[fkey];
                changedKey = fkey;
            }
            return changedKey;
        };
        Association.prototype._mapParentItems = function (items) {
            var chngedKeys = Indexer(), len = items.length;
            for (var i = 0; i < len; i += 1) {
                var item = items[i];
                var status_1 = item._aspect.status;
                if (status_1 === 3) {
                    continue;
                }
                var fkey = this.getParentFKey(item);
                if (!!fkey) {
                    var old = this._parentMap[fkey];
                    if (old !== item) {
                        this._parentMap[fkey] = item;
                        chngedKeys[fkey] = null;
                    }
                }
            }
            return Object.keys(chngedKeys);
        };
        Association.prototype._onChildrenChanged = function (fkey, parent) {
            if (!!fkey && !!this._parentToChildrenName && !parent.getIsStateDirty()) {
                parent.objEvents.raiseProp(this._parentToChildrenName);
            }
        };
        Association.prototype._onParentChanged = function (fkey, map) {
            var self = this;
            if (!!fkey && !!this._childToParentName) {
                var keys = Object.keys(map), len = keys.length;
                for (var k = 0; k < len; k += 1) {
                    var item = map[keys[k]];
                    if (!item.getIsStateDirty()) {
                        item.objEvents.raiseProp(self._childToParentName);
                    }
                }
            }
        };
        Association.prototype._mapChildren = function (items) {
            var chngedKeys = Indexer(), len = items.length;
            for (var i = 0; i < len; i += 1) {
                var item = items[i];
                var status_2 = item._aspect.status;
                if (status_2 === 3) {
                    continue;
                }
                var fkey = this.getChildFKey(item);
                if (!!fkey) {
                    var arr = this._childMap[fkey];
                    if (!arr) {
                        arr = [];
                        this._childMap[fkey] = arr;
                    }
                    if (arr.indexOf(item) < 0) {
                        arr.push(item);
                        if (!chngedKeys[fkey]) {
                            chngedKeys[fkey] = null;
                        }
                    }
                }
            }
            return Object.keys(chngedKeys);
        };
        Association.prototype._unbindParentDS = function () {
            var self = this, ds = this.parentDS;
            if (!ds) {
                return;
            }
            ds.objEvents.offNS(self._uniqueID);
        };
        Association.prototype._unbindChildDS = function () {
            var self = this, ds = this.childDS;
            if (!ds) {
                return;
            }
            ds.objEvents.offNS(self._uniqueID);
        };
        Association.prototype.refreshParentMap = function () {
            this._resetParentMap();
            return this._mapParentItems(this._parentDS.items);
        };
        Association.prototype.refreshChildMap = function () {
            this._resetChildMap();
            return this._mapChildren(this._childDS.items);
        };
        Association.prototype.getParentFKey = function (item) {
            if (!!item && item._aspect.isNew) {
                return item._key;
            }
            return this._getItemKey(this._parentFldInfos, this._parentDS, item);
        };
        Association.prototype.getChildFKey = function (item) {
            if (!!item && !!this._childToParentName) {
                var parentKey = item._aspect._getFieldVal(this._childToParentName);
                if (!!parentKey) {
                    return parentKey;
                }
            }
            return this._getItemKey(this._childFldInfos, this._childDS, item);
        };
        Association.prototype.isParentChild = function (parent, child) {
            if (!parent || !child) {
                return false;
            }
            var fkey1 = this.getParentFKey(parent);
            if (!fkey1) {
                return false;
            }
            var fkey2 = this.getChildFKey(child);
            if (!fkey2) {
                return false;
            }
            return fkey1 === fkey2;
        };
        Association.prototype.getChildItems = function (parent) {
            var arr = [];
            if (!parent) {
                return arr;
            }
            try {
                var fkey = this.getParentFKey(parent);
                arr = this._childMap[fkey];
            }
            catch (err) {
                utils.err.reThrow(err, this.handleError(err, this));
            }
            return (!arr) ? [] : arr;
        };
        Association.prototype.getParentItem = function (item) {
            var obj = null;
            if (!item) {
                return obj;
            }
            try {
                var fkey = this.getChildFKey(item);
                obj = this._parentMap[fkey];
            }
            catch (err) {
                utils.err.reThrow(err, this.handleError(err, this));
            }
            return (!obj) ? null : obj;
        };
        Association.prototype.toString = function () {
            return this._name;
        };
        Object.defineProperty(Association.prototype, "name", {
            get: function () {
                return this._name;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Association.prototype, "parentToChildrenName", {
            get: function () {
                return this._parentToChildrenName;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Association.prototype, "childToParentName", {
            get: function () {
                return this._childToParentName;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Association.prototype, "parentDS", {
            get: function () {
                return this._parentDS;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Association.prototype, "childDS", {
            get: function () {
                return this._childDS;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Association.prototype, "parentFldInfos", {
            get: function () {
                return this._parentFldInfos;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Association.prototype, "childFldInfos", {
            get: function () {
                return this._childFldInfos;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Association.prototype, "onDeleteAction", {
            get: function () {
                return this._onDeleteAction;
            },
            enumerable: false,
            configurable: true
        });
        return Association;
    }(jriapp_shared_5.BaseObject));
    exports.Association = Association;
});
define("jriapp_db/error", ["require", "exports", "jriapp_shared"], function (require, exports, jriapp_shared_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SubmitError = exports.SvcValidationError = exports.ConcurrencyError = exports.AccessDeniedError = exports.DataOperationError = void 0;
    var format = jriapp_shared_6.Utils.str.format;
    var DataOperationError = (function (_super) {
        __extends(DataOperationError, _super);
        function DataOperationError(originalError, operationName) {
            var _this = this;
            var message;
            if (originalError instanceof Error) {
                message = originalError.message;
            }
            else if (originalError instanceof jriapp_shared_6.BaseError) {
                message = originalError.message;
            }
            if (!message) {
                message = "" + originalError;
            }
            _this = _super.call(this, message) || this;
            _this._origError = originalError;
            _this._operationName = operationName;
            return _this;
        }
        Object.defineProperty(DataOperationError.prototype, "operationName", {
            get: function () {
                return this._operationName;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataOperationError.prototype, "origError", {
            get: function () {
                return this._origError;
            },
            enumerable: false,
            configurable: true
        });
        return DataOperationError;
    }(jriapp_shared_6.BaseError));
    exports.DataOperationError = DataOperationError;
    var AccessDeniedError = (function (_super) {
        __extends(AccessDeniedError, _super);
        function AccessDeniedError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AccessDeniedError;
    }(DataOperationError));
    exports.AccessDeniedError = AccessDeniedError;
    var ConcurrencyError = (function (_super) {
        __extends(ConcurrencyError, _super);
        function ConcurrencyError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConcurrencyError;
    }(DataOperationError));
    exports.ConcurrencyError = ConcurrencyError;
    var SvcValidationError = (function (_super) {
        __extends(SvcValidationError, _super);
        function SvcValidationError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SvcValidationError;
    }(DataOperationError));
    exports.SvcValidationError = SvcValidationError;
    var SubmitError = (function (_super) {
        __extends(SubmitError, _super);
        function SubmitError(origError, allSubmitted, notValidated) {
            var _this = this;
            var message = origError.message || ("" + origError);
            _this = _super.call(this, origError, 1) || this;
            _this._origError = origError;
            _this._allSubmitted = allSubmitted || [];
            _this._notValidated = notValidated || [];
            if (_this._notValidated.length > 0) {
                var res = [message + ":"];
                for (var _i = 0, _a = _this._notValidated; _i < _a.length; _i++) {
                    var item = _a[_i];
                    res.push(format("item key:{0} errors:{1}", item._key, item._aspect.getErrorString()));
                }
                message = res.join("\r\n");
            }
            return _this;
        }
        Object.defineProperty(SubmitError.prototype, "allSubmitted", {
            get: function () { return this._allSubmitted; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SubmitError.prototype, "notValidated", {
            get: function () { return this._notValidated; },
            enumerable: false,
            configurable: true
        });
        return SubmitError;
    }(DataOperationError));
    exports.SubmitError = SubmitError;
});
define("jriapp_db/dbcontext", ["require", "exports", "jriapp_shared", "jriapp_shared/collection/utils", "jriapp_db/association", "jriapp_db/error"], function (require, exports, jriapp_shared_7, utils_3, association_1, error_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DbContext = void 0;
    var utils = jriapp_shared_7.Utils, http = utils.http, _a = utils.check, isArray = _a.isArray, isNt = _a.isNt, isFunc = _a.isFunc, isString = _a.isString, _b = utils.str, format = _b.format, endsWith = _b.endsWith, _c = utils.core, getTimeZoneOffset = _c.getTimeZoneOffset, merge = _c.merge, Indexer = _c.Indexer, ERROR = utils.err, stringifyValue = utils_3.ValueUtils.stringifyValue, _d = utils.async, delay = _d.delay, createDeferred = _d.createDeferred;
    var DATA_SVC_METH;
    (function (DATA_SVC_METH) {
        DATA_SVC_METH["Invoke"] = "invoke";
        DATA_SVC_METH["Query"] = "query";
        DATA_SVC_METH["Permissions"] = "permissions";
        DATA_SVC_METH["Submit"] = "save";
        DATA_SVC_METH["Refresh"] = "refresh";
    })(DATA_SVC_METH || (DATA_SVC_METH = {}));
    function fn_checkError(svcError, oper) {
        if (!svcError || ERROR.checkIsDummy(svcError)) {
            return;
        }
        switch (svcError.name) {
            case "AccessDeniedException":
                throw new error_1.AccessDeniedError(jriapp_shared_7.LocaleERRS.ERR_ACCESS_DENIED, oper);
            case "ConcurrencyException":
                throw new error_1.ConcurrencyError(jriapp_shared_7.LocaleERRS.ERR_CONCURRENCY, oper);
            case "ValidationException":
                throw new error_1.SvcValidationError(format(jriapp_shared_7.LocaleERRS.ERR_SVC_VALIDATION, svcError.message), oper);
            case "DomainServiceException":
                throw new error_1.DataOperationError(format(jriapp_shared_7.LocaleERRS.ERR_SVC_ERROR, svcError.message), oper);
            default:
                throw new error_1.DataOperationError(format(jriapp_shared_7.LocaleERRS.ERR_UNEXPECTED_SVC_ERROR, svcError.message), oper);
        }
    }
    var DBCTX_EVENTS;
    (function (DBCTX_EVENTS) {
        DBCTX_EVENTS["SUBMITTING"] = "submitting";
        DBCTX_EVENTS["SUBMITTED"] = "submitted";
        DBCTX_EVENTS["SUBMIT_ERROR"] = "submit_error";
        DBCTX_EVENTS["DBSET_CREATING"] = "dbset_creating";
    })(DBCTX_EVENTS || (DBCTX_EVENTS = {}));
    var DbContext = (function (_super) {
        __extends(DbContext, _super);
        function DbContext() {
            var _this = _super.call(this) || this;
            var self = _this;
            _this._initState = null;
            _this._requestHeaders = Indexer();
            _this._requests = [];
            _this._dbSets = null;
            _this._svcMethods = {};
            _this._assoc = {};
            _this._arrAssoc = [];
            _this._queryInfo = Indexer();
            _this._serviceUrl = null;
            _this._isSubmiting = false;
            _this._isHasChanges = false;
            _this._pendingSubmit = null;
            _this._serverTimezone = getTimeZoneOffset();
            _this._waitQueue = new jriapp_shared_7.WaitQueue(_this);
            _this._internal = {
                onItemRefreshed: function (res, item) {
                    self._onItemRefreshed(res, item);
                },
                refreshItem: function (item) {
                    return self._refreshItem(item);
                },
                getQueryInfo: function (name) {
                    return self._getQueryInfo(name);
                },
                onDbSetHasChangesChanged: function (eSet) {
                    self._onDbSetHasChangesChanged(eSet);
                },
                load: function (query, reason) {
                    return self._load(query, reason);
                }
            };
            _this.objEvents.onProp("isSubmiting", function () {
                self.objEvents.raiseProp("isBusy");
            });
            return _this;
        }
        DbContext.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this.abortRequests();
            this._waitQueue.dispose();
            this._waitQueue = null;
            for (var _i = 0, _a = this._arrAssoc; _i < _a.length; _i++) {
                var assoc = _a[_i];
                assoc.dispose();
            }
            this._arrAssoc = [];
            this._assoc = {};
            this._dbSets.dispose();
            this._dbSets = null;
            this._svcMethods = {};
            this._queryInfo = Indexer();
            this._serviceUrl = null;
            this._initState = null;
            this._isSubmiting = false;
            this._isHasChanges = false;
            _super.prototype.dispose.call(this);
        };
        DbContext.prototype._checkDisposed = function () {
            if (this.getIsStateDirty()) {
                ERROR.abort("dbContext is disposed");
            }
        };
        DbContext.prototype._initDbSets = function () {
            var _this = this;
            if (this.isInitialized) {
                throw new Error(jriapp_shared_7.LocaleERRS.ERR_DOMAIN_CONTEXT_INITIALIZED);
            }
            this._dbSets = this._createDbSets();
            this._dbSets.addOnDbSetCreating(function (_, args) {
                _this.objEvents.raise("dbset_creating", args);
            });
            var associations = this._createAssociations();
            this._initAssociations(associations);
            var methods = this._createMethods();
            this._initMethods(methods);
        };
        DbContext.prototype._initAssociations = function (associations) {
            var self = this;
            for (var _i = 0, associations_1 = associations; _i < associations_1.length; _i++) {
                var assoc = associations_1[_i];
                self._initAssociation(assoc);
            }
        };
        DbContext.prototype._initMethods = function (methods) {
            var self = this;
            for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
                var method = methods_1[_i];
                if (method.isQuery) {
                    self._queryInfo[method.methodName] = method;
                }
                else {
                    self._initMethod(method);
                }
            }
        };
        DbContext.prototype._updatePermissions = function (info) {
            var _this = this;
            this._serverTimezone = info.serverTimezone;
            info.permissions.forEach(function (perms) {
                var dbSet = _this.findDbSet(perms.dbSetName);
                if (!!dbSet) {
                    dbSet._getInternal().updatePermissions(perms);
                }
            });
        };
        DbContext.prototype._initAssociation = function (assoc) {
            var self = this, options = {
                dbContext: self,
                parentName: assoc.parentDbSetName,
                childName: assoc.childDbSetName,
                onDeleteAction: assoc.onDeleteAction,
                parentKeyFields: assoc.fieldRels.map(function (f) { return f.parentField; }),
                childKeyFields: assoc.fieldRels.map(function (f) { return f.childField; }),
                parentToChildrenName: assoc.parentToChildrenName,
                childToParentName: assoc.childToParentName,
                name: assoc.name
            }, name = "get" + assoc.name;
            var lazy = new jriapp_shared_7.Lazy(function () {
                var res = new association_1.Association(options);
                self._arrAssoc.push(res);
                return res;
            });
            this._assoc[name] = function () { return lazy.Value; };
        };
        DbContext.prototype._initMethod = function (methodInfo) {
            var self = this;
            this._svcMethods[methodInfo.methodName] = function (args) {
                return self._invokeMethod(methodInfo, args).then(function (res) {
                    self._checkDisposed();
                    if (!res) {
                        throw new Error(format(jriapp_shared_7.LocaleERRS.ERR_UNEXPECTED_SVC_ERROR, "operation result is empty"));
                    }
                    fn_checkError(res.error, 3);
                    return res.result;
                }).catch(function (err) {
                    self._onDataOperError(err, 3);
                    ERROR.throwDummy(err);
                });
            };
        };
        DbContext.prototype._addRequestPromise = function (req, operType, name) {
            var self = this, item = { req: req, operType: operType, name: name }, cnt = self._requests.length, oldBusy = this.isBusy;
            self._requests.push(item);
            req.finally(function () {
                if (self.getIsStateDirty()) {
                    return;
                }
                var oldBusy = self.isBusy;
                utils.arr.remove(self._requests, item);
                self.objEvents.raiseProp("requestCount");
                if (oldBusy !== self.isBusy) {
                    self.objEvents.raiseProp("isBusy");
                }
            });
            if (cnt !== self._requests.length) {
                self.objEvents.raiseProp("requestCount");
            }
            if (oldBusy !== self.isBusy) {
                self.objEvents.raiseProp("isBusy");
            }
        };
        DbContext.prototype._tryAbortRequest = function (operType, name) {
            var reqs = this._requests.filter(function (req) { return req.name === name && operType.indexOf(req.operType) > -1; });
            reqs.forEach(function (r) { r.req.abort(); });
        };
        DbContext.prototype._getMethodParams = function (methodInfo, args) {
            var self = this, methodName = methodInfo.methodName, data = { methodName: methodName, paramInfo: { parameters: [] } }, paramInfos = methodInfo.parameters;
            if (!args) {
                args = Indexer();
            }
            for (var _i = 0, paramInfos_1 = paramInfos; _i < paramInfos_1.length; _i++) {
                var pinfo = paramInfos_1[_i];
                var val = args[pinfo.name];
                if (!pinfo.isNullable && !pinfo.isArray && !(pinfo.dataType === 1 || pinfo.dataType === 10) && isNt(val)) {
                    throw new Error(format(jriapp_shared_7.LocaleERRS.ERR_SVC_METH_PARAM_INVALID, pinfo.name, val, methodInfo.methodName));
                }
                if (isFunc(val)) {
                    throw new Error(format(jriapp_shared_7.LocaleERRS.ERR_SVC_METH_PARAM_INVALID, pinfo.name, val, methodInfo.methodName));
                }
                if (pinfo.isArray && !isNt(val) && !isArray(val)) {
                    val = [val];
                }
                var value = null;
                if (pinfo.dataType === 10 && isArray(val)) {
                    value = JSON.stringify(val);
                }
                else if (isArray(val)) {
                    var arr = [];
                    for (var _a = 0, val_1 = val; _a < val_1.length; _a++) {
                        var _val = val_1[_a];
                        arr.push(stringifyValue(_val, pinfo.dateConversion, pinfo.dataType, self.serverTimezone));
                    }
                    value = JSON.stringify(arr);
                }
                else {
                    value = stringifyValue(val, pinfo.dateConversion, pinfo.dataType, self.serverTimezone);
                }
                data.paramInfo.parameters.push({ name: pinfo.name, value: value });
            }
            return data;
        };
        DbContext.prototype._invokeMethod = function (methodInfo, args) {
            var _this = this;
            var self = this;
            return delay(function () {
                self._checkDisposed();
                var data = self._getMethodParams(methodInfo, args);
                return JSON.stringify(data);
            }).then(function (postData) {
                self._checkDisposed();
                var invokeUrl = _this._getUrl("invoke"), reqPromise = http.postAjax(invokeUrl, postData, self.requestHeaders);
                self._addRequestPromise(reqPromise, 3);
                return reqPromise;
            }).then(function (res) {
                return JSON.parse(res);
            });
        };
        DbContext.prototype._loadFromCache = function (query, reason) {
            var self = this;
            return delay(function () {
                self._checkDisposed();
                var dbSet = query.dbSet;
                return dbSet._getInternal().fillFromCache({ reason: reason, query: query });
            });
        };
        DbContext.prototype._loadSubsets = function (subsets, refreshOnly, isClearAll) {
            if (refreshOnly === void 0) { refreshOnly = false; }
            if (isClearAll === void 0) { isClearAll = false; }
            var self = this, isHasSubsets = isArray(subsets) && subsets.length > 0;
            if (!isHasSubsets) {
                return;
            }
            for (var _i = 0, subsets_1 = subsets; _i < subsets_1.length; _i++) {
                var subset = subsets_1[_i];
                var dbSet = self.getDbSet(subset.dbSetName);
                if (!refreshOnly) {
                    dbSet.fillData(subset, !isClearAll);
                }
                else {
                    dbSet.refreshData(subset);
                }
            }
        };
        DbContext.prototype._onLoaded = function (response, query, reason) {
            var self = this;
            return delay(function () {
                self._checkDisposed();
                if (isNt(response)) {
                    throw new Error(format(jriapp_shared_7.LocaleERRS.ERR_UNEXPECTED_SVC_ERROR, "null result"));
                }
                var dbSetName = response.dbSetName, dbSet = self.getDbSet(dbSetName);
                if (isNt(dbSet)) {
                    throw new Error(format(jriapp_shared_7.LocaleERRS.ERR_DBSET_NAME_INVALID, dbSetName));
                }
                fn_checkError(response.error, 2);
                var isClearAll = (!!query && query.isClearPrevData);
                return dbSet._getInternal().fillFromService({
                    res: response,
                    reason: reason,
                    query: query,
                    onFillEnd: function () { self._loadSubsets(response.subsets, false, isClearAll); }
                });
            });
        };
        DbContext.prototype._dataSaved = function (response, context) {
            var self = this;
            try {
                try {
                    fn_checkError(response.error, 1);
                }
                catch (ex) {
                    var submitted_1 = [], notvalid_1 = [];
                    response.dbSets.forEach(function (jsDB) {
                        var dbSet = self._dbSets.getDbSet(jsDB.dbSetName);
                        for (var _i = 0, _a = jsDB.rows; _i < _a.length; _i++) {
                            var row = _a[_i];
                            var item = dbSet.getItemByKey(row.clientKey);
                            if (!item) {
                                throw new Error(format(jriapp_shared_7.LocaleERRS.ERR_KEY_IS_NOTFOUND, row.clientKey));
                            }
                            submitted_1.push(item);
                            if (!!row.invalid) {
                                dbSet._getInternal().setItemInvalid(row);
                                notvalid_1.push(item);
                            }
                        }
                    });
                    throw new error_1.SubmitError(ex, submitted_1, notvalid_1);
                }
                response.dbSets.forEach(function (jsDB) {
                    self._dbSets.getDbSet(jsDB.dbSetName)._getInternal().commitChanges(jsDB.rows);
                });
            }
            catch (ex) {
                self._onSubmitError(ex, context);
                ERROR.throwDummy(ex);
            }
        };
        DbContext.prototype._getChanges = function () {
            var request = { dbSets: [], trackAssocs: [] };
            this._dbSets.arrDbSets.forEach(function (dbSet) {
                dbSet.endEdit();
                var changes = dbSet._getInternal().getChanges();
                if (changes.length === 0) {
                    return;
                }
                var trackAssoc = dbSet._getInternal().getTrackAssocInfo(), jsDB = { dbSetName: dbSet.dbSetName, rows: changes };
                request.dbSets.push(jsDB);
                request.trackAssocs = request.trackAssocs.concat(trackAssoc);
            });
            return request;
        };
        DbContext.prototype._getUrl = function (action) {
            var loadUrl = this.serviceUrl;
            if (!endsWith(loadUrl, "/")) {
                loadUrl = loadUrl + "/";
            }
            loadUrl = loadUrl + [action, ""].join("/");
            return loadUrl;
        };
        DbContext.prototype._onDataOperError = function (ex, oper) {
            if (ERROR.checkIsDummy(ex)) {
                return true;
            }
            var err = (ex instanceof error_1.DataOperationError) ? ex : new error_1.DataOperationError(ex, oper);
            return this.handleError(err, this);
        };
        DbContext.prototype._onSubmitError = function (error, context) {
            if (ERROR.checkIsDummy(error)) {
                return;
            }
            var args = { error: error, isHandled: false, context: context };
            this.objEvents.raise("submit_error", args);
            if (!args.isHandled) {
                this._onDataOperError(error, 1);
            }
        };
        DbContext.prototype._onSubmitting = function (context) {
            var submittingArgs = { isCancelled: false, context: context };
            this.objEvents.raise("submitting", submittingArgs);
            return !submittingArgs.isCancelled;
        };
        DbContext.prototype._onSubmitted = function (context) {
            this.objEvents.raise("submitted", { context: context });
        };
        DbContext.prototype.waitForNotBusy = function (callback) {
            this._waitQueue.enQueue({
                prop: "isBusy",
                groupName: null,
                predicate: function (val) {
                    return !val;
                },
                action: callback,
                actionArgs: []
            });
        };
        DbContext.prototype.waitForNotSubmiting = function (callback) {
            this._waitQueue.enQueue({
                prop: "isSubmiting",
                predicate: function (val) {
                    return !val;
                },
                action: callback,
                actionArgs: [],
                groupName: "submit",
                lastWins: true
            });
        };
        DbContext.prototype._loadInternal = function (context) {
            var self = this;
            context.fn_onStart();
            delay(function () {
                self._checkDisposed();
                var oldQuery = context.dbSet.query, loadPageCount = context.loadPageCount, isPagingEnabled = context.isPagingEnabled;
                var range, pageCount = 1, pageIndex = context.pageIndex;
                context.query.pageIndex = pageIndex;
                context.dbSet._getInternal().beforeLoad(context.query, oldQuery);
                pageIndex = context.query.pageIndex;
                if (loadPageCount > 1 && isPagingEnabled) {
                    if (context.query._getInternal().isPageCached(pageIndex)) {
                        return self._loadFromCache(context.query, context.reason);
                    }
                    else {
                        range = context.query._getInternal().getCache().getNextRange(pageIndex);
                        pageIndex = range.start;
                        pageCount = range.cnt;
                    }
                }
                var requestInfo = {
                    dbSetName: context.dbSetName,
                    pageIndex: context.query.isPagingEnabled ? pageIndex : -1,
                    pageSize: context.query.pageSize,
                    pageCount: pageCount,
                    isIncludeTotalCount: context.query.isIncludeTotalCount,
                    filterInfo: context.query.filterInfo,
                    sortInfo: context.query.sortInfo,
                    paramInfo: self._getMethodParams(context.query._getInternal().getQueryInfo(), context.query.params).paramInfo,
                    queryName: context.query.queryName
                };
                var reqPromise = http.postAjax(self._getUrl("query"), JSON.stringify(requestInfo), self.requestHeaders);
                self._addRequestPromise(reqPromise, 2, requestInfo.dbSetName);
                return reqPromise.then(function (res) {
                    return JSON.parse(res);
                }).then(function (response) {
                    self._checkDisposed();
                    return self._onLoaded(response, context.query, context.reason);
                });
            }).then(function (loadRes) {
                self._checkDisposed();
                context.fn_onOK(loadRes);
            }).catch(function (err) {
                context.fn_onErr(err);
            });
        };
        DbContext.prototype._onItemRefreshed = function (res, item) {
            try {
                fn_checkError(res.error, 4);
                if (!res.rowInfo) {
                    item._aspect.dbSet.removeItem(item);
                    item.dispose();
                    throw new Error(jriapp_shared_7.LocaleERRS.ERR_ITEM_DELETED_BY_ANOTHER_USER);
                }
                else {
                    item._aspect._refreshValues(res.rowInfo, 2);
                }
            }
            catch (ex) {
                this._onDataOperError(ex, 4);
                ERROR.throwDummy(ex);
            }
        };
        DbContext.prototype._loadRefresh = function (args) {
            var self = this;
            args.fn_onStart();
            return delay().then(function () {
                self._checkDisposed();
                var request = {
                    dbSetName: args.item._aspect.dbSetName,
                    rowInfo: args.item._aspect._getRowInfo()
                };
                args.item._aspect._checkCanRefresh();
                var url = self._getUrl("refresh"), reqPromise = http.postAjax(url, JSON.stringify(request), self.requestHeaders);
                self._addRequestPromise(reqPromise, 4);
                return reqPromise;
            }).then(function (res) {
                return JSON.parse(res);
            }).then(function (res) {
                self._checkDisposed();
                args.fn_onOK(res);
            }).catch(function (err) {
                args.fn_onErr(err);
            });
        };
        DbContext.prototype._refreshItem = function (item) {
            var self = this, deferred = createDeferred();
            var context = {
                item: item,
                dbSet: item._aspect.dbSet,
                fn_onStart: function () {
                    context.item._aspect._setIsRefreshing(true);
                    context.dbSet._getInternal().setIsLoading(true);
                },
                fn_onEnd: function () {
                    context.dbSet._getInternal().setIsLoading(false);
                    context.item._aspect._setIsRefreshing(false);
                },
                fn_onErr: function (ex) {
                    try {
                        context.fn_onEnd();
                        self._onDataOperError(ex, 4);
                    }
                    finally {
                        deferred.reject();
                    }
                },
                fn_onOK: function (res) {
                    try {
                        self._onItemRefreshed(res, item);
                        context.fn_onEnd();
                    }
                    finally {
                        deferred.resolve(item);
                    }
                }
            };
            context.dbSet.waitForNotBusy(function () {
                try {
                    self._checkDisposed();
                    self._loadRefresh(context);
                }
                catch (err) {
                    context.fn_onErr(err);
                }
            }, item._key);
            return deferred.promise();
        };
        DbContext.prototype._getQueryInfo = function (name) {
            return this._queryInfo[name];
        };
        DbContext.prototype._onDbSetHasChangesChanged = function (dbSet) {
            var old = this._isHasChanges;
            this._isHasChanges = false;
            if (dbSet.isHasChanges) {
                this._isHasChanges = true;
            }
            else {
                var len = this._dbSets.arrDbSets.length;
                for (var i = 0; i < len; i += 1) {
                    var test = this._dbSets.arrDbSets[i];
                    if (test.isHasChanges) {
                        this._isHasChanges = true;
                        break;
                    }
                }
            }
            if (this._isHasChanges !== old) {
                this.objEvents.raiseProp("isHasChanges");
            }
        };
        DbContext.prototype._load = function (query, reason) {
            if (!query) {
                throw new Error(jriapp_shared_7.LocaleERRS.ERR_DB_LOAD_NO_QUERY);
            }
            var self = this, deferred = createDeferred();
            var prevQuery = null;
            var context = {
                query: query,
                reason: reason,
                loadPageCount: query.loadPageCount,
                pageIndex: query.pageIndex,
                isPagingEnabled: query.isPagingEnabled,
                dbSetName: query.dbSetName,
                dbSet: self.getDbSet(query.dbSetName),
                fn_onStart: function () {
                    context.dbSet._getInternal().setIsLoading(true);
                    if (context.query.isForAppend) {
                        prevQuery = context.dbSet.query;
                    }
                },
                fn_onEnd: function () {
                    if (context.query.isForAppend) {
                        context.dbSet._getInternal().setQuery(prevQuery);
                        context.query.dispose();
                    }
                    context.dbSet._getInternal().setIsLoading(false);
                },
                fn_onOK: function (res) {
                    try {
                        context.fn_onEnd();
                    }
                    finally {
                        deferred.resolve(res);
                    }
                },
                fn_onErr: function (ex) {
                    try {
                        context.fn_onEnd();
                        self._onDataOperError(ex, 2);
                    }
                    finally {
                        deferred.reject();
                    }
                }
            };
            if (query.isClearPrevData) {
                self._tryAbortRequest([2, 4], context.dbSetName);
            }
            context.dbSet.waitForNotBusy(function () {
                try {
                    self._checkDisposed();
                    self._loadInternal(context);
                }
                catch (err) {
                    context.fn_onErr(err);
                }
            }, query.isClearPrevData ? context.dbSetName : null);
            return deferred.promise();
        };
        DbContext.prototype._submitChanges = function (args, context) {
            var self = this, noChanges = "NO_CHANGES";
            args.fn_onStart();
            delay(function () {
                self._checkDisposed();
                var res = self._getChanges();
                if (res.dbSets.length === 0) {
                    ERROR.abort(noChanges);
                }
                return res;
            }).then(function (changes) {
                var reqPromise = http.postAjax(self._getUrl("save"), JSON.stringify(changes), self.requestHeaders);
                self._addRequestPromise(reqPromise, 1);
                return reqPromise;
            }).then(function (res) {
                return JSON.parse(res);
            }).then(function (res) {
                self._checkDisposed();
                self._dataSaved(res, context);
                if (!!res.subsets) {
                    self._loadSubsets(res.subsets, true);
                }
            }).then(function () {
                self._checkDisposed();
                args.fn_onOk();
            }).catch(function (er) {
                if (!self.getIsStateDirty() && ERROR.checkIsAbort(er) && er.reason === noChanges) {
                    args.fn_onOk();
                }
                else {
                    args.fn_onErr(er);
                }
            });
        };
        DbContext.prototype._getInternal = function () {
            return this._internal;
        };
        DbContext.prototype.initialize = function (options) {
            var _this = this;
            if (!!this._initState) {
                return this._initState;
            }
            var self = this, opts = merge(options, {
                serviceUrl: null,
                permissions: null
            });
            if (!isString(opts.serviceUrl)) {
                throw new Error(format(jriapp_shared_7.LocaleERRS.ERR_PARAM_INVALID, "serviceUrl", opts.serviceUrl));
            }
            this._serviceUrl = opts.serviceUrl;
            this._initDbSets();
            this._initState = delay(function () {
                if (!!opts.permissions) {
                    return opts.permissions;
                }
                else {
                    var loadUrl = _this._getUrl("permissions");
                    var ajaxPromise = http.getAjax(loadUrl, self.requestHeaders);
                    _this._addRequestPromise(ajaxPromise, 5);
                    return ajaxPromise.then(function (permissions) {
                        return JSON.parse(permissions);
                    });
                }
            }).then(function (res) {
                self._checkDisposed();
                self._updatePermissions(res);
                self.objEvents.raiseProp("isInitialized");
            }).catch(function (err) {
                self._onDataOperError(err, 5);
                ERROR.throwDummy(err);
            });
            return this._initState;
        };
        DbContext.prototype.addOnDisposed = function (handler, nmspace, context) {
            this.objEvents.addOnDisposed(handler, nmspace, context);
        };
        DbContext.prototype.offOnDisposed = function (nmspace) {
            this.objEvents.offOnDisposed(nmspace);
        };
        DbContext.prototype.addOnError = function (handler, nmspace, context) {
            this.objEvents.addOnError(handler, nmspace, context);
        };
        DbContext.prototype.offOnError = function (nmspace) {
            this.objEvents.offOnError(nmspace);
        };
        DbContext.prototype.addOnSubmitting = function (fn, nmspace, context) {
            this.objEvents.on("submitting", fn, nmspace, context);
        };
        DbContext.prototype.offOnSubmitting = function (nmspace) {
            this.objEvents.off("submitting", nmspace);
        };
        DbContext.prototype.addOnSubmitted = function (fn, nmspace, context) {
            this.objEvents.on("submitted", fn, nmspace, context);
        };
        DbContext.prototype.offOnSubmitted = function (nmspace) {
            this.objEvents.off("submitted", nmspace);
        };
        DbContext.prototype.addOnSubmitError = function (fn, nmspace, context) {
            this.objEvents.on("submit_error", fn, nmspace, context);
        };
        DbContext.prototype.offOnSubmitError = function (nmspace) {
            this.objEvents.off("submit_error", nmspace);
        };
        DbContext.prototype.addOnDbSetCreating = function (fn, nmspace, context) {
            this.objEvents.on("dbset_creating", fn, nmspace, context);
        };
        DbContext.prototype.offOnDbSetCreating = function (nmspace) {
            this.objEvents.off("dbset_creating", nmspace);
        };
        DbContext.prototype.getDbSet = function (name) {
            return this._dbSets.getDbSet(name);
        };
        DbContext.prototype.findDbSet = function (name) {
            return this._dbSets.findDbSet(name);
        };
        DbContext.prototype.getAssociation = function (name) {
            var name2 = "get" + name, fn = this._assoc[name2];
            if (!fn) {
                throw new Error(format(jriapp_shared_7.LocaleERRS.ERR_ASSOC_NAME_INVALID, name));
            }
            return fn();
        };
        DbContext.prototype.submitChanges = function () {
            var self = this;
            if (!!this._pendingSubmit) {
                return this._pendingSubmit.promise;
            }
            var deferred = createDeferred(), submitState = { promise: deferred.promise() };
            this._pendingSubmit = submitState;
            var context = Indexer(), args = {
                fn_onStart: function () {
                    if (!self._isSubmiting) {
                        self._isSubmiting = true;
                        self.objEvents.raiseProp("isSubmiting");
                    }
                    self._pendingSubmit = null;
                },
                fn_onEnd: function () {
                    if (self._isSubmiting) {
                        self._isSubmiting = false;
                        self.objEvents.raiseProp("isSubmiting");
                    }
                },
                fn_onErr: function (ex) {
                    try {
                        args.fn_onEnd();
                        self._onSubmitError(ex, context);
                    }
                    finally {
                        deferred.reject();
                    }
                },
                fn_onOk: function () {
                    try {
                        args.fn_onEnd();
                    }
                    finally {
                        deferred.resolve();
                        self._onSubmitted(context);
                    }
                }
            };
            utils.queue.enque(function () {
                self.waitForNotBusy(function () {
                    try {
                        self._checkDisposed();
                        if (self._onSubmitting(context)) {
                            self._submitChanges(args, context);
                        }
                    }
                    catch (err) {
                        args.fn_onErr(err);
                    }
                });
            });
            return submitState.promise;
        };
        DbContext.prototype.load = function (query) {
            return this._load(query, 0);
        };
        DbContext.prototype.acceptChanges = function () {
            this._dbSets.arrDbSets.forEach(function (dbSet) {
                dbSet.acceptChanges();
            });
        };
        DbContext.prototype.rejectChanges = function () {
            this._dbSets.arrDbSets.forEach(function (dbSet) {
                dbSet.rejectChanges();
            });
        };
        DbContext.prototype.abortRequests = function (reason, operType) {
            if (isNt(operType)) {
                operType = 0;
            }
            var arr = this._requests.filter(function (a) {
                return operType === 0 ? true : (a.operType === operType);
            });
            for (var i = 0; i < arr.length; i += 1) {
                var promise = arr[i];
                promise.req.abort(reason);
            }
        };
        Object.defineProperty(DbContext.prototype, "associations", {
            get: function () {
                return this._assoc;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbContext.prototype, "serviceMethods", {
            get: function () {
                return this._svcMethods;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbContext.prototype, "dbSets", {
            get: function () {
                return this._dbSets;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbContext.prototype, "serviceUrl", {
            get: function () {
                return this._serviceUrl;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbContext.prototype, "isInitialized", {
            get: function () {
                return !!this._initState && this._initState.state() === 2;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbContext.prototype, "isBusy", {
            get: function () {
                return (this.requestCount > 0) || this.isSubmiting;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbContext.prototype, "isSubmiting", {
            get: function () {
                return this._isSubmiting;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbContext.prototype, "serverTimezone", {
            get: function () {
                return this._serverTimezone;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbContext.prototype, "isHasChanges", {
            get: function () {
                return this._isHasChanges;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbContext.prototype, "requestCount", {
            get: function () {
                return this._requests.length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DbContext.prototype, "requestHeaders", {
            get: function () {
                return this._requestHeaders;
            },
            set: function (v) {
                this._requestHeaders = v;
            },
            enumerable: false,
            configurable: true
        });
        return DbContext;
    }(jriapp_shared_7.BaseObject));
    exports.DbContext = DbContext;
});
define("jriapp_db/entity_aspect", ["require", "exports", "jriapp_shared", "jriapp_shared/errors", "jriapp_shared/collection/utils", "jriapp_shared/collection/aspect", "jriapp_db/error"], function (require, exports, jriapp_shared_8, errors_1, utils_4, aspect_1, error_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityAspect = void 0;
    var utils = jriapp_shared_8.Utils, _undefined = utils.check._undefined, format = utils.str.format, _a = utils.core, getValue = _a.getValue, setValue = _a.setValue, uuid = _a.uuid, compareVals = utils_4.ValueUtils.compareVals, parseValue = utils_4.ValueUtils.parseValue, sys = utils.sys;
    function fn_isNotSubmittable(fieldInfo) {
        switch (fieldInfo.fieldType) {
            case 1:
            case 3:
            case 2:
                return true;
            default:
                return false;
        }
    }
    function _fn_walkChanges(name, val, fn) {
        if (!!val.nested && val.nested.length > 0) {
            var len = val.nested.length;
            for (var i = 0; i < len; i += 1) {
                var prop = val.nested[i];
                if (!!prop.nested && prop.nested.length > 0) {
                    _fn_walkChanges(name + "." + prop.fieldName, prop, fn);
                }
                else {
                    fn(name + "." + prop.fieldName, prop);
                }
            }
        }
        else {
            fn(name, val);
        }
    }
    function fn_walkChanges(val, fn) {
        _fn_walkChanges(val.fieldName, val, fn);
    }
    var EntityAspect = (function (_super) {
        __extends(EntityAspect, _super);
        function EntityAspect(dbSet, vals, key, isNew) {
            var _this = _super.call(this, dbSet, vals, key, isNew) || this;
            _this._srvKey = !isNew ? key : null;
            _this._origVals = null;
            _this._disposables = null;
            _this._savedStatus = null;
            return _this;
        }
        EntityAspect.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            try {
                if (!this.isDetached) {
                    this.cancelEdit();
                    this.rejectChanges();
                }
                var objs = this._disposables;
                this._disposables = null;
                if (!!objs && objs.length > 0) {
                    var k = objs.length - 1;
                    for (var i = k; i >= 0; --i) {
                        objs[i].dispose();
                    }
                }
            }
            finally {
                _super.prototype.dispose.call(this);
            }
        };
        EntityAspect.prototype._getValue = function (name, ver) {
            switch (ver) {
                case 2:
                    if (!this._origVals) {
                        throw new Error("Invalid Operation, no Stored Version: " + ver);
                    }
                    return getValue(this._origVals, name);
                default:
                    return _super.prototype._getValue.call(this, name, ver);
            }
        };
        EntityAspect.prototype._setValue = function (name, val, ver) {
            switch (ver) {
                case 2:
                    if (!this._origVals) {
                        throw new Error("Invalid Operation, no Stored Version: " + ver);
                    }
                    setValue(this._origVals, name, val, false);
                    break;
                default:
                    _super.prototype._setValue.call(this, name, val, ver);
                    break;
            }
        };
        EntityAspect.prototype._storeVals = function (toVer) {
            switch (toVer) {
                case 2:
                    this._origVals = this._cloneVals();
                    break;
                default:
                    _super.prototype._storeVals.call(this, toVer);
                    break;
            }
        };
        EntityAspect.prototype._restoreVals = function (fromVer) {
            switch (fromVer) {
                case 2:
                    if (!this._origVals) {
                        throw new Error("Invalid Operation, no Stored Version: " + fromVer);
                    }
                    this._setVals(this._origVals);
                    this._origVals = null;
                    break;
                default:
                    _super.prototype._restoreVals.call(this, fromVer);
                    break;
            }
        };
        EntityAspect.prototype._onFieldChanged = function (fieldName, dependents, fieldInfo) {
            sys.raiseProp(this.item, fieldName);
            var info = fieldInfo || this.coll.getFieldInfo(fieldName);
            if (!!info.dependents) {
                for (var _i = 0, _a = info.dependents; _i < _a.length; _i++) {
                    var d = _a[_i];
                    dependents[d] = true;
                }
            }
        };
        EntityAspect.prototype._getValueChange = function (fullName, fieldInfo, changedOnly) {
            var self = this, dbSet = self.dbSet;
            var res = null;
            if (fn_isNotSubmittable(fieldInfo)) {
                return res;
            }
            switch (fieldInfo.fieldType) {
                case 6:
                    res = {
                        fieldName: fieldInfo.fieldName,
                        val: null,
                        orig: null,
                        flags: 0,
                        nested: null
                    };
                    break;
                case 5:
                    res = { fieldName: fieldInfo.fieldName, val: null, orig: null, flags: 0, nested: [] };
                    var len = fieldInfo.nested.length;
                    for (var i = 0; i < len; i += 1) {
                        var tmp = self._getValueChange(fullName + "." + fieldInfo.nested[i].fieldName, fieldInfo.nested[i], changedOnly);
                        if (!!tmp) {
                            res.nested.push(tmp);
                        }
                    }
                    break;
                default:
                    var newVal = dbSet._getInternal().getStrValue(self._getValue(fullName, 0), fieldInfo), oldV = !self.hasOrigVals ? newVal : dbSet._getInternal().getStrValue(self._getValue(fullName, 2), fieldInfo), isChanged = (oldV !== newVal);
                    if (isChanged) {
                        res = {
                            fieldName: fieldInfo.fieldName,
                            val: newVal,
                            orig: oldV,
                            flags: (1 | 2),
                            nested: null
                        };
                    }
                    else if (fieldInfo.isPrimaryKey > 0 || fieldInfo.fieldType === 4 || fieldInfo.isNeedOriginal) {
                        res = {
                            fieldName: fieldInfo.fieldName,
                            val: newVal,
                            orig: oldV,
                            flags: 2,
                            nested: null
                        };
                    }
                    else {
                        res = {
                            fieldName: fieldInfo.fieldName,
                            val: null,
                            orig: null,
                            flags: 0,
                            nested: null
                        };
                    }
                    break;
            }
            if (changedOnly) {
                if (fieldInfo.fieldType === 5) {
                    return (res.nested.length > 0) ? res : null;
                }
                else if ((res.flags & 1) === 1) {
                    return res;
                }
                else {
                    return null;
                }
            }
            else {
                return res;
            }
        };
        EntityAspect.prototype._getValueChanges = function (changedOnly) {
            var self = this, flds = this.dbSet.getFieldInfos();
            var res = flds.map(function (fld) {
                return self._getValueChange(fld.fieldName, fld, changedOnly);
            });
            var res2 = res.filter(function (vc) {
                return !!vc;
            });
            return res2;
        };
        EntityAspect.prototype._fldChanging = function (_fieldName, _fieldInfo, _oldV, _newV) {
            if (!this._origVals) {
                this._storeVals(2);
            }
            return true;
        };
        EntityAspect.prototype._skipValidate = function (fieldInfo, val) {
            var childToParentNames = this.dbSet._getInternal().getChildToParentNames(fieldInfo.fieldName);
            var res = false;
            if (!!childToParentNames && val === null) {
                var len = childToParentNames.length;
                for (var i = 0; i < len; i += 1) {
                    res = !!this._getFieldVal(childToParentNames[i]);
                    if (res) {
                        break;
                    }
                }
            }
            return res;
        };
        EntityAspect.prototype._beginEdit = function () {
            if (!_super.prototype._beginEdit.call(this)) {
                return false;
            }
            this._savedStatus = this.status;
            return true;
        };
        EntityAspect.prototype._endEdit = function () {
            if (!_super.prototype._endEdit.call(this)) {
                return false;
            }
            this._savedStatus = null;
            return true;
        };
        EntityAspect.prototype._cancelEdit = function () {
            if (!this.isEditing) {
                return false;
            }
            var self = this, changes = this._getValueChanges(true), dbSet = this.dbSet;
            this._restoreVals(1);
            dbSet.errors.removeAllErrors(this.item);
            this._setStatus(this._savedStatus);
            this._savedStatus = null;
            var dependents = utils.core.Indexer();
            for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {
                var change = changes_1[_i];
                var fld = dbSet.getFieldInfo(change.fieldName);
                if (!fld) {
                    throw new Error(format(jriapp_shared_8.LocaleERRS.ERR_DBSET_INVALID_FIELDNAME, self.dbSetName, change.fieldName));
                }
                self._onFieldChanged(change.fieldName, dependents, fld);
            }
            self._updateDependents(dependents);
            return true;
        };
        EntityAspect.prototype._setStatus = function (v) {
            var old = this.status;
            if (old !== v) {
                var internal = this.dbSet._getInternal();
                _super.prototype._setStatus.call(this, v);
                if (v !== 0) {
                    internal.addToChanged(this.item);
                }
                else {
                    internal.removeFromChanged(this.key);
                }
                internal.onItemStatusChanged(this.item, old);
            }
        };
        EntityAspect.prototype._addDisposable = function (obj) {
            if (!this._disposables) {
                this._disposables = [];
            }
            this._disposables.push(obj);
        };
        EntityAspect.prototype._updateDependents = function (dependents) {
            var item = this.item, queue = utils.async.getTaskQueue();
            queue.enque(function () {
                if (item.getIsStateDirty()) {
                    return;
                }
                utils.core.forEach(dependents, function (name) {
                    sys.raiseProp(item, name);
                });
            });
        };
        EntityAspect.prototype._updateKeys = function (key) {
            this._setSrvKey(key);
            this._setKey(key);
        };
        EntityAspect.prototype._checkCanRefresh = function () {
            if (this.key === null || this.status === 1) {
                throw new Error(jriapp_shared_8.LocaleERRS.ERR_OPER_REFRESH_INVALID);
            }
        };
        EntityAspect.prototype._refreshValue = function (val, fullName, refreshMode, dependents) {
            var self = this, fld = self.dbSet.getFieldInfo(fullName);
            if (!fld) {
                throw new Error(format(jriapp_shared_8.LocaleERRS.ERR_DBSET_INVALID_FIELDNAME, self.dbSetName, fullName));
            }
            var stz = self.serverTimezone, dataType = fld.dataType, dcnv = fld.dateConversion;
            var newVal = parseValue(val, dataType, dcnv, stz), oldVal = self._getValue(fullName, 0);
            switch (refreshMode) {
                case 3:
                    {
                        if (!compareVals(newVal, oldVal, dataType)) {
                            self._setValue(fullName, newVal, 0);
                            self._onFieldChanged(fullName, dependents, fld);
                        }
                    }
                    break;
                case 1:
                    {
                        if (self.hasOrigVals) {
                            self._setValue(fullName, newVal, 2);
                        }
                        if (self.hasTempVals) {
                            self._setValue(fullName, newVal, 1);
                        }
                        if (!compareVals(newVal, oldVal, dataType)) {
                            self._setValue(fullName, newVal, 0);
                            self._onFieldChanged(fullName, dependents, fld);
                        }
                    }
                    break;
                case 2:
                    {
                        var origOldVal = _undefined;
                        if (self.hasOrigVals) {
                            origOldVal = self._getValue(fullName, 2);
                            self._setValue(fullName, newVal, 2);
                        }
                        if (origOldVal === _undefined || compareVals(origOldVal, oldVal, dataType)) {
                            if (!compareVals(newVal, oldVal, dataType)) {
                                self._setValue(fullName, newVal, 0);
                                self._onFieldChanged(fullName, dependents, fld);
                            }
                        }
                    }
                    break;
                default:
                    throw new Error(format(jriapp_shared_8.LocaleERRS.ERR_PARAM_INVALID, "refreshMode", refreshMode));
            }
        };
        EntityAspect.prototype._refreshValues = function (rowInfo, refreshMode) {
            var self = this, oldStatus = this.status;
            if (!this.getIsDisposed()) {
                if (!refreshMode) {
                    refreshMode = 1;
                }
                var dependents_1 = utils.core.Indexer();
                for (var _i = 0, _a = rowInfo.values; _i < _a.length; _i++) {
                    var val = _a[_i];
                    fn_walkChanges(val, function (fullName, vc) {
                        if ((vc.flags & 4)) {
                            self._refreshValue(vc.val, fullName, refreshMode, dependents_1);
                        }
                    });
                }
                if (oldStatus === 2) {
                    var changes = this._getValueChanges(true);
                    if (changes.length === 0) {
                        this._origVals = null;
                        this._setStatus(0);
                    }
                }
                this._updateDependents(dependents_1);
            }
        };
        EntityAspect.prototype._getRowInfo = function () {
            var res = {
                values: this._getValueChanges(false),
                changeType: this.status,
                serverKey: this.srvKey,
                clientKey: this.key,
                error: null
            };
            return res;
        };
        EntityAspect.prototype._getCalcFieldVal = function (fieldName) {
            return this.dbSet._getInternal().getCalcFieldVal(fieldName, this.item);
        };
        EntityAspect.prototype._getNavFieldVal = function (fieldName) {
            return this.dbSet._getInternal().getNavFieldVal(fieldName, this.item);
        };
        EntityAspect.prototype._setNavFieldVal = function (fieldName, value) {
            this.dbSet._getInternal().setNavFieldVal(fieldName, this.item, value);
        };
        EntityAspect.prototype._clearFieldVal = function (fieldName) {
            this._setValue(fieldName, null, 0);
        };
        EntityAspect.prototype._getFieldVal = function (fieldName) {
            return this._getValue(fieldName, 0);
        };
        EntityAspect.prototype._setFieldVal = function (fieldName, val) {
            if (this.isCancelling) {
                return false;
            }
            var dbSetName = this.dbSetName, dbSet = this.dbSet, oldV = this._getFieldVal(fieldName), fieldInfo = this.getFieldInfo(fieldName);
            var newV = val, res = false;
            if (!fieldInfo) {
                throw new Error(format(jriapp_shared_8.LocaleERRS.ERR_DBSET_INVALID_FIELDNAME, dbSetName, fieldName));
            }
            if (!(this.isEditing || this.isUpdating)) {
                this.beginEdit();
            }
            try {
                if (fieldInfo.dataType === 1 && fieldInfo.isNullable && !newV) {
                    newV = null;
                }
                if (oldV !== newV) {
                    if (fieldInfo.isReadOnly && !(this.isNew && fieldInfo.allowClientDefault)) {
                        throw new Error(jriapp_shared_8.LocaleERRS.ERR_FIELD_READONLY);
                    }
                    if (this._fldChanging(fieldName, fieldInfo, oldV, newV)) {
                        this._setValue(fieldName, newV, 0);
                        if (!(fieldInfo.fieldType === 1 || fieldInfo.fieldType === 6)) {
                            switch (this.status) {
                                case 0:
                                    this._setStatus(2);
                                    break;
                            }
                        }
                        var dependents = utils.core.Indexer();
                        this._onFieldChanged(fieldName, dependents, fieldInfo);
                        this._updateDependents(dependents);
                        res = true;
                    }
                    dbSet.errors.removeError(this.item, fieldName);
                    var validationInfo = this._validateField(fieldName);
                    if (!!validationInfo) {
                        throw new errors_1.ValidationError([validationInfo], this);
                    }
                }
            }
            catch (ex) {
                var error = void 0;
                if (sys.isValidationError(ex)) {
                    error = ex;
                }
                else {
                    error = new errors_1.ValidationError([
                        { fieldName: fieldName, errors: [ex.message] }
                    ], this);
                }
                dbSet.errors.addError(this.item, fieldName, error.validations[0].errors);
                throw error;
            }
            return res;
        };
        EntityAspect.prototype._setSrvKey = function (v) {
            this._srvKey = v;
        };
        EntityAspect.prototype._acceptChanges = function (rowInfo) {
            if (this.getIsDisposed()) {
                return;
            }
            var oldStatus = this.status, dbSet = this.dbSet, internal = dbSet._getInternal(), errors = dbSet.errors;
            if (oldStatus !== 0) {
                internal.onCommitChanges(this.item, true, false, oldStatus);
                if (oldStatus === 3) {
                    internal.removeFromChanged(this.key);
                    errors.removeAllErrors(this.item);
                    if (!this.getIsStateDirty()) {
                        this.dispose();
                    }
                }
                else {
                    this._origVals = null;
                    if (this.hasTempVals) {
                        this._storeVals(1);
                    }
                    this._setStatus(0);
                    errors.removeAllErrors(this.item);
                    if (!!rowInfo) {
                        this._refreshValues(rowInfo, 3);
                    }
                    internal.onCommitChanges(this.item, false, false, oldStatus);
                }
            }
        };
        EntityAspect.prototype.deleteItem = function () {
            return this.deleteOnSubmit();
        };
        EntityAspect.prototype.deleteOnSubmit = function () {
            if (this.getIsStateDirty()) {
                return false;
            }
            var oldStatus = this.status, dbSet = this.dbSet;
            var args = { item: this.item, isCancel: false };
            dbSet._getInternal().onItemDeleting(args);
            if (args.isCancel) {
                return false;
            }
            if (oldStatus === 1) {
                dbSet.removeItem(this.item);
            }
            else {
                this._setStatus(3);
            }
            return true;
        };
        EntityAspect.prototype.acceptChanges = function () {
            this._acceptChanges(null);
        };
        EntityAspect.prototype.rejectChanges = function () {
            if (this.getIsDisposed()) {
                return;
            }
            var self = this, oldStatus = self.status, dbSet = self.dbSet, internal = dbSet._getInternal(), errors = dbSet.errors;
            if (oldStatus !== 0) {
                internal.onCommitChanges(self.item, true, true, oldStatus);
                if (oldStatus === 1) {
                    internal.removeFromChanged(this.key);
                    errors.removeAllErrors(this.item);
                    if (!this.getIsStateDirty()) {
                        this.dispose();
                    }
                }
                else {
                    var changes = self._getValueChanges(true);
                    if (self.hasOrigVals) {
                        self._restoreVals(2);
                        if (self.hasTempVals) {
                            self._storeVals(1);
                        }
                    }
                    self._setStatus(0);
                    errors.removeAllErrors(this.item);
                    var dependents_2 = utils.core.Indexer();
                    for (var _i = 0, changes_2 = changes; _i < changes_2.length; _i++) {
                        var change = changes_2[_i];
                        fn_walkChanges(change, function (fullName) {
                            self._onFieldChanged(fullName, dependents_2, dbSet.getFieldInfo(fullName));
                        });
                    }
                    internal.onCommitChanges(this.item, false, true, oldStatus);
                    this._updateDependents(dependents_2);
                }
            }
        };
        EntityAspect.prototype.submitChanges = function () {
            var removeHandler = function () {
                dbxt.offOnSubmitError(uniqueID);
            };
            var dbxt = this.dbSet.dbContext, uniqueID = uuid();
            dbxt.addOnSubmitError(function (_, args) {
                if (args.error instanceof error_2.SubmitError) {
                    var submitErr = args.error;
                    if (submitErr.notValidated.length > 0) {
                        args.isHandled = true;
                    }
                }
            }, uniqueID);
            var promise = dbxt.submitChanges();
            promise.then(removeHandler, removeHandler);
            return promise;
        };
        EntityAspect.prototype.refresh = function () {
            var dbxt = this.dbSet.dbContext;
            return dbxt._getInternal().refreshItem(this.item);
        };
        EntityAspect.prototype.toString = function () {
            return this.dbSetName + "EntityAspect";
        };
        Object.defineProperty(EntityAspect.prototype, "hasOrigVals", {
            get: function () {
                return !!this._origVals;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EntityAspect.prototype, "srvKey", {
            get: function () {
                return this._srvKey;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EntityAspect.prototype, "isCanSubmit", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EntityAspect.prototype, "dbSetName", {
            get: function () {
                return this.dbSet.dbSetName;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EntityAspect.prototype, "serverTimezone", {
            get: function () {
                return this.dbSet.dbContext.serverTimezone;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EntityAspect.prototype, "dbSet", {
            get: function () {
                return this.coll;
            },
            enumerable: false,
            configurable: true
        });
        return EntityAspect;
    }(aspect_1.ItemAspect));
    exports.EntityAspect = EntityAspect;
});
define("jriapp_db/int", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("jriapp_db/dataview", ["require", "exports", "jriapp_shared", "jriapp_shared/collection/base"], function (require, exports, jriapp_shared_9, base_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataView = void 0;
    var utils = jriapp_shared_9.Utils, isFunc = utils.check.isFunc, format = utils.str.format, extend = utils.core.extend, ERROR = utils.err, sys = utils.sys;
    var VIEW_EVENTS;
    (function (VIEW_EVENTS) {
        VIEW_EVENTS["refreshed"] = "view_refreshed";
    })(VIEW_EVENTS || (VIEW_EVENTS = {}));
    var DataView = (function (_super) {
        __extends(DataView, _super);
        function DataView(options) {
            var _this = _super.call(this) || this;
            if (!sys.isCollection(options.dataSource)) {
                throw new Error(jriapp_shared_9.LocaleERRS.ERR_DATAVIEW_DATASRC_INVALID);
            }
            if (!!options.fn_filter && !isFunc(options.fn_filter)) {
                throw new Error(jriapp_shared_9.LocaleERRS.ERR_DATAVIEW_FILTER_INVALID);
            }
            _this._refreshDebounce = new jriapp_shared_9.Debounce(options.refreshTimeout || 0);
            _this._dataSource = options.dataSource;
            _this._fn_filter = options.fn_filter || null;
            _this._fn_sort = options.fn_sort || null;
            _this._fn_itemsProvider = options.fn_itemsProvider || null;
            _this._fn_sortHandler = options.fn_sortHandler || null;
            _this._isAddingNew = false;
            _this._bindDS();
            return _this;
        }
        DataView.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._refreshDebounce.dispose();
            this._unbindDS();
            this._dataSource = null;
            this._fn_filter = null;
            this._fn_sort = null;
            this._fn_sortHandler = null;
            _super.prototype.dispose.call(this);
        };
        DataView.prototype._isOwnsItems = function () {
            return false;
        };
        DataView.prototype._onAddNew = function (item) {
            var args = {
                changeType: 1,
                reason: 0,
                oper: 2,
                items: [item],
                new_key: item._key
            };
            this._onCollectionChanged(args);
        };
        DataView.prototype._filterForPaging = function (items) {
            var len = items.length, skip = this.pageSize * this.pageIndex, take = this.pageSize;
            var start = skip, end = len > (start + take) ? (start + take) : len;
            if (start >= len) {
                return [];
            }
            var result = items.slice(start, end);
            return result;
        };
        DataView.prototype._onViewRefreshed = function (args) {
            this.objEvents.raise("view_refreshed", args);
        };
        DataView.prototype._refresh = function (reason) {
            var _this = this;
            this._refreshDebounce.enque(function () {
                _this._refreshSync(reason);
            });
        };
        DataView.prototype._refreshSync = function (reason) {
            if (this.getIsStateDirty()) {
                return;
            }
            try {
                var items = void 0;
                var ds = this._dataSource;
                if (!ds || ds.getIsStateDirty()) {
                    this.clear();
                    this._onViewRefreshed({});
                    return;
                }
                if (!!this._fn_itemsProvider) {
                    items = this._fn_itemsProvider(ds);
                }
                else {
                    items = ds.items;
                }
                if (!!this._fn_filter) {
                    items = items.filter(this._fn_filter);
                }
                if (!!this._fn_sort) {
                    items = items.sort(this._fn_sort);
                }
                this._fillItems({ items: items, reason: reason, clear: true, isAppend: false });
                this._onViewRefreshed({});
            }
            catch (ex) {
                ERROR.reThrow(ex, this.handleError(ex, this));
            }
        };
        DataView.prototype._fillItems = function (data) {
            data = extend({
                items: [],
                reason: 3,
                clear: true,
                isAppend: false
            }, data);
            var self = this, newItems = [], items = [], isClearAll = !!data.clear;
            if (!!isClearAll) {
                this._clear(data.reason, 1);
            }
            var _items = (this.isPagingEnabled && !data.isAppend) ? this._filterForPaging(data.items) : data.items;
            for (var _i = 0, _items_1 = _items; _i < _items_1.length; _i++) {
                var item = _items_1[_i];
                var oldItem = self.getItemByKey(item._key);
                if (!oldItem) {
                    self._appendItem(item);
                    newItems.push(item);
                    items.push(item);
                }
                else {
                    items.push(oldItem);
                }
            }
            if (newItems.length > 0) {
                this._onCountChanged();
            }
            if (isClearAll) {
                this.totalCount = data.items.length;
            }
            else {
                this.totalCount = this.totalCount + newItems.length;
            }
            this._onCollectionChanged({
                changeType: 2,
                reason: data.reason,
                oper: 1,
                items: newItems
            });
            this._onFillEnd({
                items: items,
                newItems: newItems,
                reason: data.reason
            });
            if (isClearAll) {
                this.moveFirst();
            }
            return newItems;
        };
        DataView.prototype._onDSCollectionChanged = function (_, args) {
            var self = this;
            switch (args.changeType) {
                case 2:
                    this._refresh(3);
                    break;
                case 1:
                    {
                        if (!this._isAddingNew) {
                            var items = (!self._fn_filter) ? args.items : args.items.filter(self._fn_filter);
                            if (items.length > 0) {
                                self.appendItems(items);
                            }
                        }
                    }
                    break;
                case 0:
                    {
                        for (var _i = 0, _a = args.items; _i < _a.length; _i++) {
                            var item = _a[_i];
                            var _item = self.getItemByKey(item._key);
                            if (!!_item) {
                                self.removeItem(_item);
                            }
                        }
                    }
                    break;
                case 3:
                    {
                        var item = self.getItemByKey(args.old_key);
                        if (!!item) {
                            self._remapItem(args.old_key, args.new_key, item);
                            self._onCollectionChanged(args);
                        }
                    }
                    break;
                default:
                    throw new Error(format(jriapp_shared_9.LocaleERRS.ERR_COLLECTION_CHANGETYPE_INVALID, args.changeType));
            }
        };
        DataView.prototype._onDSStatusChanged = function (_, args) {
            var self = this, item = args.item, key = args.key, oldStatus = args.oldStatus, canFilter = !!self._fn_filter;
            if (!self.getItemByKey(key)) {
                if (canFilter) {
                    var isOk = self._fn_filter(item);
                    if (isOk) {
                        self.appendItems([item]);
                    }
                }
            }
            else {
                self._onItemStatusChanged(item, oldStatus);
                if (canFilter) {
                    var isOk = self._fn_filter(item);
                    if (!isOk) {
                        self.removeItem(item);
                    }
                }
            }
        };
        DataView.prototype._bindDS = function () {
            var self = this, ds = this._dataSource;
            if (!ds) {
                return;
            }
            ds.addOnCollChanged(self._onDSCollectionChanged, self.uniqueID, self, 1);
            ds.addOnBeginEdit(function (_, args) {
                if (!!self.getItemByKey(args.item._key)) {
                    self._onEditing(args.item, true, false);
                }
            }, self.uniqueID, null, 1);
            ds.addOnEndEdit(function (_, args) {
                var isOk;
                var item = args.item, canFilter = !!self._fn_filter;
                if (!self.getItemByKey(item._key)) {
                    if (!args.isCanceled && canFilter) {
                        isOk = self._fn_filter(item);
                        if (isOk) {
                            self.appendItems([item]);
                        }
                    }
                }
                else {
                    self._onEditing(item, false, args.isCanceled);
                    if (!args.isCanceled && canFilter) {
                        isOk = self._fn_filter(item);
                        if (!isOk) {
                            self.removeItem(item);
                        }
                    }
                }
            }, self.uniqueID, null, 1);
            ds.addOnErrorsChanged(function (_, args) {
                if (!!self.getItemByKey(args.item._key)) {
                    self._getInternal().onErrorsChanged(args);
                }
            }, self.uniqueID, null, 1);
            ds.addOnStatusChanged(self._onDSStatusChanged, self.uniqueID, self, 1);
            ds.addOnItemDeleting(function (_, args) {
                if (!!self.getItemByKey(args.item._key)) {
                    self._onItemDeleting(args);
                }
            }, self.uniqueID, null, 1);
            ds.addOnItemAdded(function (_, args) {
                if (self._isAddingNew) {
                    if (!self.getItemByKey(args.item._key)) {
                        self._addNew(args.item);
                    }
                    self.currentItem = args.item;
                    self._onEditing(args.item, true, false);
                    self._onItemAdded(args.item);
                }
            }, self.uniqueID, null, 1);
            ds.addOnItemAdding(function (_, args) {
                if (self._isAddingNew) {
                    self._onItemAdding(args.item);
                }
            }, self.uniqueID, null, 1);
        };
        DataView.prototype._unbindDS = function () {
            var self = this, ds = this._dataSource;
            if (!ds) {
                return;
            }
            ds.objEvents.offNS(self.uniqueID);
        };
        DataView.prototype._checkCurrentChanging = function (newCurrent) {
            var ds = this._dataSource;
            try {
                var item = ds._getInternal().getEditingItem();
                if (!!item && newCurrent !== item) {
                    ds.endEdit();
                }
            }
            catch (ex) {
                ds.cancelEdit();
                ERROR.reThrow(ex, this.handleError(ex, this));
            }
        };
        DataView.prototype._onPageChanged = function () {
            this._refresh(1);
        };
        DataView.prototype._clear = function (reason, oper) {
            if (oper === void 0) { oper = 0; }
            _super.prototype._clear.call(this, reason, oper);
            if (reason !== 1) {
                this.pageIndex = 0;
            }
            if (reason !== 1 && reason !== 2) {
                this.totalCount = 0;
            }
        };
        DataView.prototype.itemFactory = function (_aspect) {
            throw new Error("Not implemented");
        };
        DataView.prototype._createNew = function () {
            throw new Error("Not implemented");
        };
        DataView.prototype._getStrValue = function (val, fieldInfo) {
            return this._dataSource._getInternal().getStrValue(val, fieldInfo);
        };
        DataView.prototype.getFieldNames = function () {
            return this._dataSource.getFieldNames();
        };
        DataView.prototype.getFieldInfo = function (fieldName) {
            return this._dataSource.getFieldInfo(fieldName);
        };
        DataView.prototype.getFieldInfos = function () {
            return this._dataSource.getFieldInfos();
        };
        DataView.prototype.getFieldMap = function () {
            return this._dataSource.getFieldMap();
        };
        DataView.prototype.addOnViewRefreshed = function (fn, nmspace) {
            this.objEvents.on("view_refreshed", fn, nmspace);
        };
        DataView.prototype.offOnViewRefreshed = function (nmspace) {
            this.objEvents.off("view_refreshed", nmspace);
        };
        DataView.prototype.appendItems = function (items) {
            if (this.getIsStateDirty()) {
                return [];
            }
            return this._fillItems({ items: items, reason: 0, clear: false, isAppend: true });
        };
        DataView.prototype.addNew = function () {
            var item = null;
            this._isAddingNew = true;
            try {
                item = this._dataSource.addNew();
            }
            finally {
                this._isAddingNew = false;
            }
            return item;
        };
        DataView.prototype.removeItem = function (item) {
            var oldPos = this._removeItem(item);
            if (oldPos < 0) {
                return;
            }
            this.errors.removeAllErrors(item);
            this.totalCount = this.totalCount - 1;
            this._resetCurrent(oldPos);
        };
        DataView.prototype.sort = function (fieldNames, sortOrder) {
            if (!!this._fn_sortHandler) {
                return this._fn_sortHandler(fieldNames, sortOrder);
            }
            else {
                return this.sortLocal(fieldNames, sortOrder);
            }
        };
        DataView.prototype.sortLocal = function (fieldNames, sortOrder) {
            var _this = this;
            this._fn_sort = this._getSortFn(fieldNames, sortOrder);
            return utils.async.delay(function () { return _this._refreshSync(2); });
        };
        DataView.prototype.clear = function () {
            this._clear(3, 0);
        };
        DataView.prototype.refresh = function () {
            this._refresh(3);
        };
        DataView.prototype.syncRefresh = function () {
            this._refreshSync(3);
        };
        Object.defineProperty(DataView.prototype, "errors", {
            get: function () {
                return this._dataSource.errors;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "dataSource", {
            get: function () {
                return this._dataSource;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "isPagingEnabled", {
            get: function () {
                return this.options.enablePaging;
            },
            set: function (v) {
                if (this.options.enablePaging !== v) {
                    this.options.enablePaging = v;
                    this.objEvents.raiseProp("isPagingEnabled");
                    this._refresh(0);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "permissions", {
            get: function () {
                return this._dataSource.permissions;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "fn_filter", {
            get: function () {
                return this._fn_filter;
            },
            set: function (v) {
                if (this._fn_filter !== v) {
                    this._fn_filter = v;
                    this._refresh(0);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "fn_sort", {
            get: function () {
                return this._fn_sort;
            },
            set: function (v) {
                if (this._fn_sort !== v) {
                    this._fn_sort = v;
                    this._refresh(2);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "fn_itemsProvider", {
            get: function () {
                return this._fn_itemsProvider;
            },
            set: function (v) {
                if (this._fn_itemsProvider !== v) {
                    this._fn_itemsProvider = v;
                    this._refresh(3);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataView.prototype, "fn_sortHandler", {
            get: function () {
                return this._fn_sortHandler;
            },
            set: function (v) {
                if (this._fn_sortHandler !== v) {
                    this._fn_sortHandler = v;
                    this._refresh(3);
                }
            },
            enumerable: false,
            configurable: true
        });
        DataView.prototype.toString = function () {
            return !this.dataSource ? "DataView" : ("DataView For " + this.dataSource.toString());
        };
        return DataView;
    }(base_2.BaseCollection));
    exports.DataView = DataView;
});
define("jriapp_db/child_dataview", ["require", "exports", "jriapp_shared", "jriapp_db/dataview"], function (require, exports, jriapp_shared_10, dataview_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChildDataView = void 0;
    var utils = jriapp_shared_10.Utils, coreUtils = utils.core;
    var ChildDataView = (function (_super) {
        __extends(ChildDataView, _super);
        function ChildDataView(options) {
            var _this = this;
            var parentItem = !options.parentItem ? null : options.parentItem;
            var assoc = options.association, opts = coreUtils.extend({
                dataSource: null,
                fn_itemsProvider: null,
                fn_filter: null
            }, options), oldFilter = opts.fn_filter;
            opts.dataSource = assoc.childDS;
            opts.fn_itemsProvider = function () {
                if (!parentItem) {
                    return [];
                }
                return assoc.getChildItems(parentItem);
            };
            opts.fn_filter = function (item) {
                var isPC = assoc.isParentChild(parentItem, item);
                return isPC && (!oldFilter ? true : oldFilter(item));
            };
            opts.refreshTimeout = 350;
            _this = _super.call(this, opts) || this;
            var self = _this;
            _this._getParent = function () {
                if (self.getIsStateDirty()) {
                    return null;
                }
                return parentItem;
            };
            _this._setParent = function (v) {
                if (self.getIsStateDirty()) {
                    return;
                }
                if (parentItem !== v) {
                    parentItem = v;
                    if (self.items.length > 0) {
                        self.clear();
                        self._onViewRefreshed({});
                    }
                    self._refresh(3);
                    self.objEvents.raiseProp("parentItem");
                }
            };
            _this._association = assoc;
            if (!!parentItem && !options.explicitRefresh) {
                var queue = utils.async.getTaskQueue();
                queue.enque(function () {
                    self._refreshSync(0);
                });
            }
            return _this;
        }
        ChildDataView.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._setParent(null);
            this._association = null;
            _super.prototype.dispose.call(this);
        };
        ChildDataView.prototype.toString = function () {
            return !this._association ? "ChildDataView" : ("ChildDataView for " + this._association.toString());
        };
        Object.defineProperty(ChildDataView.prototype, "parentItem", {
            get: function () {
                return this._getParent();
            },
            set: function (v) {
                this._setParent(v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ChildDataView.prototype, "association", {
            get: function () {
                return this._association;
            },
            enumerable: false,
            configurable: true
        });
        return ChildDataView;
    }(dataview_1.DataView));
    exports.ChildDataView = ChildDataView;
});
define("jriapp_db/complexprop", ["require", "exports", "jriapp_shared"], function (require, exports, jriapp_shared_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChildComplexProperty = exports.RootComplexProperty = exports.BaseComplexProperty = void 0;
    var utils = jriapp_shared_11.Utils, format = utils.str.format;
    var BaseComplexProperty = (function (_super) {
        __extends(BaseComplexProperty, _super);
        function BaseComplexProperty(name) {
            var _this = _super.call(this) || this;
            _this._name = name;
            return _this;
        }
        BaseComplexProperty.prototype.getName = function () {
            return this._name;
        };
        BaseComplexProperty.prototype.getPropertyByName = function (name) {
            var arrProps = this.getProperties().filter(function (f) { return f.fieldName === name; });
            if (!arrProps || arrProps.length !== 1) {
                throw new Error(format(jriapp_shared_11.LocaleERRS.ERR_ASSERTION_FAILED, "arrProps.length === 1"));
            }
            return arrProps[0];
        };
        BaseComplexProperty.prototype.getIsHasErrors = function () {
            return this.getEntity().getIsHasErrors();
        };
        BaseComplexProperty.prototype.addOnErrorsChanged = function (fn, nmspace, context) {
            var self = this;
            this.getEntity().addOnErrorsChanged(function (_, args) { fn.apply(this, [self, args]); }, nmspace, context);
        };
        BaseComplexProperty.prototype.offOnErrorsChanged = function (nmspace) {
            this.getEntity().offOnErrorsChanged(nmspace);
        };
        BaseComplexProperty.prototype.getFieldErrors = function (fieldName) {
            var name = this.getFullPath(fieldName);
            return this.getEntity().getFieldErrors(name);
        };
        BaseComplexProperty.prototype.getAllErrors = function () {
            return this.getEntity().getAllErrors();
        };
        BaseComplexProperty.prototype.getIErrorNotification = function () {
            return this;
        };
        return BaseComplexProperty;
    }(jriapp_shared_11.BaseObject));
    exports.BaseComplexProperty = BaseComplexProperty;
    var RootComplexProperty = (function (_super) {
        __extends(RootComplexProperty, _super);
        function RootComplexProperty(name, owner) {
            var _this = _super.call(this, name) || this;
            _this._entity = owner;
            _this._entity._addDisposable(_this);
            return _this;
        }
        RootComplexProperty.prototype._addDisposable = function (obj) {
            this._entity._addDisposable(obj);
        };
        RootComplexProperty.prototype._getFullPath = function (path) {
            return this.getName() + "." + path;
        };
        RootComplexProperty.prototype.setValue = function (fullName, value) {
            this._entity._setFieldVal(fullName, value);
        };
        RootComplexProperty.prototype.getValue = function (fullName) {
            return this._entity._getFieldVal(fullName);
        };
        RootComplexProperty.prototype.getFieldInfo = function () {
            return this._entity.getFieldInfo(this.getName());
        };
        RootComplexProperty.prototype.getProperties = function () {
            return this.getFieldInfo().nested;
        };
        RootComplexProperty.prototype.getEntity = function () {
            return this._entity;
        };
        RootComplexProperty.prototype.getFullPath = function (name) {
            return this.getName() + "." + name;
        };
        return RootComplexProperty;
    }(BaseComplexProperty));
    exports.RootComplexProperty = RootComplexProperty;
    var ChildComplexProperty = (function (_super) {
        __extends(ChildComplexProperty, _super);
        function ChildComplexProperty(name, parent) {
            var _this = _super.call(this, name) || this;
            _this._parent = parent;
            _this._parent._addDisposable(_this);
            return _this;
        }
        ChildComplexProperty.prototype._addDisposable = function (obj) {
            this._parent._addDisposable(obj);
        };
        ChildComplexProperty.prototype._getFullPath = function (path) {
            return this._parent._getFullPath(this.getName() + "." + path);
        };
        ChildComplexProperty.prototype.setValue = function (fullName, value) {
            this.getEntity()._setFieldVal(fullName, value);
        };
        ChildComplexProperty.prototype.getValue = function (fullName) {
            return this.getEntity()._getFieldVal(fullName);
        };
        ChildComplexProperty.prototype.getFieldInfo = function () {
            var name = this.getName();
            return this._parent.getPropertyByName(name);
        };
        ChildComplexProperty.prototype.getProperties = function () {
            return this.getFieldInfo().nested;
        };
        ChildComplexProperty.prototype.getParent = function () {
            return this._parent;
        };
        ChildComplexProperty.prototype.getRootProperty = function () {
            var parent = this._parent;
            while (!!parent && (parent instanceof ChildComplexProperty)) {
                parent = parent.getParent();
            }
            if (!parent || !(parent instanceof RootComplexProperty)) {
                throw new Error(format(jriapp_shared_11.LocaleERRS.ERR_ASSERTION_FAILED, "parent instanceof RootComplexProperty"));
            }
            return parent;
        };
        ChildComplexProperty.prototype.getFullPath = function (name) {
            return this._parent._getFullPath(this.getName() + "." + name);
        };
        ChildComplexProperty.prototype.getEntity = function () {
            return this.getRootProperty().getEntity();
        };
        return ChildComplexProperty;
    }(BaseComplexProperty));
    exports.ChildComplexProperty = ChildComplexProperty;
});
define("jriapp_db", ["require", "exports", "jriapp_db/dbset", "jriapp_db/dataview", "jriapp_db/child_dataview", "jriapp_db/association", "jriapp_db/const", "jriapp_db/dbcontext", "jriapp_db/dbsets", "jriapp_db/dataquery", "jriapp_db/entity_aspect", "jriapp_db/error", "jriapp_db/complexprop"], function (require, exports, dbset_1, dataview_2, child_dataview_1, association_2, const_1, dbcontext_1, dbsets_1, dataquery_2, entity_aspect_2, error_3, complexprop_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VERSION = exports.FLAGS = exports.DATA_OPER = exports.DELETE_ACTION = exports.REFRESH_MODE = exports.DbSet = void 0;
    Object.defineProperty(exports, "DbSet", { enumerable: true, get: function () { return dbset_1.DbSet; } });
    __exportStar(dataview_2, exports);
    __exportStar(child_dataview_1, exports);
    __exportStar(association_2, exports);
    Object.defineProperty(exports, "REFRESH_MODE", { enumerable: true, get: function () { return const_1.REFRESH_MODE; } });
    Object.defineProperty(exports, "DELETE_ACTION", { enumerable: true, get: function () { return const_1.DELETE_ACTION; } });
    Object.defineProperty(exports, "DATA_OPER", { enumerable: true, get: function () { return const_1.DATA_OPER; } });
    Object.defineProperty(exports, "FLAGS", { enumerable: true, get: function () { return const_1.FLAGS; } });
    __exportStar(dbcontext_1, exports);
    __exportStar(dbsets_1, exports);
    __exportStar(dataquery_2, exports);
    __exportStar(entity_aspect_2, exports);
    __exportStar(error_3, exports);
    __exportStar(complexprop_1, exports);
    exports.VERSION = "3.0.10";
});

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
define("jriapp_ui/int", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cssStyles = void 0;
    var cssStyles;
    (function (cssStyles) {
        cssStyles["fieldError"] = "ria-field-error";
        cssStyles["content"] = "ria-content-field";
        cssStyles["required"] = "ria-required-field";
        cssStyles["editMode"] = "ria-edit-mode";
        cssStyles["checkbox"] = "ria-checkbox";
        cssStyles["commandLink"] = "ria-command-link";
        cssStyles["checkedNull"] = "ria-checked-null";
        cssStyles["dataform"] = "ria-dataform";
        cssStyles["error"] = "ria-form-error";
        cssStyles["disabled"] = "disabled";
        cssStyles["opacity"] = "opacity";
        cssStyles["color"] = "color";
        cssStyles["fontSize"] = "font-size";
    })(cssStyles = exports.cssStyles || (exports.cssStyles = {}));
});
define("jriapp_ui/content/basic", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp/bootstrapper", "jriapp/binding", "jriapp/utils/lifetime"], function (require, exports, jriapp_shared_1, dom_1, bootstrapper_1, binding_1, lifetime_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BasicContent = exports.getBindingOption = exports.getView = void 0;
    var utils = jriapp_shared_1.Utils, dom = dom_1.DomUtils, doc = dom.document, extend = utils.core.extend, boot = bootstrapper_1.bootstrapper, sys = utils.sys;
    function getView(el, name, options) {
        var factory = boot.app.viewFactory, elView = factory.store.getElView(el);
        if (!!elView) {
            return elView;
        }
        var viewInfo = {
            el: el,
            name: name,
            options: options || {}
        };
        return factory.createElView(viewInfo);
    }
    exports.getView = getView;
    function getBindingOption(isEdit, fieldName, target, dataContext, targetPath, converter, param) {
        if (converter === void 0) { converter = null; }
        if (param === void 0) { param = null; }
        var bindInfo = {
            target: null,
            source: null,
            targetPath: null,
            sourcePath: fieldName,
            mode: isEdit ? "TwoWay" : "OneWay",
            converter: null,
            param: null,
            isBind: false
        };
        var options = binding_1.getBindingOptions(bindInfo, target, dataContext);
        if (!!targetPath) {
            options.targetPath = targetPath;
        }
        options.converter = converter;
        options.param = param;
        return options;
    }
    exports.getBindingOption = getBindingOption;
    var BasicContent = (function (_super) {
        __extends(BasicContent, _super);
        function BasicContent(options) {
            var _this = _super.call(this) || this;
            options = extend({
                parentEl: null,
                contentOptions: null,
                dataContext: null,
                isEditing: false
            }, options);
            _this._el = null;
            _this._parentEl = options.parentEl;
            _this._isEditing = !!options.isEditing;
            _this._dataContext = options.dataContext;
            _this._options = options.contentOptions;
            _this._isReadOnly = !!_this._options.readOnly;
            _this._lfScope = null;
            _this._view = null;
            dom.addClass([_this._parentEl], "ria-content-field");
            return _this;
        }
        BasicContent.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            var el = this._el, css = this._options.css;
            dom.removeClass([this._parentEl], "ria-content-field");
            dom.removeClass([this._parentEl], "ria-required-field");
            if (!!css) {
                if (!!css.readCss) {
                    dom.removeClass([this._parentEl], css.readCss);
                }
                if (!!css.editCss) {
                    dom.removeClass([this._parentEl], css.editCss);
                }
                if (!!el && !!css.elReadCss) {
                    dom.removeClass([el], css.elReadCss);
                }
                if (!!el && !!css.elEditCss) {
                    dom.removeClass([el], css.elEditCss);
                }
            }
            this.cleanUp();
            this._parentEl = null;
            this._dataContext = null;
            this._options = null;
            _super.prototype.dispose.call(this);
        };
        BasicContent.prototype.updateCss = function () {
            var css = this._options.css, parentEl = this._parentEl, el = this.el, fieldInfo = this.getFieldInfo();
            if (this._isEditing && this.getIsCanBeEdited()) {
                if (!!css) {
                    if (!!css.readCss) {
                        dom.removeClass([parentEl], css.readCss);
                    }
                    if (!!css.editCss) {
                        dom.addClass([parentEl], css.editCss);
                    }
                    if (!!el && !!css.elReadCss) {
                        dom.removeClass([el], css.elReadCss);
                    }
                    if (!!el && !!css.elEditCss) {
                        dom.addClass([el], css.elEditCss);
                    }
                }
                if (!!fieldInfo && !fieldInfo.isNullable) {
                    dom.addClass([parentEl], "ria-required-field");
                }
                dom.addClass([parentEl], "ria-edit-mode");
            }
            else {
                if (!!css) {
                    if (!!css.editCss) {
                        dom.removeClass([parentEl], css.editCss);
                    }
                    if (!!css.readCss) {
                        dom.addClass([parentEl], css.readCss);
                    }
                    if (!!el && !!css.elEditCss) {
                        dom.removeClass([el], css.elEditCss);
                    }
                    if (!!el && !!css.elReadCss) {
                        dom.addClass([el], css.elReadCss);
                    }
                }
                if (!!fieldInfo && !fieldInfo.isNullable) {
                    dom.removeClass([parentEl], "ria-required-field");
                }
                dom.removeClass([parentEl], "ria-edit-mode");
            }
        };
        BasicContent.prototype.getIsCanBeEdited = function () {
            if (this._isReadOnly) {
                return false;
            }
            var finf = this.getFieldInfo();
            if (!finf) {
                return false;
            }
            var editable = sys.getEditable(this._dataContext);
            return !!editable && !finf.isReadOnly && finf.fieldType !== 2;
        };
        BasicContent.prototype.getBindings = function () {
            if (!this._lfScope) {
                return [];
            }
            var arr = this._lfScope.getObjs(), res = [], len = arr.length;
            for (var i = 0; i < len; i += 1) {
                if (sys.isBinding(arr[i])) {
                    res.push(arr[i]);
                }
            }
            return res;
        };
        BasicContent.prototype.updateBindingSource = function () {
            var bindings = this.getBindings(), len = bindings.length;
            for (var i = 0; i < len; i += 1) {
                var binding = bindings[i];
                if (!binding.isSourceFixed) {
                    binding.source = this._dataContext;
                }
            }
        };
        BasicContent.prototype.cleanUp = function () {
            if (!!this._lfScope) {
                this._lfScope.dispose();
                this._lfScope = null;
            }
            if (!!this._el) {
                dom.removeNode(this._el);
                this._el = null;
            }
            this._view = null;
        };
        BasicContent.prototype.getFieldInfo = function () {
            return this._options.fieldInfo;
        };
        BasicContent.prototype.getParam = function (_isEdit) {
            return null;
        };
        BasicContent.prototype.getConverter = function (_isEdit) {
            return null;
        };
        BasicContent.prototype.getViewName = function (_isEdit) {
            return null;
        };
        BasicContent.prototype.createdEditingView = function () {
            var name = this.getViewName(true), el = doc.createElement("input"), options = this._options.options;
            el.setAttribute("type", "text");
            if (!!options && !!options.placeholder) {
                el.setAttribute("placeholder", options.placeholder);
            }
            var view = getView(el, name, options);
            if (!!view) {
                this.lfScope.addObj(view);
            }
            var bindOption = getBindingOption(true, this.options.fieldName, view, this.dataContext, "value", this.getConverter(true), this.getParam(true));
            this._lfScope.addObj(this.app.bind(bindOption));
            return view;
        };
        BasicContent.prototype.createdReadingView = function () {
            var name = this.getViewName(false), el = doc.createElement("span");
            var view = getView(el, name, {});
            if (!!view) {
                this.lfScope.addObj(view);
            }
            var bindOption = getBindingOption(false, this.options.fieldName, view, this.dataContext, "value", this.getConverter(false), this.getParam(false));
            this._lfScope.addObj(this.app.bind(bindOption));
            return view;
        };
        BasicContent.prototype.beforeCreateView = function () {
            this.cleanUp();
            return !!this._options.fieldName;
        };
        BasicContent.prototype.createView = function () {
            var view = null;
            if (this._isEditing && this.getIsCanBeEdited()) {
                view = this.createdEditingView();
            }
            else {
                view = this.createdReadingView();
            }
            this._el = view.el;
            this._view = view;
            this.updateCss();
        };
        BasicContent.prototype.afterCreateView = function () {
            this._parentEl.appendChild(this._el);
        };
        BasicContent.prototype.render = function () {
            if (this.beforeCreateView()) {
                try {
                    this.createView();
                    this.afterCreateView();
                }
                catch (ex) {
                    utils.err.reThrow(ex, this.handleError(ex, this));
                }
            }
        };
        BasicContent.prototype.toString = function () {
            return "BasicContent";
        };
        Object.defineProperty(BasicContent.prototype, "lfScope", {
            get: function () {
                if (!this._lfScope) {
                    this._lfScope = new lifetime_1.LifeTimeScope();
                }
                return this._lfScope;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BasicContent.prototype, "parentEl", {
            get: function () {
                return this._parentEl;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BasicContent.prototype, "el", {
            get: function () {
                return this._el;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BasicContent.prototype, "view", {
            get: function () {
                return this._view;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BasicContent.prototype, "isEditing", {
            get: function () {
                return this._isEditing;
            },
            set: function (v) {
                if (this._isEditing !== v) {
                    this._isEditing = v;
                    this.render();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BasicContent.prototype, "dataContext", {
            get: function () {
                return this._dataContext;
            },
            set: function (v) {
                if (this._dataContext !== v) {
                    this._dataContext = v;
                    this.updateBindingSource();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BasicContent.prototype, "isReadOnly", {
            get: function () {
                return this._isReadOnly;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BasicContent.prototype, "options", {
            get: function () {
                return this._options;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BasicContent.prototype, "app", {
            get: function () {
                return boot.app;
            },
            enumerable: false,
            configurable: true
        });
        return BasicContent;
    }(jriapp_shared_1.BaseObject));
    exports.BasicContent = BasicContent;
});
define("jriapp_ui/content/template", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp/bootstrapper", "jriapp/template"], function (require, exports, jriapp_shared_2, dom_2, bootstrapper_2, template_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TemplateContent = void 0;
    var utils = jriapp_shared_2.Utils, extend = utils.core.extend, dom = dom_2.DomUtils, boot = bootstrapper_2.bootstrapper, ERROR = utils.err;
    var TemplateContent = (function (_super) {
        __extends(TemplateContent, _super);
        function TemplateContent(options) {
            var _this = _super.call(this) || this;
            options = extend({
                parentEl: null,
                contentOptions: null,
                dataContext: null,
                isEditing: false,
                appName: null
            }, options);
            _this._templateID = null;
            _this._parentEl = options.parentEl;
            _this._isEditing = options.isEditing;
            _this._dataContext = options.dataContext;
            _this._templateInfo = options.contentOptions.template;
            _this._template = null;
            _this._options = options.contentOptions;
            dom.addClass([_this._parentEl], "ria-content-field");
            return _this;
        }
        TemplateContent.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            dom.removeClass([this._parentEl], "ria-content-field");
            var displayInfo = this._options.css;
            if (!!displayInfo && !!displayInfo.readCss) {
                dom.removeClass([this._parentEl], displayInfo.readCss);
            }
            if (!!displayInfo && !!displayInfo.editCss) {
                dom.removeClass([this._parentEl], displayInfo.editCss);
            }
            this.cleanUp();
            this._parentEl = null;
            this._dataContext = null;
            this._templateInfo = null;
            _super.prototype.dispose.call(this);
        };
        TemplateContent.prototype.updateCss = function () {
            var displayInfo = this._options.css, parentEl = this._parentEl;
            if (this._isEditing) {
                if (!!displayInfo) {
                    if (!!displayInfo.editCss) {
                        dom.addClass([parentEl], displayInfo.editCss);
                    }
                    if (!!displayInfo.readCss) {
                        dom.removeClass([parentEl], displayInfo.readCss);
                    }
                }
            }
            else {
                if (!!displayInfo) {
                    if (!!displayInfo.readCss) {
                        dom.addClass([parentEl], displayInfo.readCss);
                    }
                    if (!!displayInfo.editCss) {
                        dom.removeClass([parentEl], displayInfo.editCss);
                    }
                }
            }
        };
        TemplateContent.prototype.getTemplateID = function () {
            if (!this._templateInfo) {
                throw new Error(jriapp_shared_2.LocaleERRS.ERR_TEMPLATE_ID_INVALID);
            }
            var info = this._templateInfo;
            var id = info.readID;
            if (this._isEditing && !!info.editID) {
                id = info.editID;
            }
            if (!id) {
                id = info.editID;
            }
            if (!id) {
                throw new Error(jriapp_shared_2.LocaleERRS.ERR_TEMPLATE_ID_INVALID);
            }
            return id;
        };
        TemplateContent.prototype.createTemplate = function (parentEl) {
            var template = template_1.createTemplate({ parentEl: parentEl, dataContext: this._dataContext });
            template.templateID = this._templateID;
            return template;
        };
        TemplateContent.prototype.cleanUp = function () {
            if (!!this._template) {
                this._template.dispose();
                this._template = null;
                this._templateID = null;
            }
        };
        TemplateContent.prototype.render = function () {
            try {
                var id = this.getTemplateID();
                if (this._templateID !== id) {
                    this.cleanUp();
                    this._templateID = id;
                    this._template = this.createTemplate(this.parentEl);
                }
                this.updateCss();
            }
            catch (ex) {
                ERROR.reThrow(ex, this.handleError(ex, this));
            }
        };
        TemplateContent.prototype.toString = function () {
            return "TemplateContent";
        };
        Object.defineProperty(TemplateContent.prototype, "parentEl", {
            get: function () {
                return this._parentEl;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TemplateContent.prototype, "template", {
            get: function () {
                return this._template;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TemplateContent.prototype, "isEditing", {
            get: function () {
                return this._isEditing;
            },
            set: function (v) {
                if (this._isEditing !== v) {
                    this._isEditing = v;
                    this.render();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TemplateContent.prototype, "dataContext", {
            get: function () {
                return this._dataContext;
            },
            set: function (v) {
                if (this._dataContext !== v) {
                    this._dataContext = v;
                    if (!!this._template) {
                        this._template.dataContext = this._dataContext;
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TemplateContent.prototype, "app", {
            get: function () {
                return boot.app;
            },
            enumerable: false,
            configurable: true
        });
        return TemplateContent;
    }(jriapp_shared_2.BaseObject));
    exports.TemplateContent = TemplateContent;
});
define("jriapp_ui/utils/eventbag", ["require", "exports", "jriapp_shared"], function (require, exports, jriapp_shared_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventBag = exports.EVENT_CHANGE_TYPE = void 0;
    var utils = jriapp_shared_3.Utils, Indexer = utils.core.Indexer, trimBrackets = utils.str.trimBrackets;
    var EVENT_CHANGE_TYPE;
    (function (EVENT_CHANGE_TYPE) {
        EVENT_CHANGE_TYPE[EVENT_CHANGE_TYPE["None"] = 0] = "None";
        EVENT_CHANGE_TYPE[EVENT_CHANGE_TYPE["Added"] = 1] = "Added";
        EVENT_CHANGE_TYPE[EVENT_CHANGE_TYPE["Deleted"] = 2] = "Deleted";
        EVENT_CHANGE_TYPE[EVENT_CHANGE_TYPE["Updated"] = 3] = "Updated";
    })(EVENT_CHANGE_TYPE = exports.EVENT_CHANGE_TYPE || (exports.EVENT_CHANGE_TYPE = {}));
    var EventBag = (function (_super) {
        __extends(EventBag, _super);
        function EventBag(onChange) {
            var _this = _super.call(this) || this;
            _this._dic = null;
            _this._onChange = onChange;
            return _this;
        }
        EventBag.prototype.isHasProp = function (_prop) {
            return true;
        };
        EventBag.prototype.getProp = function (name) {
            if (!this._dic) {
                return null;
            }
            var eventName = trimBrackets(name), cmd = this._dic[eventName];
            return !cmd ? null : cmd;
        };
        EventBag.prototype.setProp = function (name, command) {
            if (!this._dic && !!command) {
                this._dic = Indexer();
            }
            if (!this._dic) {
                return;
            }
            var eventName = trimBrackets(name), old = this._dic[eventName];
            if (!command && !!old) {
                delete this._dic[eventName];
                if (!!this._onChange) {
                    this._onChange(this, {
                        name: eventName,
                        changeType: 2,
                        oldVal: old,
                        newVal: null
                    });
                    this.objEvents.raiseProp(name);
                }
                return;
            }
            this._dic[eventName] = command;
            if (!!this._onChange) {
                if (!old) {
                    this._onChange(this, {
                        name: eventName,
                        changeType: 1,
                        oldVal: null,
                        newVal: command
                    });
                }
                else {
                    this._onChange(this, {
                        name: eventName,
                        changeType: 3,
                        oldVal: old,
                        newVal: command
                    });
                }
                this.objEvents.raiseProp(name);
            }
        };
        Object.defineProperty(EventBag.prototype, "isPropertyBag", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        EventBag.prototype.trigger = function (eventName, args) {
            if (!this._dic) {
                return false;
            }
            var command = this._dic[eventName];
            if (!command) {
                return false;
            }
            args = args || {};
            if (command.canExecute(args)) {
                command.execute(args);
                return true;
            }
            else {
                return false;
            }
        };
        EventBag.prototype.toString = function () {
            return "EventBag";
        };
        EventBag.prototype.dispose = function () {
            if (!!this._dic) {
                this._dic = null;
            }
            this._onChange = null;
            _super.prototype.dispose.call(this);
        };
        return EventBag;
    }(jriapp_shared_3.BaseObject));
    exports.EventBag = EventBag;
});
define("jriapp_ui/utils/propbag", ["require", "exports", "jriapp_shared"], function (require, exports, jriapp_shared_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PropertyBag = void 0;
    var utils = jriapp_shared_4.Utils, trimBrackets = utils.str.trimBrackets;
    var PropertyBag = (function (_super) {
        __extends(PropertyBag, _super);
        function PropertyBag(el) {
            var _this = _super.call(this) || this;
            _this._el = el;
            return _this;
        }
        PropertyBag.prototype.isHasProp = function (prop) {
            var propName = trimBrackets(prop);
            return (propName in this._el);
        };
        PropertyBag.prototype.getProp = function (name) {
            var propName = trimBrackets(name);
            return this._el[propName];
        };
        PropertyBag.prototype.setProp = function (name, val) {
            var propName = trimBrackets(name);
            var old = this._el[propName];
            if (old !== val) {
                this._el[propName] = val;
                this.objEvents.raiseProp(name);
            }
        };
        Object.defineProperty(PropertyBag.prototype, "isPropertyBag", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        PropertyBag.prototype.toString = function () {
            return "PropertyBag";
        };
        return PropertyBag;
    }(jriapp_shared_4.BaseObject));
    exports.PropertyBag = PropertyBag;
});
define("jriapp_ui/utils/cssbag", ["require", "exports", "jriapp_shared", "jriapp/utils/dom"], function (require, exports, jriapp_shared_5, dom_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CSSBag = void 0;
    var utils = jriapp_shared_5.Utils, _a = utils.check, _undefined = _a._undefined, isArray = _a.isArray, isString = _a.isString, dom = dom_3.DomUtils, trimBrackets = utils.str.trimBrackets;
    var CSSBag = (function (_super) {
        __extends(CSSBag, _super);
        function CSSBag(el) {
            var _this = _super.call(this) || this;
            _this._el = el;
            return _this;
        }
        CSSBag.prototype.isHasProp = function (_prop) {
            return true;
        };
        CSSBag.prototype.getProp = function (_name) {
            return _undefined;
        };
        CSSBag.prototype.setProp = function (name, val) {
            if (val === _undefined) {
                return;
            }
            var cssName = trimBrackets(name);
            if (cssName === "*") {
                if (!val) {
                    dom.removeClass([this._el], null);
                }
                else if (isArray(val)) {
                    dom.setClasses([this._el], val);
                }
                else if (isString(val)) {
                    dom.setClasses([this._el], val.split(" "));
                }
                return;
            }
            dom.setClass([this._el], cssName, !val);
        };
        Object.defineProperty(CSSBag.prototype, "isPropertyBag", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        CSSBag.prototype.toString = function () {
            return "CSSBag";
        };
        return CSSBag;
    }(jriapp_shared_5.BaseObject));
    exports.CSSBag = CSSBag;
});
define("jriapp_ui/baseview", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp/utils/viewchecks", "jriapp/bootstrapper", "jriapp_ui/utils/eventbag", "jriapp_ui/utils/propbag", "jriapp_ui/utils/cssbag"], function (require, exports, jriapp_shared_6, dom_4, viewchecks_1, bootstrapper_3, eventbag_1, propbag_1, cssbag_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseElView = exports.addToolTip = exports.EVENT_CHANGE_TYPE = void 0;
    var utils = jriapp_shared_6.Utils, getNewID = utils.core.getNewID, dom = dom_4.DomUtils, _undefined = utils.check._undefined, boot = bootstrapper_3.bootstrapper, viewChecks = viewchecks_1.ViewChecks, subscribeMap = bootstrapper_3.subscribeWeakMap;
    viewChecks.isElView = function (obj) {
        return !!obj && obj instanceof BaseElView;
    };
    function addToolTip(el, tip, isError, pos) {
        var svc = boot.getSvc("ITooltipService");
        svc.addToolTip(el, tip, isError, pos);
    }
    exports.addToolTip = addToolTip;
    function getErrorsService() {
        return boot.getSvc("IUIErrorsService");
    }
    var BaseElView = (function (_super) {
        __extends(BaseElView, _super);
        function BaseElView(el, options) {
            var _this = _super.call(this) || this;
            _this._el = el;
            _this._bindingState = 0;
            _this._bindCompleteList = null;
            options = options || {};
            var state = {
                tip: !options.tip ? null : options.tip,
                css: !options.css ? null : options.css,
                errorsService: !options.errorsService ? null : options.errorsService,
                _eventBag: null,
                _propBag: null,
                _classBag: null,
                _display: null,
                _errors: null
            };
            _this._uniqueID = getNewID("elv");
            _this._viewState = state;
            _this._subscribeFlags = !options.nodelegate ? 1 : 0;
            if (!!state.css) {
                dom.addClass([el], state.css);
            }
            _this._applyToolTip();
            _this._getStore().setElView(el, _this);
            return _this;
        }
        BaseElView.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            try {
                dom.events.offNS(this.el, this.uniqueID);
                this.validationErrors = null;
                addToolTip(this.el, null);
                if (this._subscribeFlags !== 0) {
                    subscribeMap.delete(this.el);
                    this._subscribeFlags = 0;
                }
                if (!!this._viewState._eventBag) {
                    this._viewState._eventBag.dispose();
                }
                if (!!this._viewState._propBag) {
                    this._viewState._propBag.dispose();
                }
                if (!!this._viewState._classBag) {
                    this._viewState._classBag.dispose();
                }
                this._viewState = {};
            }
            finally {
                this._getStore().setElView(this.el, null);
                _super.prototype.dispose.call(this);
            }
        };
        BaseElView.prototype._getStore = function () {
            return this.app.viewFactory.store;
        };
        BaseElView.prototype._onBindCompleted = function () {
            if (!this._bindCompleteList) {
                return;
            }
            try {
                for (var _i = 0, _a = this._bindCompleteList; _i < _a.length; _i++) {
                    var fn = _a[_i];
                    fn();
                }
            }
            finally {
                this._bindCompleteList = null;
            }
        };
        BaseElView.prototype._onEventChanged = function (args) {
            switch (args.changeType) {
                case 1:
                    this._onEventAdded(args.name, args.newVal);
                    break;
                case 2:
                    this._onEventDeleted(args.name, args.oldVal);
                    break;
            }
        };
        BaseElView.prototype._onEventAdded = function (name, _newVal) {
            var self = this;
            if (this.getIsStateDirty()) {
                return;
            }
            dom.events.on(this.el, name, function (e) {
                if (!!self._viewState._eventBag) {
                    self._viewState._eventBag.trigger(name, e);
                }
            }, this.uniqueID);
        };
        BaseElView.prototype._onEventDeleted = function (name, _oldVal) {
            dom.events.off(this.el, name, this.uniqueID);
        };
        BaseElView.prototype._applyToolTip = function () {
            if (!!this.toolTip) {
                addToolTip(this.el, this.toolTip);
            }
        };
        BaseElView.prototype._setIsSubcribed = function (flag) {
            this._subscribeFlags |= (1 << flag);
        };
        BaseElView.prototype._setErrors = function (el, errors) {
            this._viewState._errors = errors;
            var errSvc = !this._viewState.errorsService ? getErrorsService() : this._viewState.errorsService;
            errSvc.setErrors(el, errors, this.toolTip);
        };
        BaseElView.prototype._registerOnBindCompleted = function (fn) {
            if (!this._bindCompleteList) {
                this._bindCompleteList = [fn];
            }
            else {
                this._bindCompleteList.push(fn);
            }
        };
        BaseElView.prototype.isSubscribed = function (flag) {
            return !!(this._subscribeFlags & (1 << flag));
        };
        BaseElView.prototype.toString = function () {
            return "BaseElView";
        };
        Object.defineProperty(BaseElView.prototype, "el", {
            get: function () {
                return this._el;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseElView.prototype, "uniqueID", {
            get: function () {
                return this._uniqueID;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseElView.prototype, "isVisible", {
            get: function () {
                var v = this.el.style.display;
                return !(v === "none");
            },
            set: function (v) {
                v = !!v;
                if (v !== this.isVisible) {
                    if (!v) {
                        this._viewState._display = this.el.style.display;
                        if (this._viewState._display === "none") {
                            this._viewState._display = null;
                        }
                        this.el.style.display = "none";
                    }
                    else {
                        this.el.style.display = (!this._viewState._display ? "" : this._viewState._display);
                    }
                    this.objEvents.raiseProp("isVisible");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseElView.prototype, "validationErrors", {
            get: function () {
                return this._viewState._errors;
            },
            set: function (v) {
                if (!this.getIsDisposed() && this._viewState._errors !== v) {
                    this._setErrors(this.el, v);
                    this.objEvents.raiseProp("validationErrors");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseElView.prototype, "dataName", {
            get: function () {
                return this._el.getAttribute("data-name");
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseElView.prototype, "toolTip", {
            get: function () {
                return this._viewState.tip;
            },
            set: function (v) {
                if (this.toolTip !== v) {
                    this._viewState.tip = v;
                    addToolTip(this.el, v);
                    this.objEvents.raiseProp("toolTip");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseElView.prototype, "events", {
            get: function () {
                var _this = this;
                if (!this._viewState._eventBag) {
                    if (this.getIsStateDirty()) {
                        return _undefined;
                    }
                    this._viewState._eventBag = new eventbag_1.EventBag(function (_, a) {
                        _this._onEventChanged(a);
                    });
                }
                return this._viewState._eventBag;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseElView.prototype, "props", {
            get: function () {
                if (!this._viewState._propBag) {
                    if (this.getIsStateDirty()) {
                        return _undefined;
                    }
                    this._viewState._propBag = new propbag_1.PropertyBag(this.el);
                }
                return this._viewState._propBag;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseElView.prototype, "classes", {
            get: function () {
                if (!this._viewState._classBag) {
                    if (this.getIsStateDirty()) {
                        return _undefined;
                    }
                    this._viewState._classBag = new cssbag_1.CSSBag(this.el);
                }
                return this._viewState._classBag;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseElView.prototype, "isDelegationOn", {
            get: function () {
                return !!(this._subscribeFlags & (1 << 0));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseElView.prototype, "css", {
            get: function () {
                return this._viewState.css;
            },
            set: function (v) {
                var arr = [];
                if (this.css !== v) {
                    if (!!this.css) {
                        arr.push("-" + this.css);
                    }
                    this._viewState.css = v;
                    if (!!this.css) {
                        arr.push("+" + this.css);
                    }
                    dom.setClasses([this._el], arr);
                    this.objEvents.raiseProp("css");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseElView.prototype, "bindingState", {
            get: function () {
                return this._bindingState;
            },
            set: function (v) {
                if (this._bindingState !== v) {
                    this._bindingState = v;
                    if (this._bindingState === 0 && !!this._bindCompleteList) {
                        this._onBindCompleted();
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseElView.prototype, "app", {
            get: function () {
                return boot.app;
            },
            enumerable: false,
            configurable: true
        });
        return BaseElView;
    }(jriapp_shared_6.BaseObject));
    exports.BaseElView = BaseElView;
    boot.registerElView("generic", BaseElView);
    boot.registerElView("baseview", BaseElView);
});
define("jriapp_ui/input", ["require", "exports", "jriapp_ui/baseview"], function (require, exports, baseview_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InputElView = void 0;
    var InputElView = (function (_super) {
        __extends(InputElView, _super);
        function InputElView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        InputElView.prototype.toString = function () {
            return "InputElView";
        };
        Object.defineProperty(InputElView.prototype, "isDisabled", {
            get: function () {
                return this.el.disabled;
            },
            set: function (v) {
                var el = this.el;
                if (v !== el.disabled) {
                    el.disabled = v;
                    this.objEvents.raiseProp("isDisabled");
                    this.objEvents.raiseProp("isEnabled");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(InputElView.prototype, "isEnabled", {
            get: function () {
                return !this.isDisabled;
            },
            set: function (v) {
                this.isDisabled = !v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(InputElView.prototype, "value", {
            get: function () {
                return this.el.value;
            },
            set: function (v) {
                var x = this.value, str = "" + v;
                v = (!v) ? "" : str;
                if (x !== v) {
                    this.el.value = v;
                    this.objEvents.raiseProp("value");
                }
            },
            enumerable: false,
            configurable: true
        });
        return InputElView;
    }(baseview_1.BaseElView));
    exports.InputElView = InputElView;
});
define("jriapp_ui/textbox", ["require", "exports", "jriapp/utils/dom", "jriapp/bootstrapper", "jriapp_ui/input"], function (require, exports, dom_5, bootstrapper_4, input_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TextBoxElView = void 0;
    var dom = dom_5.DomUtils, subscribeMap = bootstrapper_4.subscribeWeakMap;
    var TXTBOX_EVENTS;
    (function (TXTBOX_EVENTS) {
        TXTBOX_EVENTS["keypress"] = "keypress";
    })(TXTBOX_EVENTS || (TXTBOX_EVENTS = {}));
    var TextBoxElView = (function (_super) {
        __extends(TextBoxElView, _super);
        function TextBoxElView(el, options) {
            var _this = _super.call(this, el, options) || this;
            var self = _this;
            if (_this.isDelegationOn) {
                subscribeMap.set(el, _this);
                if (!!options.updateOnInput) {
                    dom.events.on(el, "input", function (e) {
                        e.stopPropagation();
                        self.handle_change(e);
                    }, _this.uniqueID);
                }
                else {
                    _this._setIsSubcribed(2);
                }
                _this._setIsSubcribed(3);
                if (!!options.updateOnKeyUp) {
                    _this._setIsSubcribed(5);
                }
            }
            else {
                dom.events.on(el, "keypress", function (e) {
                    self.handle_keypress(e);
                }, _this.uniqueID);
                if (!!options.updateOnInput) {
                    dom.events.on(el, "input", function (e) {
                        e.stopPropagation();
                        self.handle_change(e);
                    }, _this.uniqueID);
                }
                else {
                    dom.events.on(el, "change", function (e) {
                        e.stopPropagation();
                        self.handle_change(e);
                    }, _this.uniqueID);
                }
                if (!!options.updateOnKeyUp) {
                    dom.events.on(el, "keyup", function (e) {
                        self.handle_keyup(e);
                    }, _this.uniqueID);
                }
            }
            return _this;
        }
        TextBoxElView.prototype.handle_change = function (_e) {
            this.objEvents.raiseProp("value");
            return true;
        };
        TextBoxElView.prototype.handle_keypress = function (e) {
            var args = {
                keyCode: e.which,
                value: e.target.value,
                isCancel: false
            };
            this.objEvents.raise("keypress", args);
            if (args.isCancel) {
                e.preventDefault();
            }
            return true;
        };
        TextBoxElView.prototype.handle_keyup = function (_e) {
            this.objEvents.raiseProp("value");
        };
        TextBoxElView.prototype.addOnKeyPress = function (fn, nmspace) {
            this.objEvents.on("keypress", fn, nmspace);
        };
        TextBoxElView.prototype.offOnKeyPress = function (nmspace) {
            this.objEvents.off("keypress", nmspace);
        };
        TextBoxElView.prototype.toString = function () {
            return "TextBoxElView";
        };
        Object.defineProperty(TextBoxElView.prototype, "color", {
            get: function () {
                return this.el.style.color;
            },
            set: function (v) {
                var x = this.el.style.color;
                if (v !== x) {
                    this.el.style.color = v;
                    this.objEvents.raiseProp("color");
                }
            },
            enumerable: false,
            configurable: true
        });
        return TextBoxElView;
    }(input_1.InputElView));
    exports.TextBoxElView = TextBoxElView;
    bootstrapper_4.bootstrapper.registerElView("input:text", TextBoxElView);
});
define("jriapp_ui/content/string", ["require", "exports", "jriapp_ui/textbox", "jriapp_ui/content/basic"], function (require, exports, textbox_1, basic_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringContent = void 0;
    var StringContent = (function (_super) {
        __extends(StringContent, _super);
        function StringContent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(StringContent.prototype, "allowedKeys", {
            get: function () {
                if (!StringContent._allowedKeys) {
                    StringContent._allowedKeys = [0, 8, 127, 37, 39, 35, 36, 9, 27, 13];
                }
                return StringContent._allowedKeys;
            },
            enumerable: false,
            configurable: true
        });
        StringContent.prototype.createView = function () {
            _super.prototype.createView.call(this);
            var self = this, fieldInfo = self.getFieldInfo();
            if (self.view instanceof textbox_1.TextBoxElView) {
                self.view.addOnKeyPress(function (_, args) {
                    args.isCancel = !self.previewKeyPress(fieldInfo, args.keyCode, args.value);
                });
            }
        };
        StringContent.prototype.previewKeyPress = function (fieldInfo, keyCode, value) {
            if (this.allowedKeys.indexOf(keyCode) > -1) {
                return true;
            }
            return !(fieldInfo.maxLength > 0 && value.length >= fieldInfo.maxLength);
        };
        StringContent.prototype.toString = function () {
            return "StringContent";
        };
        StringContent._allowedKeys = null;
        return StringContent;
    }(basic_1.BasicContent));
    exports.StringContent = StringContent;
});
define("jriapp_ui/textarea", ["require", "exports", "jriapp/bootstrapper", "jriapp_ui/textbox"], function (require, exports, bootstrapper_5, textbox_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TextAreaElView = void 0;
    var TextAreaElView = (function (_super) {
        __extends(TextAreaElView, _super);
        function TextAreaElView(el, options) {
            var _this = _super.call(this, el, options) || this;
            if (!!options.wrap) {
                el.wrap = options.wrap;
            }
            return _this;
        }
        TextAreaElView.prototype.toString = function () {
            return "TextAreaElView";
        };
        Object.defineProperty(TextAreaElView.prototype, "wrap", {
            get: function () {
                return this.el.wrap;
            },
            set: function (v) {
                var x = this.wrap;
                if (x !== v) {
                    this.el.wrap = v;
                    this.objEvents.raiseProp("wrap");
                }
            },
            enumerable: false,
            configurable: true
        });
        return TextAreaElView;
    }(textbox_2.TextBoxElView));
    exports.TextAreaElView = TextAreaElView;
    bootstrapper_5.bootstrapper.registerElView("textarea", TextAreaElView);
});
define("jriapp_ui/content/multyline", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp_ui/textarea", "jriapp_ui/content/basic"], function (require, exports, jriapp_shared_7, dom_6, textarea_1, basic_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MultyLineContent = void 0;
    var utils = jriapp_shared_7.Utils, NAME = "multyline", format = utils.str.format, dom = dom_6.DomUtils, doc = dom.document;
    var MultyLineContent = (function (_super) {
        __extends(MultyLineContent, _super);
        function MultyLineContent(options) {
            var _this = this;
            if (options.contentOptions.name !== NAME) {
                throw new Error(format(jriapp_shared_7.LocaleERRS.ERR_ASSERTION_FAILED, "contentOptions.name === '" + NAME + "'"));
            }
            _this = _super.call(this, options) || this;
            return _this;
        }
        Object.defineProperty(MultyLineContent.prototype, "allowedKeys", {
            get: function () {
                if (!MultyLineContent._allowedKeys) {
                    MultyLineContent._allowedKeys = [0, 8, 127, 37, 39, 35, 36, 9, 27, 13];
                }
                return MultyLineContent._allowedKeys;
            },
            enumerable: false,
            configurable: true
        });
        MultyLineContent.prototype.createdEditingView = function () {
            var name = this.getViewName(true), el = doc.createElement("textarea"), options = this.options.options;
            var view = basic_2.getView(el, name, options);
            if (!!view) {
                this.lfScope.addObj(view);
            }
            var bindOption = basic_2.getBindingOption(true, this.options.fieldName, view, this.dataContext, "value", this.getConverter(true), this.getParam(true));
            this.lfScope.addObj(this.app.bind(bindOption));
            return view;
        };
        MultyLineContent.prototype.createdReadingView = function () {
            var name = this.getViewName(false), el = doc.createElement("div");
            var view = basic_2.getView(el, name, {});
            if (!!view) {
                this.lfScope.addObj(view);
            }
            var bindOption = basic_2.getBindingOption(false, this.options.fieldName, view, this.dataContext, "value", this.getConverter(false), this.getParam(false));
            this.lfScope.addObj(this.app.bind(bindOption));
            return view;
        };
        MultyLineContent.prototype.createView = function () {
            _super.prototype.createView.call(this);
            var self = this, fieldInfo = self.getFieldInfo();
            if (self.view instanceof textarea_1.TextAreaElView) {
                self.view.addOnKeyPress(function (_, args) {
                    args.isCancel = !self.previewKeyPress(fieldInfo, args.keyCode, args.value);
                });
            }
        };
        MultyLineContent.prototype.previewKeyPress = function (fieldInfo, keyCode, value) {
            if (this.allowedKeys.indexOf(keyCode) > -1) {
                return true;
            }
            return !(fieldInfo.maxLength > 0 && value.length >= fieldInfo.maxLength);
        };
        MultyLineContent.prototype.toString = function () {
            return "MultyLineContent";
        };
        MultyLineContent._allowedKeys = null;
        return MultyLineContent;
    }(basic_2.BasicContent));
    exports.MultyLineContent = MultyLineContent;
});
define("jriapp_ui/content/bool", ["require", "exports", "jriapp/utils/dom", "jriapp_ui/content/basic"], function (require, exports, dom_7, basic_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BoolContent = void 0;
    var dom = dom_7.DomUtils, doc = dom.document;
    var BoolContent = (function (_super) {
        __extends(BoolContent, _super);
        function BoolContent(options) {
            var _this = _super.call(this, options) || this;
            _this._label = null;
            return _this;
        }
        BoolContent.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            _super.prototype.dispose.call(this);
            if (!!this._label) {
                dom.removeNode(this._label);
                this._label = null;
            }
        };
        BoolContent.prototype.createCheckBoxView = function () {
            var finf = this.getFieldInfo(), isNullable = !finf ? false : finf.isNullable;
            var chk = document.createElement("input");
            chk.setAttribute("type", "checkbox");
            dom.addClass([chk], "ria-checkbox");
            var view = isNullable ? basic_3.getView(chk, "checkbox3", {}) : basic_3.getView(chk, "checkbox", {});
            if (!!view) {
                this.lfScope.addObj(view);
            }
            var label = doc.createElement("label");
            dom.addClass([label], "ria-checkbox");
            label.appendChild(view.el);
            label.appendChild(doc.createElement("span"));
            this._label = label;
            var options = basic_3.getBindingOption(true, this.options.fieldName, view, this.dataContext, "checked");
            this.lfScope.addObj(this.app.bind(options));
            return view;
        };
        BoolContent.prototype.createdEditingView = function () {
            return this.createCheckBoxView();
        };
        BoolContent.prototype.createdReadingView = function () {
            return this.createCheckBoxView();
        };
        BoolContent.prototype.beforeCreateView = function () {
            var res = !this.view && !!this.options.fieldName;
            if (!!this.view) {
                this.updateCss();
            }
            return res;
        };
        BoolContent.prototype.afterCreateView = function () {
            this.parentEl.appendChild(this._label);
        };
        BoolContent.prototype.updateCss = function () {
            _super.prototype.updateCss.call(this);
            var el = this.el;
            if (this.isEditing && this.getIsCanBeEdited()) {
                el.disabled = false;
            }
            else {
                el.disabled = true;
            }
        };
        BoolContent.prototype.toString = function () {
            return "BoolContent";
        };
        return BoolContent;
    }(basic_3.BasicContent));
    exports.BoolContent = BoolContent;
});
define("jriapp_ui/content/number", ["require", "exports", "jriapp/bootstrapper", "jriapp_ui/textbox", "jriapp_ui/content/basic"], function (require, exports, bootstrapper_6, textbox_3, basic_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NumberContent = void 0;
    var NumberContent = (function (_super) {
        __extends(NumberContent, _super);
        function NumberContent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(NumberContent.prototype, "allowedKeys", {
            get: function () {
                if (!NumberContent._allowedKeys) {
                    NumberContent._allowedKeys = [0, 8, 127, 37, 39, 35, 36, 9, 27, 13];
                }
                return NumberContent._allowedKeys;
            },
            enumerable: false,
            configurable: true
        });
        NumberContent.prototype.getConverter = function (_isEdit) {
            var finf = this.getFieldInfo();
            switch (finf.dataType) {
                case 3:
                    return this.app.getConverter("integerConverter");
                case 4:
                    return this.app.getConverter("decimalConverter");
                default:
                    return this.app.getConverter("floatConverter");
            }
        };
        NumberContent.prototype.createView = function () {
            _super.prototype.createView.call(this);
            var self = this;
            if (self.view instanceof textbox_3.TextBoxElView) {
                self.view.addOnKeyPress(function (_, args) {
                    args.isCancel = !self.previewKeyPress(args.keyCode, args.value);
                });
            }
        };
        NumberContent.prototype.previewKeyPress = function (keyCode, value) {
            var ch = String.fromCharCode(keyCode), digits = "1234567890", defaults = bootstrapper_6.bootstrapper.defaults, notAllowedChars = "~@#$%^&*()+=_";
            if (notAllowedChars.indexOf(ch) > -1) {
                return false;
            }
            if (this.allowedKeys.indexOf(keyCode) > -1) {
                return true;
            }
            if (ch === "-" && value.length === 0) {
                return true;
            }
            if (ch === defaults.decimalPoint) {
                return (value.length === 0) ? false : value.indexOf(ch) < 0;
            }
            return (ch === defaults.thousandSep) ? true : digits.indexOf(ch) > -1;
        };
        NumberContent.prototype.toString = function () {
            return "NumberContent";
        };
        NumberContent._allowedKeys = null;
        return NumberContent;
    }(basic_4.BasicContent));
    exports.NumberContent = NumberContent;
});
define("jriapp_ui/content/date", ["require", "exports", "jriapp_shared", "jriapp_ui/content/basic"], function (require, exports, jriapp_shared_8, basic_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DateContent = void 0;
    var utils = jriapp_shared_8.Utils, format = utils.str.format;
    var NAME = "datepicker";
    var DateContent = (function (_super) {
        __extends(DateContent, _super);
        function DateContent(options) {
            var _this = this;
            if (options.contentOptions.name !== NAME) {
                throw new Error(format(jriapp_shared_8.LocaleERRS.ERR_ASSERTION_FAILED, "contentOptions.name === '" + NAME + "'"));
            }
            _this = _super.call(this, options) || this;
            return _this;
        }
        DateContent.prototype.getConverter = function (_isEdit) {
            return this.app.getConverter("dateConverter");
        };
        DateContent.prototype.getViewName = function (isEdit) {
            return isEdit ? NAME : null;
        };
        DateContent.prototype.toString = function () {
            return "DateContent";
        };
        return DateContent;
    }(basic_5.BasicContent));
    exports.DateContent = DateContent;
});
define("jriapp_ui/content/datetime", ["require", "exports", "jriapp/bootstrapper", "jriapp_ui/content/basic"], function (require, exports, bootstrapper_7, basic_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DateTimeContent = void 0;
    var DateTimeContent = (function (_super) {
        __extends(DateTimeContent, _super);
        function DateTimeContent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DateTimeContent.prototype.getParam = function (_isEdit) {
            var finf = this.getFieldInfo(), defaults = bootstrapper_7.bootstrapper.defaults;
            switch (finf.dataType) {
                case 6:
                    return defaults.dateTimeFormat;
                case 7:
                    return defaults.dateFormat;
                case 8:
                    return defaults.timeFormat;
                default:
                    return null;
            }
        };
        DateTimeContent.prototype.getConverter = function (_isEdit) {
            return this.app.getConverter("dateTimeConverter");
        };
        DateTimeContent.prototype.toString = function () {
            return "DateTimeContent";
        };
        return DateTimeContent;
    }(basic_6.BasicContent));
    exports.DateTimeContent = DateTimeContent;
});
define("jriapp_ui/listbox", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp/bootstrapper", "jriapp_ui/baseview"], function (require, exports, jriapp_shared_9, dom_8, bootstrapper_8, baseview_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListBoxElView = exports.ListBox = void 0;
    var utils = jriapp_shared_9.Utils, dom = dom_8.DomUtils, doc = dom.document, sys = utils.sys, _a = utils.check, _undefined = _a._undefined, isString = _a.isString, isNt = _a.isNt, _b = utils.core, forEach = _b.forEach, extend = _b.extend, getNewID = _b.getNewID, Indexer = _b.Indexer, boot = bootstrapper_8.bootstrapper, subscribeMap = bootstrapper_8.subscribeWeakMap;
    var LISTBOX_EVENTS;
    (function (LISTBOX_EVENTS) {
        LISTBOX_EVENTS["refreshed"] = "refreshed";
    })(LISTBOX_EVENTS || (LISTBOX_EVENTS = {}));
    function fn_Str(v) {
        return (isNt(v)) ? "" : ("" + v);
    }
    var ListBox = (function (_super) {
        __extends(ListBox, _super);
        function ListBox(el, options) {
            var _this = _super.call(this) || this;
            var self = _this;
            options = extend({
                dataSource: null,
                valuePath: null,
                textPath: null,
                statePath: null,
                syncSetDatasource: false,
                nodelegate: false
            }, options);
            if (!!options.dataSource && !sys.isCollection(options.dataSource)) {
                throw new Error(jriapp_shared_9.LocaleERRS.ERR_LISTBOX_DATASRC_INVALID);
            }
            _this._el = el;
            _this._options = options;
            _this._uniqueID = getNewID("lst");
            _this._isDSFilled = false;
            _this._textProvider = null;
            _this._stateProvider = null;
            _this._isRefreshing = false;
            _this._selectedValue = null;
            _this._dsDebounce = new jriapp_shared_9.Debounce();
            _this._stDebounce = new jriapp_shared_9.Debounce();
            _this._txtDebounce = new jriapp_shared_9.Debounce();
            _this._changeDebounce = new jriapp_shared_9.Debounce();
            _this._keyMap = Indexer();
            _this._valMap = Indexer();
            _this._savedVal = _undefined;
            _this._fnState = function (data) {
                if (!data || !data.item || data.item.getIsStateDirty()) {
                    return;
                }
                var item = data.item, path = self.statePath, val = !path ? null : sys.resolvePath(item, path), spr = self._stateProvider;
                data.op.className = !spr ? "" : spr.getCSS(item, data.op.index, val);
            };
            if (!_this._options.nodelegate) {
                subscribeMap.set(el, _this);
            }
            else {
                dom.events.on(el, "change", function (e) { return _this.handle_change(e); }, _this._uniqueID);
            }
            var ds = _this._options.dataSource;
            _this.setDataSource(ds);
            return _this;
        }
        ListBox.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            if (!this._options.nodelegate) {
                subscribeMap.delete(this._el);
            }
            dom.events.offNS(this._el, this._uniqueID);
            this._dsDebounce.dispose();
            this._stDebounce.dispose();
            this._txtDebounce.dispose();
            this._changeDebounce.dispose();
            this._fnCheckSelected = null;
            this._unbindDS();
            this._clear();
            this._el = null;
            this._selectedValue = _undefined;
            this._savedVal = _undefined;
            this._options = {};
            this._textProvider = null;
            this._stateProvider = null;
            this._isDSFilled = false;
            _super.prototype.dispose.call(this);
        };
        ListBox.prototype._bindDS = function () {
            var self = this, ds = this.dataSource;
            if (!ds) {
                return;
            }
            ds.addOnCollChanged(self._onDSCollectionChanged, self._uniqueID, self);
            ds.addOnBeginEdit(function (_, args) {
                self._onEdit(args.item, true, false);
            }, self._uniqueID);
            ds.addOnEndEdit(function (_, args) {
                self._onEdit(args.item, false, args.isCanceled);
            }, self._uniqueID);
            ds.addOnStatusChanged(function (_, args) {
                self._onStatusChanged(args.item, args.oldStatus);
            }, self._uniqueID);
            ds.addOnCommitChanges(function (_, args) {
                self._onCommitChanges(args.item, args.isBegin, args.isRejected, args.status);
            }, self._uniqueID);
        };
        ListBox.prototype._unbindDS = function () {
            var self = this, ds = this.dataSource;
            if (!ds) {
                return;
            }
            ds.objEvents.offNS(self._uniqueID);
        };
        ListBox.prototype._addOption = function (item, first) {
            var key = !item ? "" : item._key;
            if (!!this._keyMap[key]) {
                return null;
            }
            var selEl = this.el;
            var text = "";
            if (!item) {
                if (isString(this._options.emptyOptionText)) {
                    text = this._options.emptyOptionText;
                }
            }
            else {
                text = this._getText(item, selEl.options.length);
            }
            var val = fn_Str(this._getValue(item));
            var oOption = doc.createElement("option");
            oOption.text = text;
            oOption.value = key;
            var data = { item: item, op: oOption };
            this._keyMap[key] = data;
            if (!!val) {
                this._valMap[val] = data;
            }
            if (!!first) {
                if (selEl.options.length < 2) {
                    selEl.add(oOption, null);
                }
                else {
                    var firstOp = selEl.options[1];
                    selEl.add(oOption, firstOp);
                }
            }
            else {
                selEl.add(oOption, null);
            }
            if (!!item) {
                if (!!this.statePath) {
                    item.objEvents.onProp(this.statePath, this._fnState, this._uniqueID);
                }
                this._fnState(data);
            }
            return data;
        };
        ListBox.prototype._mapByValue = function () {
            var self = this;
            this._valMap = Indexer();
            forEach(this._keyMap, function (key) {
                var data = self._keyMap[key], val = fn_Str(self._getValue(data.item));
                if (!!val) {
                    self._valMap[val] = data;
                }
            });
        };
        ListBox.prototype._resetText = function () {
            var self = this;
            forEach(this._keyMap, function (key) {
                var data = self._keyMap[key];
                data.op.text = self._getText(data.item, data.op.index);
            });
        };
        ListBox.prototype._resetState = function () {
            var self = this;
            forEach(this._keyMap, function (key) {
                self._fnState(self._keyMap[key]);
            });
        };
        ListBox.prototype._removeOption = function (item) {
            if (!!item) {
                var key = item._key, data = this._keyMap[key];
                if (!data) {
                    return;
                }
                item.objEvents.offNS(this._uniqueID);
                this.el.remove(data.op.index);
                var val = fn_Str(this._getValue(item));
                delete this._keyMap[key];
                if (!!val) {
                    delete this._valMap[val];
                }
                var curVal = this.getByIndex(this.selectedIndex);
                var v = (!curVal ? null : this._getValue(curVal.item));
                this._selectedValue = v;
                this.updateSelected(v);
            }
        };
        ListBox.prototype._clear = function () {
            var self = this, keys = Object.keys(self._keyMap);
            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                var key = keys_1[_i];
                var data = self._keyMap[key];
                if (!!data && !!data.item) {
                    data.item.objEvents.offNS(self._uniqueID);
                }
            }
            this.el.options.length = 0;
            this._keyMap = Indexer();
            this._valMap = Indexer();
        };
        ListBox.prototype._refresh = function () {
            var self = this, ds = this.dataSource;
            this.beginTrackSelected();
            this._isRefreshing = true;
            try {
                this._clear();
                if (!this._options.noEmptyOption) {
                    this._addOption(null, false);
                }
                var cnt = 0;
                if (!!ds) {
                    for (var _i = 0, _a = ds.items; _i < _a.length; _i++) {
                        var item = _a[_i];
                        self._addOption(item, false);
                        ++cnt;
                    }
                }
                if (this._isDSFilled && !isNt(this._selectedValue) && !this.getByValue(this._selectedValue)) {
                    this.selectedValue = null;
                }
                else {
                    self.updateSelected(this._selectedValue);
                }
                if (cnt > 0) {
                    this._isDSFilled = true;
                }
            }
            finally {
                self._isRefreshing = false;
                this.endTrackSelected();
            }
            this.objEvents.raise("refreshed", {});
        };
        ListBox.prototype._onSelectedChanged = function () {
            var data = this.getByIndex(this.selectedIndex);
            if (!data) {
                this.selectedValue = null;
                return;
            }
            var newVal = this._getValue(data.item);
            this.selectedValue = newVal;
        };
        ListBox.prototype._getValue = function (item) {
            if (!item) {
                return null;
            }
            if (!!this._options.valuePath) {
                return sys.resolvePath(item, this._options.valuePath);
            }
            else {
                return null;
            }
        };
        ListBox.prototype._getText = function (item, index) {
            var res = "";
            if (!item) {
                return res;
            }
            if (!!this._options.textPath) {
                var t = sys.resolvePath(item, this._options.textPath);
                res = fn_Str(t);
            }
            else {
                res = fn_Str(this._getValue(item));
            }
            return (!this._textProvider) ? res : this._textProvider.getText(item, index, res);
        };
        ListBox.prototype._onDSCollectionChanged = function (_, args) {
            var self = this;
            this.beginTrackSelected();
            try {
                switch (args.changeType) {
                    case 2:
                        {
                            this._refresh();
                        }
                        break;
                    case 1:
                        {
                            for (var _i = 0, _a = args.items; _i < _a.length; _i++) {
                                var item = _a[_i];
                                self._addOption(item, item._aspect.isNew);
                            }
                        }
                        break;
                    case 0:
                        {
                            for (var _b = 0, _c = args.items; _b < _c.length; _b++) {
                                var item = _c[_b];
                                self._removeOption(item);
                            }
                            if (!!self._textProvider) {
                                self._resetText();
                            }
                        }
                        break;
                    case 3:
                        {
                            var data = self._keyMap[args.old_key];
                            if (!!data) {
                                delete self._keyMap[args.old_key];
                                self._keyMap[args.new_key] = data;
                                data.op.value = args.new_key;
                            }
                        }
                        break;
                }
            }
            finally {
                this.endTrackSelected();
            }
        };
        ListBox.prototype._onEdit = function (item, isBegin, isCanceled) {
            var self = this;
            if (isBegin) {
                this.beginTrackSelected();
                this._savedVal = this._getValue(item);
            }
            else {
                try {
                    if (!isCanceled) {
                        var oldVal = this._savedVal;
                        this._savedVal = _undefined;
                        var key = item._key, data = self._keyMap[key];
                        if (!!data) {
                            data.op.text = self._getText(item, data.op.index);
                            var val = this._getValue(item);
                            if (oldVal !== val) {
                                if (!isNt(oldVal)) {
                                    delete self._valMap[fn_Str(oldVal)];
                                }
                                if (!isNt(val)) {
                                    self._valMap[fn_Str(val)] = data;
                                }
                            }
                        }
                        else {
                            if (!isNt(oldVal)) {
                                delete self._valMap[fn_Str(oldVal)];
                            }
                        }
                    }
                }
                finally {
                    this.endTrackSelected();
                }
            }
        };
        ListBox.prototype._onStatusChanged = function (item, _oldStatus) {
            var newStatus = item._aspect.status;
            this.beginTrackSelected();
            if (newStatus === 3) {
                this._removeOption(item);
                if (!!this._textProvider) {
                    this._resetText();
                }
            }
            this.endTrackSelected();
        };
        ListBox.prototype._onCommitChanges = function (item, isBegin, isRejected, status) {
            var self = this;
            if (isBegin) {
                this.beginTrackSelected();
                if (isRejected && status === 1) {
                    return;
                }
                else if (!isRejected && status === 3) {
                    return;
                }
                this._savedVal = this._getValue(item);
            }
            else {
                var oldVal = this._savedVal;
                this._savedVal = _undefined;
                if (isRejected && status === 3) {
                    this._addOption(item, true);
                    this.endTrackSelected();
                    return;
                }
                try {
                    var val = this._getValue(item), data = self._keyMap[item._key];
                    if (oldVal !== val) {
                        if (!isNt(oldVal)) {
                            delete self._valMap[fn_Str(oldVal)];
                        }
                        if (!!data && !isNt(val)) {
                            self._valMap[fn_Str(val)] = data;
                        }
                    }
                    if (!!data) {
                        data.op.text = self._getText(item, data.op.index);
                    }
                }
                finally {
                    this.endTrackSelected();
                }
            }
        };
        ListBox.prototype.getItemIndex = function (item) {
            if (!item || item.getIsStateDirty()) {
                return -1;
            }
            var data = this._keyMap[item._key];
            return (!data) ? -1 : data.op.index;
        };
        ListBox.prototype.getByValue = function (val) {
            if (isNt(val)) {
                return null;
            }
            var key = fn_Str(val);
            var data = this._valMap[key];
            return (!data) ? null : data;
        };
        ListBox.prototype.getByIndex = function (index) {
            if (index >= 0 && index < this.el.length) {
                var op = this.el.options[index], key = op.value;
                return this._keyMap[key];
            }
            return null;
        };
        ListBox.prototype.updateSelected = function (v) {
            var data = (isNt(v) ? null : this.getByValue(v));
            var index = (!data ? 0 : data.op.index), oldRefreshing = this._isRefreshing;
            this._isRefreshing = true;
            try {
                this.selectedIndex = index;
            }
            finally {
                this._isRefreshing = oldRefreshing;
            }
        };
        ListBox.prototype.beginTrackSelected = function () {
            if (!!this._fnCheckSelected) {
                return;
            }
            var self = this, prevVal = fn_Str(self.selectedValue), prevItem = self.selectedItem;
            this._fnCheckSelected = function () {
                self._fnCheckSelected = null;
                var newVal = fn_Str(self.selectedValue), newItem = self.selectedItem;
                if (prevVal !== newVal) {
                    self.objEvents.raiseProp("selectedValue");
                }
                if (prevItem !== newItem) {
                    self.objEvents.raiseProp("selectedItem");
                }
            };
        };
        ListBox.prototype.endTrackSelected = function () {
            var _this = this;
            this._changeDebounce.enque(function () {
                var fn = _this._fnCheckSelected;
                _this._fnCheckSelected = null;
                if (!!fn) {
                    fn();
                }
            });
        };
        ListBox.prototype.setIsEnabled = function (el, v) {
            el.disabled = !v;
        };
        ListBox.prototype.getIsEnabled = function (el) {
            return !el.disabled;
        };
        ListBox.prototype.setDataSource = function (v) {
            var _this = this;
            this._isDSFilled = false;
            this.beginTrackSelected();
            this._unbindDS();
            this._options.dataSource = v;
            var fn_init = function () {
                try {
                    var ds = _this._options.dataSource;
                    _this._txtDebounce.cancel();
                    _this._stDebounce.cancel();
                    if (!!ds && !ds.getIsStateDirty()) {
                        _this._bindDS();
                        _this._refresh();
                    }
                    else {
                        _this._clear();
                        if (!_this._options.noEmptyOption) {
                            _this._addOption(null, false);
                        }
                    }
                }
                finally {
                    _this.endTrackSelected();
                }
            };
            if (!!this._options.syncSetDatasource) {
                fn_init();
            }
            else {
                this._dsDebounce.enque(fn_init);
            }
        };
        Object.defineProperty(ListBox.prototype, "selectedIndex", {
            get: function () {
                return (!this.el || this.el.length == 0) ? -1 : this.el.selectedIndex;
            },
            set: function (v) {
                if (!!this.el && this.el.length > v && this.selectedIndex !== v) {
                    this.el.selectedIndex = v;
                }
            },
            enumerable: false,
            configurable: true
        });
        ListBox.prototype.isSubscribed = function (flag) {
            return !this._options.nodelegate && flag === 2;
        };
        ListBox.prototype.handle_change = function (_e) {
            if (this._isRefreshing) {
                return true;
            }
            this._onSelectedChanged();
            return true;
        };
        ListBox.prototype.addOnRefreshed = function (fn, nmspace, context) {
            this.objEvents.on("refreshed", fn, nmspace, context);
        };
        ListBox.prototype.offOnRefreshed = function (nmspace) {
            this.objEvents.off("refreshed", nmspace);
        };
        ListBox.prototype.getText = function (val) {
            var data = this.getByValue(val);
            return (!data) ? "" : data.op.text;
        };
        ListBox.prototype.toString = function () {
            return "ListBox";
        };
        Object.defineProperty(ListBox.prototype, "dataSource", {
            get: function () {
                return this._options.dataSource;
            },
            set: function (v) {
                if (this.dataSource !== v) {
                    this.setDataSource(v);
                    this.objEvents.raiseProp("dataSource");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBox.prototype, "selectedValue", {
            get: function () {
                return (!isNt(this._selectedValue) && !this.getByValue(this._selectedValue)) ? _undefined : this._selectedValue;
            },
            set: function (v) {
                if (this._selectedValue !== v) {
                    var oldItem = this.selectedItem;
                    this._selectedValue = v;
                    this.updateSelected(v);
                    this._fnCheckSelected = null;
                    this.objEvents.raiseProp("selectedValue");
                    if (oldItem !== this.selectedItem) {
                        this.objEvents.raiseProp("selectedItem");
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBox.prototype, "selectedItem", {
            get: function () {
                var item = this.getByValue(this._selectedValue);
                return (!item ? null : item.item);
            },
            set: function (v) {
                var newVal = this._getValue(v), oldItem = this.selectedItem;
                if (this._selectedValue !== newVal) {
                    this._selectedValue = newVal;
                    var item = this.getByValue(newVal);
                    this.selectedIndex = (!item ? 0 : item.op.index);
                    this._fnCheckSelected = null;
                    this.objEvents.raiseProp("selectedValue");
                    if (oldItem !== this.selectedItem) {
                        this.objEvents.raiseProp("selectedItem");
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBox.prototype, "valuePath", {
            get: function () {
                return this._options.valuePath;
            },
            set: function (v) {
                if (v !== this.valuePath) {
                    this._options.valuePath = v;
                    this._mapByValue();
                    this.objEvents.raiseProp("valuePath");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBox.prototype, "textPath", {
            get: function () {
                return this._options.textPath;
            },
            set: function (v) {
                if (v !== this.textPath) {
                    this._options.textPath = v;
                    this._resetText();
                    this.objEvents.raiseProp("textPath");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBox.prototype, "statePath", {
            get: function () {
                return this._options.statePath;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBox.prototype, "isEnabled", {
            get: function () {
                return this.getIsEnabled(this.el);
            },
            set: function (v) {
                if (v !== this.isEnabled) {
                    this.setIsEnabled(this.el, v);
                    this.objEvents.raiseProp("isEnabled");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBox.prototype, "textProvider", {
            get: function () {
                return this._textProvider;
            },
            set: function (v) {
                var _this = this;
                if (v !== this._textProvider) {
                    this._textProvider = v;
                    this._txtDebounce.enque(function () {
                        _this._resetText();
                    });
                    this.objEvents.raiseProp("textProvider");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBox.prototype, "stateProvider", {
            get: function () {
                return this._stateProvider;
            },
            set: function (v) {
                var _this = this;
                if (v !== this._stateProvider) {
                    this._stateProvider = v;
                    this._stDebounce.enque(function () {
                        _this._resetState();
                    });
                    this.objEvents.raiseProp("stateProvider");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBox.prototype, "el", {
            get: function () {
                return this._el;
            },
            enumerable: false,
            configurable: true
        });
        return ListBox;
    }(jriapp_shared_9.BaseObject));
    exports.ListBox = ListBox;
    var ListBoxElView = (function (_super) {
        __extends(ListBoxElView, _super);
        function ListBoxElView(el, options) {
            var _this = _super.call(this, el, options) || this;
            var self = _this;
            self._listBox = new ListBox(el, options);
            self._listBox.objEvents.onProp("*", function (_, args) {
                switch (args.property) {
                    case "dataSource":
                    case "isEnabled":
                    case "selectedValue":
                    case "selectedItem":
                    case "valuePath":
                    case "textPath":
                    case "textProvider":
                    case "stateProvider":
                        self.objEvents.raiseProp(args.property);
                        break;
                }
            }, self.uniqueID);
            return _this;
        }
        ListBoxElView.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            if (!this._listBox.getIsStateDirty()) {
                this._listBox.dispose();
            }
            _super.prototype.dispose.call(this);
        };
        ListBoxElView.prototype.toString = function () {
            return "ListBoxElView";
        };
        ListBoxElView.prototype.addOnRefreshed = function (fn, nmspace, context) {
            this._listBox.objEvents.on("refreshed", fn, nmspace, context);
        };
        ListBoxElView.prototype.offOnRefreshed = function (nmspace) {
            this._listBox.objEvents.off("refreshed", nmspace);
        };
        ListBoxElView.prototype.getText = function (val) {
            return this._listBox.getText(val);
        };
        Object.defineProperty(ListBoxElView.prototype, "isEnabled", {
            get: function () {
                return !this.el.disabled;
            },
            set: function (v) {
                v = !v;
                if (v !== !this.isEnabled) {
                    this.el.disabled = v;
                    this.objEvents.raiseProp("isEnabled");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBoxElView.prototype, "dataSource", {
            get: function () {
                return this._listBox.dataSource;
            },
            set: function (v) {
                var self = this;
                if (self.dataSource !== v) {
                    self._listBox.dataSource = v;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBoxElView.prototype, "selectedValue", {
            get: function () {
                return (this.getIsStateDirty()) ? _undefined : this._listBox.selectedValue;
            },
            set: function (v) {
                if (this._listBox.selectedValue !== v) {
                    this._listBox.selectedValue = v;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBoxElView.prototype, "selectedItem", {
            get: function () {
                return (this.getIsStateDirty()) ? _undefined : this._listBox.selectedItem;
            },
            set: function (v) {
                this._listBox.selectedItem = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBoxElView.prototype, "valuePath", {
            get: function () {
                return this._listBox.valuePath;
            },
            set: function (v) {
                this._listBox.valuePath = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBoxElView.prototype, "textPath", {
            get: function () {
                return this._listBox.textPath;
            },
            set: function (v) {
                this._listBox.textPath = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBoxElView.prototype, "textProvider", {
            get: function () {
                return this._listBox.textProvider;
            },
            set: function (v) {
                this._listBox.textProvider = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBoxElView.prototype, "stateProvider", {
            get: function () {
                return this._listBox.stateProvider;
            },
            set: function (v) {
                this._listBox.stateProvider = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListBoxElView.prototype, "listBox", {
            get: function () {
                return this._listBox;
            },
            enumerable: false,
            configurable: true
        });
        return ListBoxElView;
    }(baseview_2.BaseElView));
    exports.ListBoxElView = ListBoxElView;
    boot.registerElView("select", ListBoxElView);
});
define("jriapp_ui/content/lookup", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp_ui/listbox", "jriapp_ui/content/basic"], function (require, exports, jriapp_shared_10, dom_9, listbox_1, basic_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LookupContent = void 0;
    var utils = jriapp_shared_10.Utils, dom = dom_9.DomUtils, doc = dom.document, _undefined = utils.check._undefined, format = utils.str.format, getNewID = utils.core.getNewID, sys = utils.sys;
    var LOOKUP_EVENTS;
    (function (LOOKUP_EVENTS) {
        LOOKUP_EVENTS["obj_created"] = "object_created";
        LOOKUP_EVENTS["obj_needed"] = "object_needed";
    })(LOOKUP_EVENTS || (LOOKUP_EVENTS = {}));
    var LookupConverter = (function () {
        function LookupConverter(content) {
            this._content = content;
        }
        LookupConverter.prototype.convertToSource = function (_val, _param, _dataContext) {
            return _undefined;
        };
        LookupConverter.prototype.convertToTarget = function (val, _param, _dataContext) {
            return this._content.getLookupText(val);
        };
        LookupConverter.prototype.toString = function () {
            return "LookupConverter";
        };
        return LookupConverter;
    }());
    var LookupContent = (function (_super) {
        __extends(LookupContent, _super);
        function LookupContent(options) {
            var _this = this;
            if (options.contentOptions.name !== "lookup") {
                throw new Error(format(jriapp_shared_10.LocaleERRS.ERR_ASSERTION_FAILED, "contentOptions.name === 'lookup'"));
            }
            _this = _super.call(this, options) || this;
            _this._converter = new LookupConverter(_this);
            _this._listBox = null;
            _this._isListBoxCachedExternally = false;
            _this._uniqueID = getNewID("lkup");
            if (!!_this.options.initContentFn) {
                _this.options.initContentFn(_this);
            }
            return _this;
        }
        LookupContent.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            if (!!this._listBox) {
                this._listBox.objEvents.offNS(this.uniqueID);
                if (!this._isListBoxCachedExternally && !this._listBox.getIsStateDirty()) {
                    this._listBox.dispose();
                }
                this._listBox = null;
            }
            this._converter = null;
            _super.prototype.dispose.call(this);
        };
        LookupContent.prototype.getConverter = function (isEdit) {
            return (!isEdit) ? this._converter : null;
        };
        LookupContent.prototype.getListBox = function () {
            if (!!this._listBox) {
                return this._listBox;
            }
            var lookUpOptions = this.options.options, objectKey = "listBox";
            var args1 = {
                objectKey: objectKey,
                result: null
            };
            this.objEvents.raise("object_needed", args1);
            if (!!args1.result) {
                this._isListBoxCachedExternally = true;
                this._listBox = args1.result;
            }
            if (!!this._listBox) {
                this._listBox.addOnRefreshed(this.onListRefreshed, this.uniqueID, this);
                return this._listBox;
            }
            var listBox = this.createListBox(lookUpOptions);
            var args2 = {
                objectKey: objectKey,
                result: listBox,
                isCachedExternally: false
            };
            this.objEvents.raise("object_created", args2);
            this._isListBoxCachedExternally = args2.isCachedExternally;
            this._listBox = listBox;
            this._listBox.addOnRefreshed(this.onListRefreshed, this.uniqueID, this);
            return this._listBox;
        };
        LookupContent.prototype.onListRefreshed = function () {
            var bindings = this.lfScope.getObjs().filter(function (obj) { return sys.isBinding(obj); }).map(function (obj) { return obj; });
            for (var _i = 0, bindings_1 = bindings; _i < bindings_1.length; _i++) {
                var binding = bindings_1[_i];
                if (binding.targetPath.length > 0 && binding.targetPath[0] === "value") {
                    binding.updateTarget();
                }
            }
        };
        LookupContent.prototype.createListBox = function (lookUpOptions) {
            var el = doc.createElement("select"), options = {
                valuePath: lookUpOptions.valuePath,
                textPath: lookUpOptions.textPath,
                statePath: (!lookUpOptions.statePath) ? null : lookUpOptions.statePath,
                syncSetDatasource: true,
                dataSource: sys.resolvePath(this.app, lookUpOptions.dataSource)
            };
            el.setAttribute("size", "1");
            return new listbox_1.ListBoxElView(el, options);
        };
        LookupContent.prototype.cleanUp = function () {
            _super.prototype.cleanUp.call(this);
            if (!!this._listBox && this._isListBoxCachedExternally) {
                this._listBox.objEvents.offNS(this.uniqueID);
                this._listBox = null;
            }
        };
        LookupContent.prototype.bindToList = function (listBox) {
            var options = {
                target: listBox,
                source: this.dataContext,
                targetPath: "selectedValue",
                sourcePath: this.options.fieldName,
                isSourceFixed: false,
                mode: 2,
                converter: null,
                param: null,
                isBind: false
            };
            return this.app.bind(options);
        };
        LookupContent.prototype.createdEditingView = function () {
            var listBox = this.getListBox();
            this.lfScope.addObj(this.bindToList(listBox));
            return listBox;
        };
        LookupContent.prototype.beforeCreateView = function () {
            this.cleanUp();
            return !!this.options.fieldName;
        };
        LookupContent.prototype.addOnObjectCreated = function (fn, nmspace) {
            this.objEvents.on("object_created", fn, nmspace);
        };
        LookupContent.prototype.offOnObjectCreated = function (nmspace) {
            this.objEvents.off("object_created", nmspace);
        };
        LookupContent.prototype.addOnObjectNeeded = function (fn, nmspace) {
            this.objEvents.on("object_needed", fn, nmspace);
        };
        LookupContent.prototype.offOnObjectNeeded = function (nmspace) {
            this.objEvents.off("object_needed", nmspace);
        };
        LookupContent.prototype.getLookupText = function (val) {
            var listBox = this.getListBox();
            return listBox.getText(val);
        };
        LookupContent.prototype.toString = function () {
            return "LookupContent";
        };
        Object.defineProperty(LookupContent.prototype, "uniqueID", {
            get: function () {
                return this._uniqueID;
            },
            enumerable: false,
            configurable: true
        });
        return LookupContent;
    }(basic_7.BasicContent));
    exports.LookupContent = LookupContent;
});
define("jriapp_ui/content/factory", ["require", "exports", "jriapp_shared", "jriapp_ui/content/basic", "jriapp_ui/content/template", "jriapp_ui/content/string", "jriapp_ui/content/multyline", "jriapp_ui/content/bool", "jriapp_ui/content/number", "jriapp_ui/content/date", "jriapp_ui/content/datetime", "jriapp_ui/content/lookup", "jriapp/bootstrapper"], function (require, exports, jriapp_shared_11, basic_8, template_2, string_1, multyline_1, bool_1, number_1, date_1, datetime_1, lookup_1, bootstrapper_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.initContentFactory = void 0;
    var utils = jriapp_shared_11.Utils, format = utils.str.format;
    var factoryInstance;
    var ContentFactory = (function () {
        function ContentFactory(nextFactory) {
            this._nextFactory = nextFactory;
        }
        ContentFactory.prototype.getContentType = function (options) {
            if (!!options.template) {
                return template_2.TemplateContent;
            }
            if (!options.fieldName) {
                throw new Error(format(jriapp_shared_11.LocaleERRS.ERR_PARAM_INVALID, "options", "fieldName"));
            }
            if (options.name === "lookup") {
                return lookup_1.LookupContent;
            }
            var fieldInfo = options.fieldInfo;
            var res;
            switch (fieldInfo.dataType) {
                case 0:
                    res = basic_8.BasicContent;
                    break;
                case 1:
                    res = (options.name === "multyline") ? multyline_1.MultyLineContent : string_1.StringContent;
                    break;
                case 2:
                    res = bool_1.BoolContent;
                    break;
                case 3:
                    res = number_1.NumberContent;
                    break;
                case 4:
                case 5:
                    res = number_1.NumberContent;
                    break;
                case 6:
                case 8:
                    res = datetime_1.DateTimeContent;
                    break;
                case 7:
                    res = (options.name === "datepicker") ? date_1.DateContent : datetime_1.DateTimeContent;
                    break;
                case 9:
                case 10:
                    res = basic_8.BasicContent;
                    break;
                default:
                    throw new Error(format(jriapp_shared_11.LocaleERRS.ERR_FIELD_DATATYPE, fieldInfo.dataType));
            }
            if (!res) {
                if (!this._nextFactory) {
                    throw new Error(jriapp_shared_11.LocaleERRS.ERR_BINDING_CONTENT_NOT_FOUND);
                }
                else {
                    return this._nextFactory.getContentType(options);
                }
            }
            else {
                return res;
            }
        };
        ContentFactory.prototype.isExternallyCachable = function (contentType) {
            if (lookup_1.LookupContent === contentType) {
                return true;
            }
            if (!this._nextFactory) {
                return false;
            }
            return this._nextFactory.isExternallyCachable(contentType);
        };
        return ContentFactory;
    }());
    function initContentFactory() {
        if (!factoryInstance) {
            factoryInstance = new ContentFactory();
            bootstrapper_9.bootstrapper.contentFactory.addFactory(function (_nextFactory) {
                return factoryInstance;
            });
        }
    }
    exports.initContentFactory = initContentFactory;
});
define("jriapp_ui/utils/jquery", ["require", "exports", "jriapp_shared"], function (require, exports, jriapp_shared_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JQueryUtils = exports.$ = void 0;
    if (!("jQuery" in window)) {
        throw new Error(jriapp_shared_12.LocaleERRS.ERR_APP_NEED_JQUERY);
    }
    exports.$ = jQuery;
    var JQueryUtils = (function () {
        function JQueryUtils() {
        }
        JQueryUtils.dispose$Plugin = function ($el, name) {
            var plugin = $el.data(name);
            if (!!plugin) {
                $el[name]("destroy");
            }
        };
        JQueryUtils.$ = jQuery;
        return JQueryUtils;
    }());
    exports.JQueryUtils = JQueryUtils;
});
define("jriapp_ui/utils/tooltip", ["require", "exports", "jriapp_ui/utils/jquery", "jriapp/utils/dom"], function (require, exports, jquery_1, dom_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createToolTipSvc = exports.css = void 0;
    var window = dom_10.DomUtils.window;
    var css;
    (function (css) {
        css["toolTip"] = "qtip-light";
        css["toolTipError"] = "qtip-red";
    })(css = exports.css || (exports.css = {}));
    function createToolTipSvc() {
        return new TooltipService();
    }
    exports.createToolTipSvc = createToolTipSvc;
    var TooltipService = (function () {
        function TooltipService() {
        }
        TooltipService.prototype.addToolTip = function (el, tip, isError, pos) {
            var $el = jquery_1.$(el), options = {
                content: {
                    text: tip
                },
                style: {
                    classes: !!isError ? "qtip-red" : "qtip-light"
                },
                position: {
                    my: "top left",
                    at: (!!pos) ? pos : "bottom right",
                    viewport: jquery_1.$(window),
                    adjust: {
                        method: "flip",
                        x: 0,
                        y: 0
                    }
                },
                hide: {
                    event: "unfocus click mouseleave",
                    leave: true
                }
            };
            if (!!$el.data("qtip")) {
                if (!tip) {
                    $el.qtip("destroy", true);
                }
                else {
                    $el.qtip("option", "content.text", tip);
                }
            }
            else if (!!tip) {
                $el.qtip(options);
            }
        };
        return TooltipService;
    }());
});
define("jriapp_ui/utils/datepicker", ["require", "exports", "jriapp_shared", "jriapp_ui/utils/jquery"], function (require, exports, jriapp_shared_13, jquery_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDatepickerSvc = void 0;
    var ERRS = jriapp_shared_13.LocaleERRS;
    function createDatepickerSvc() {
        return new Datepicker();
    }
    exports.createDatepickerSvc = createDatepickerSvc;
    var Datepicker = (function (_super) {
        __extends(Datepicker, _super);
        function Datepicker() {
            var _this = _super.call(this) || this;
            _this._dateFormat = null;
            _this._datepickerRegion = "";
            if (!jquery_2.$.datepicker) {
                throw new Error(ERRS.ERR_JQUERY_DATEPICKER_NOTFOUND);
            }
            _this.dateFormat = "dd.mm.yy";
            return _this;
        }
        Datepicker.prototype.toString = function () {
            return "Datepicker";
        };
        Datepicker.prototype.attachTo = function (el, options, onSelect) {
            var $el = jquery_2.$(el);
            if (!!options) {
                $el.datepicker(options);
            }
            else {
                $el.datepicker();
            }
            if (!!onSelect) {
                $el.datepicker("option", "onSelect", function (dateText) {
                    onSelect(dateText);
                });
            }
        };
        Datepicker.prototype.detachFrom = function (el) {
            jquery_2.JQueryUtils.dispose$Plugin(jquery_2.$(el), "datepicker");
        };
        Datepicker.prototype.parseDate = function (str) {
            return this.datePickerFn.parseDate(this.dateFormat, str);
        };
        Datepicker.prototype.formatDate = function (date) {
            return this.datePickerFn.formatDate(this.dateFormat, date);
        };
        Object.defineProperty(Datepicker.prototype, "dateFormat", {
            get: function () {
                if (!this._dateFormat) {
                    var regional = this.datePickerFn.regional[this._datepickerRegion];
                    return regional.dateFormat;
                }
                else {
                    return this._dateFormat;
                }
            },
            set: function (v) {
                if (this.dateFormat !== v) {
                    this._dateFormat = v;
                    var regional = this.datePickerFn.regional[this._datepickerRegion];
                    if (!!this._dateFormat) {
                        regional.dateFormat = this._dateFormat;
                        this.datePickerFn.setDefaults(regional);
                    }
                    this.objEvents.raiseProp("dateFormat");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Datepicker.prototype, "datepickerRegion", {
            get: function () { return this._datepickerRegion; },
            set: function (v) {
                if (!v) {
                    v = "";
                }
                var oldDateFormat = this.dateFormat;
                if (this._datepickerRegion !== v) {
                    var regional = this.datePickerFn.regional[v];
                    if (!!regional) {
                        this._datepickerRegion = v;
                        regional.dateFormat = oldDateFormat;
                        this.datePickerFn.setDefaults(regional);
                        this.objEvents.raiseProp("datepickerRegion");
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Datepicker.prototype, "datePickerFn", {
            get: function () {
                return jquery_2.$.datepicker;
            },
            enumerable: false,
            configurable: true
        });
        return Datepicker;
    }(jriapp_shared_13.BaseObject));
});
define("jriapp_ui/utils/errors", ["require", "exports", "jriapp_shared", "jriapp/bootstrapper", "jriapp/utils/dom"], function (require, exports, jriapp_shared_14, bootstrapper_10, dom_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createUIErrorsSvc = void 0;
    var boot = bootstrapper_10.bootstrapper, dom = dom_11.DomUtils, formMap = jriapp_shared_14.createWeakMap();
    function addToolTip(el, tip, isError, pos) {
        var svc = boot.getSvc("ITooltipService");
        svc.addToolTip(el, tip, isError, pos);
    }
    function getErrorTipInfo(errors) {
        var tip = ["<b>", jriapp_shared_14.LocaleSTRS.VALIDATE.errorInfo, "</b>", "<br/>"];
        for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
            var info = errors_1[_i];
            var res = "";
            for (var _a = 0, _b = info.errors; _a < _b.length; _a++) {
                var str = _b[_a];
                res = res + " " + str;
            }
            tip.push(res);
            res = "";
        }
        return tip.join("");
    }
    function getFormErrorTipInfo(errors) {
        var tip = ["<b>", jriapp_shared_14.LocaleSTRS.VALIDATE.errorInfo, "</b>", "<ul>"];
        for (var _i = 0, errors_2 = errors; _i < errors_2.length; _i++) {
            var info = errors_2[_i];
            var fieldName = info.fieldName;
            var res = "";
            if (!!fieldName) {
                res = jriapp_shared_14.LocaleSTRS.VALIDATE.errorField + " " + fieldName;
            }
            for (var _a = 0, _b = info.errors; _a < _b.length; _a++) {
                var str = _b[_a];
                if (!!res) {
                    res = res + " -> " + str;
                }
                else {
                    res = str;
                }
            }
            tip.push("<li>" + res + "</li>");
            res = "";
        }
        tip.push("</ul>");
        return tip.join("");
    }
    function setError(el, isError) {
        dom.setClass([el], "ria-field-error", !isError);
    }
    function addError(el) {
        setError(el, true);
    }
    function removeError(el) {
        setError(el, false);
    }
    var UIErrorsService = (function () {
        function UIErrorsService() {
        }
        UIErrorsService.prototype.setErrors = function (el, errors, toolTip) {
            if (!!errors && errors.length > 0) {
                addToolTip(el, getErrorTipInfo(errors), true);
                addError(el);
            }
            else {
                addToolTip(el, toolTip);
                removeError(el);
            }
        };
        UIErrorsService.prototype.setFormErrors = function (el, errors) {
            var gliph = formMap.get(el);
            if (!!errors && errors.length > 0) {
                if (!gliph) {
                    gliph = dom.fromHTML("<div data-name=\"error_info\" class=\"" + "ria-form-error" + "\" />")[0];
                    dom.prepend(el, gliph);
                    formMap.set(el, gliph);
                }
                addToolTip(gliph, getFormErrorTipInfo(errors), true);
                addError(el);
            }
            else {
                if (!!gliph) {
                    addToolTip(gliph, null);
                    formMap.delete(el);
                    dom.removeNode(gliph);
                }
                removeError(el);
            }
        };
        return UIErrorsService;
    }());
    function createUIErrorsSvc() {
        return new UIErrorsService();
    }
    exports.createUIErrorsSvc = createUIErrorsSvc;
});
define("jriapp_ui/dialog", ["require", "exports", "jriapp_shared", "jriapp_ui/utils/jquery", "jriapp/utils/dom", "jriapp/template", "jriapp/bootstrapper", "jriapp/mvvm"], function (require, exports, jriapp_shared_15, jquery_3, dom_12, template_3, bootstrapper_11, mvvm_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DialogVM = exports.DataEditDialog = exports.DIALOG_ACTION = void 0;
    var utils = jriapp_shared_15.Utils, _a = utils.check, _undefined = _a._undefined, isFunc = _a.isFunc, format = utils.str.format, _b = utils.core, extend = _b.extend, getNewID = _b.getNewID, Indexer = _b.Indexer, sys = utils.sys, _async = utils.async, dom = dom_12.DomUtils, doc = dom.document, ERROR = utils.err, boot = bootstrapper_11.bootstrapper;
    var DIALOG_ACTION;
    (function (DIALOG_ACTION) {
        DIALOG_ACTION[DIALOG_ACTION["Default"] = 0] = "Default";
        DIALOG_ACTION[DIALOG_ACTION["StayOpen"] = 1] = "StayOpen";
    })(DIALOG_ACTION = exports.DIALOG_ACTION || (exports.DIALOG_ACTION = {}));
    ;
    var DLG_EVENTS;
    (function (DLG_EVENTS) {
        DLG_EVENTS["close"] = "close";
        DLG_EVENTS["refresh"] = "refresh";
    })(DLG_EVENTS || (DLG_EVENTS = {}));
    var SubmitInfo = (function () {
        function SubmitInfo(dataContext) {
            this._dataContext = dataContext;
            this._submitError = false;
            this._editable = sys.getEditable(this._dataContext);
        }
        SubmitInfo.prototype.submit = function () {
            var self = this, submittable = sys.getSubmittable(this._dataContext);
            if (!submittable || !submittable.isCanSubmit) {
                return _async.resolve();
            }
            var promise = submittable.submitChanges();
            promise.then(function () {
                self._submitError = false;
            }).catch(function () {
                self._submitError = true;
            });
            return promise;
        };
        SubmitInfo.prototype.reject = function () {
            var submittable = sys.getSubmittable(this._dataContext);
            if (!!submittable) {
                submittable.rejectChanges();
            }
            this._submitError = false;
        };
        SubmitInfo.prototype.cancel = function () {
            if (!!this._editable) {
                this._editable.cancelEdit();
            }
            if (!!this._submitError) {
                this.reject();
            }
        };
        SubmitInfo.prototype.endEdit = function () {
            return (!!this._editable && this._editable.isEditing) ? this._editable.endEdit() : true;
        };
        SubmitInfo.prototype.beginEdit = function () {
            return (!!this._editable) ? (this._editable.isEditing || this._editable.beginEdit()) : false;
        };
        Object.defineProperty(SubmitInfo.prototype, "dataContext", {
            get: function () { return this._dataContext; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SubmitInfo.prototype, "submitError", {
            get: function () { return this._submitError; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SubmitInfo.prototype, "editable", {
            get: function () {
                return this._editable;
            },
            enumerable: false,
            configurable: true
        });
        return SubmitInfo;
    }());
    var DataEditDialog = (function (_super) {
        __extends(DataEditDialog, _super);
        function DataEditDialog(options) {
            var _this = _super.call(this) || this;
            var self = _this;
            options = extend({
                dataContext: null,
                templateID: null,
                width: 500,
                height: 350,
                title: "Data edit dialog",
                submitOnOK: false,
                canRefresh: false,
                canCancel: true,
                fn_OnClose: null,
                fn_OnOK: null,
                fn_OnShow: null,
                fn_OnOpen: null,
                fn_OnCancel: null,
                fn_OnTemplateCreated: null,
                fn_OnTemplateDestroy: null
            }, options);
            _this._uniqueID = getNewID("dlg");
            _this._dataContext = options.dataContext;
            _this._templateID = options.templateID;
            _this._submitOnOK = options.submitOnOK;
            _this._canRefresh = options.canRefresh;
            _this._canCancel = options.canCancel;
            _this._fnOnClose = options.fn_OnClose;
            _this._fnOnOK = options.fn_OnOK;
            _this._fnOnShow = options.fn_OnShow;
            _this._fnOnOpen = options.fn_OnOpen;
            _this._fnOnCancel = options.fn_OnCancel;
            _this._fnOnTemplateCreated = options.fn_OnTemplateCreated;
            _this._fnOnTemplateDestroy = options.fn_OnTemplateDestroy;
            _this._template = null;
            _this._$dlgEl = null;
            _this._result = null;
            _this._selectedControl = null;
            _this._submitInfo = null;
            _this._options = {
                width: options.width,
                height: options.height,
                title: options.title,
                autoOpen: false,
                modal: true,
                open: function () {
                    self._onOpen();
                },
                close: function () {
                    self._onClose();
                },
                buttons: self._getButtons()
            };
            _this._deferredTemplate = utils.async.createDeferred();
            _this._createDialog();
            return _this;
        }
        DataEditDialog.prototype.addOnClose = function (fn, nmspace, context) {
            this.objEvents.on("close", fn, nmspace, context);
        };
        DataEditDialog.prototype.offOnClose = function (nmspace) {
            this.objEvents.off("close", nmspace);
        };
        DataEditDialog.prototype.addOnRefresh = function (fn, nmspace, context) {
            this.objEvents.on("refresh", fn, nmspace, context);
        };
        DataEditDialog.prototype.offOnRefresh = function (nmspace) {
            this.objEvents.off("refresh", nmspace);
        };
        DataEditDialog.prototype._createDialog = function () {
            try {
                this._template = this._createTemplate();
                this._$dlgEl = jquery_3.$(this._template.el);
                doc.body.appendChild(this._template.el);
                this._$dlgEl.dialog(this._options);
            }
            catch (ex) {
                ERROR.reThrow(ex, this.handleError(ex, this));
            }
        };
        DataEditDialog.prototype.templateLoading = function (_template) {
        };
        DataEditDialog.prototype.templateLoaded = function (template, error) {
            if (this.getIsStateDirty() || !!error) {
                if (!!this._deferredTemplate) {
                    this._deferredTemplate.reject(error);
                }
                return;
            }
            if (!!this._fnOnTemplateCreated) {
                this._fnOnTemplateCreated(template);
            }
            this._deferredTemplate.resolve(template);
        };
        DataEditDialog.prototype.templateUnLoading = function (template) {
            if (!!this._fnOnTemplateDestroy) {
                this._fnOnTemplateDestroy(template);
            }
        };
        DataEditDialog.prototype._createTemplate = function () {
            var template = template_3.createTemplate({
                parentEl: null,
                templEvents: this
            });
            template.templateID = this._templateID;
            return template;
        };
        DataEditDialog.prototype._destroyTemplate = function () {
            if (!!this._template) {
                this._template.dispose();
            }
        };
        DataEditDialog.prototype._getButtons = function () {
            var self = this, buttons = [
                {
                    "id": self._uniqueID + "_Refresh",
                    "text": jriapp_shared_15.LocaleSTRS.TEXT.txtRefresh,
                    "icon": "fas fa-retweet",
                    "class": "btn btn-info btn-sm",
                    "click": function () {
                        self._onRefresh();
                    }
                },
                {
                    "id": self._uniqueID + "_Ok",
                    "text": jriapp_shared_15.LocaleSTRS.TEXT.txtOk,
                    "icon": "fas fa-check",
                    "class": "btn btn-info btn-sm",
                    "click": function () {
                        self._onOk();
                    }
                },
                {
                    "id": self._uniqueID + "_Cancel",
                    "text": jriapp_shared_15.LocaleSTRS.TEXT.txtCancel,
                    "icon": "fas fa-times",
                    "class": "btn btn-info btn-sm",
                    "click": function () {
                        self._onCancel();
                    }
                }
            ];
            if (!this.canRefresh) {
                buttons.shift();
            }
            if (!this.canCancel) {
                buttons.pop();
            }
            return buttons;
        };
        DataEditDialog.prototype._getOkButton = function () {
            return jquery_3.$("#" + this._uniqueID + "_Ok");
        };
        DataEditDialog.prototype._getCancelButton = function () {
            return jquery_3.$("#" + this._uniqueID + "_Cancel");
        };
        DataEditDialog.prototype._getRefreshButton = function () {
            return jquery_3.$("#" + this._uniqueID + "_Refresh");
        };
        DataEditDialog.prototype._getAllButtons = function () {
            return [this._getOkButton(), this._getCancelButton(), this._getRefreshButton()];
        };
        DataEditDialog.prototype._updateStyles = function () {
            var btns = this._getAllButtons();
            btns.forEach(function ($btn) {
                $btn.removeClass("ui-button");
                $btn.find("span.ui-button-icon").removeClass("ui-button-icon ui-icon");
            });
        };
        DataEditDialog.prototype._disableButtons = function (isDisable) {
            var btns = this._getAllButtons();
            btns.forEach(function ($btn) {
                $btn.prop("disabled", !!isDisable);
            });
        };
        DataEditDialog.prototype._onOk = function () {
            var self = this, action = (!!this._fnOnOK) ? this._fnOnOK(this) : 0;
            if (action === 1) {
                return;
            }
            if (!this._dataContext) {
                self.hide();
                return;
            }
            var canCommit = this._submitInfo.endEdit();
            if (!canCommit) {
                return;
            }
            if (this._submitOnOK) {
                this._disableButtons(true);
                var title_1 = this.title;
                this.title = jriapp_shared_15.LocaleSTRS.TEXT.txtSubmitting;
                var promise = this._submitInfo.submit();
                promise.finally(function () {
                    self._disableButtons(false);
                    self.title = title_1;
                });
                promise.then(function () {
                    self._result = "ok";
                    self.hide();
                }).catch(function () {
                    if (!self._submitInfo.beginEdit()) {
                        self._result = "cancel";
                        self.hide();
                    }
                });
            }
            else {
                self._result = "ok";
                self.hide();
            }
        };
        DataEditDialog.prototype._onCancel = function () {
            var action = (!!this._fnOnCancel) ? this._fnOnCancel(this) : 0;
            if (action === 1) {
                return;
            }
            this._submitInfo.cancel();
            this._result = "cancel";
            this.hide();
        };
        DataEditDialog.prototype._onRefresh = function () {
            var args = { isHandled: false };
            this.objEvents.raise("refresh", args);
            if (args.isHandled) {
                return;
            }
            var dctx = this._dataContext;
            if (!!dctx) {
                if (isFunc(dctx.refresh)) {
                    dctx.refresh();
                }
                else if (!!dctx._aspect && isFunc(dctx._aspect.refresh)) {
                    dctx._aspect.refresh();
                }
            }
        };
        DataEditDialog.prototype._onOpen = function () {
            if (!!this._fnOnOpen) {
                this._fnOnOpen(this);
            }
        };
        DataEditDialog.prototype._onClose = function () {
            try {
                if (this._result !== "ok" && !!this._submitInfo) {
                    this._submitInfo.cancel();
                }
                if (!!this._fnOnClose) {
                    this._fnOnClose(this);
                }
                this.objEvents.raise("close", {});
            }
            finally {
                this._template.dataContext = null;
                this._submitInfo = null;
            }
            var csel = this._selectedControl;
            this._selectedControl = null;
            utils.queue.enque(function () { boot.selectedControl = csel; csel = null; });
        };
        DataEditDialog.prototype._onShow = function () {
            this._selectedControl = boot.selectedControl;
            this._submitInfo = new SubmitInfo(this.dataContext);
            this._updateStyles();
            if (!!this._fnOnShow) {
                this._fnOnShow(this);
            }
        };
        DataEditDialog.prototype.show = function () {
            var self = this;
            if (self.getIsStateDirty()) {
                return utils.async.createDeferred().reject();
            }
            self._result = null;
            return this._deferredTemplate.promise().then(function (template) {
                if (self.getIsStateDirty() || !self._$dlgEl) {
                    ERROR.abort();
                }
                self._$dlgEl.dialog("option", "buttons", self._getButtons());
                template.dataContext = self._dataContext;
                self._onShow();
                self._$dlgEl.dialog("open");
            }).then(function () {
                return self;
            }, function (err) {
                if (!self.getIsStateDirty()) {
                    self.handleError(err, self);
                }
                return ERROR.abort();
            });
        };
        DataEditDialog.prototype.hide = function () {
            var self = this;
            if (!this._$dlgEl) {
                return;
            }
            self._$dlgEl.dialog("close");
        };
        DataEditDialog.prototype.getOption = function (name) {
            if (!this._$dlgEl) {
                return _undefined;
            }
            return this._$dlgEl.dialog("option", name);
        };
        DataEditDialog.prototype.setOption = function (name, value) {
            var self = this;
            self._$dlgEl.dialog("option", name, value);
        };
        DataEditDialog.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this.hide();
            this._destroyTemplate();
            this._$dlgEl = null;
            this._template = null;
            this._dataContext = null;
            this._submitInfo = null;
            _super.prototype.dispose.call(this);
        };
        Object.defineProperty(DataEditDialog.prototype, "dataContext", {
            get: function () {
                return this._dataContext;
            },
            set: function (v) {
                if (v !== this._dataContext) {
                    this._dataContext = v;
                    this._submitInfo = new SubmitInfo(this._dataContext);
                    this.objEvents.raiseProp("dataContext");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataEditDialog.prototype, "result", {
            get: function () {
                return this._result;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataEditDialog.prototype, "template", {
            get: function () {
                return this._template;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataEditDialog.prototype, "isSubmitOnOK", {
            get: function () {
                return this._submitOnOK;
            },
            set: function (v) {
                if (this._submitOnOK !== v) {
                    this._submitOnOK = v;
                    this.objEvents.raiseProp("isSubmitOnOK");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataEditDialog.prototype, "width", {
            get: function () {
                return this.getOption("width");
            },
            set: function (v) {
                var x = this.getOption("width");
                if (v !== x) {
                    this.setOption("width", v);
                    this.objEvents.raiseProp("width");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataEditDialog.prototype, "height", {
            get: function () {
                return this.getOption("height");
            },
            set: function (v) {
                var x = this.getOption("height");
                if (v !== x) {
                    this.setOption("height", v);
                    this.objEvents.raiseProp("height");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataEditDialog.prototype, "title", {
            get: function () {
                return this.getOption("title");
            },
            set: function (v) {
                var x = this.getOption("title");
                if (v !== x) {
                    this.setOption("title", v);
                    this.objEvents.raiseProp("title");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataEditDialog.prototype, "canRefresh", {
            get: function () {
                return this._canRefresh;
            },
            set: function (v) {
                var x = this._canRefresh;
                if (v !== x) {
                    this._canRefresh = v;
                    this.objEvents.raiseProp("canRefresh");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataEditDialog.prototype, "canCancel", {
            get: function () {
                return this._canCancel;
            },
            set: function (v) {
                var x = this._canCancel;
                if (v !== x) {
                    this._canCancel = v;
                    this.objEvents.raiseProp("canCancel");
                }
            },
            enumerable: false,
            configurable: true
        });
        return DataEditDialog;
    }(jriapp_shared_15.BaseObject));
    exports.DataEditDialog = DataEditDialog;
    var DialogVM = (function (_super) {
        __extends(DialogVM, _super);
        function DialogVM(app) {
            var _this = _super.call(this, app) || this;
            _this._factories = Indexer();
            _this._dialogs = Indexer();
            return _this;
        }
        DialogVM.prototype.createDialog = function (name, options) {
            var self = this;
            this._factories[name] = function () {
                var dialog = self._dialogs[name];
                if (!dialog) {
                    dialog = new DataEditDialog(options);
                    self._dialogs[name] = dialog;
                }
                return dialog;
            };
            return this._factories[name];
        };
        DialogVM.prototype.showDialog = function (name, dataContext) {
            var dlg = this.getDialog(name);
            if (!dlg) {
                throw new Error(format("Invalid DataEditDialog name:  {0}", name));
            }
            dlg.dataContext = dataContext;
            setTimeout(function () {
                dlg.show();
            }, 0);
            return dlg;
        };
        DialogVM.prototype.getDialog = function (name) {
            var factory = this._factories[name];
            if (!factory) {
                return null;
            }
            return factory();
        };
        DialogVM.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            for (var key in this._dialogs) {
                this._dialogs[key].dispose();
            }
            ;
            this._factories = Indexer();
            this._dialogs = Indexer();
            _super.prototype.dispose.call(this);
        };
        return DialogVM;
    }(mvvm_1.ViewModel));
    exports.DialogVM = DialogVM;
});
define("jriapp_ui/dynacontent", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp/template", "jriapp/bootstrapper", "jriapp_ui/baseview"], function (require, exports, jriapp_shared_16, dom_13, template_4, bootstrapper_12, baseview_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DynaContentElView = void 0;
    var utils = jriapp_shared_16.Utils, sys = utils.sys, dom = dom_13.DomUtils;
    var DynaContentElView = (function (_super) {
        __extends(DynaContentElView, _super);
        function DynaContentElView(el, options) {
            var _this = _super.call(this, el, options) || this;
            _this._tDebounce = new jriapp_shared_16.Debounce();
            _this._dsDebounce = new jriapp_shared_16.Debounce();
            _this._dataContext = null;
            _this._prevTemplateID = null;
            _this._templateID = null;
            _this._template = null;
            _this._animation = !options.animation ? null : options.animation;
            _this._viewEvents = !options.viewEvents ? null : options.viewEvents;
            if (!!options.dataContext) {
                _this._setDataContext(options.dataContext);
            }
            if (!!options.templateID) {
                _this._setTemplateID(null, options.templateID);
            }
            return _this;
        }
        DynaContentElView.prototype._setDataContext = function (dataContext) {
            var _this = this;
            this._dataContext = dataContext;
            this._dsDebounce.enque(function () {
                var ds = _this._dataContext;
                if (!!_this._template) {
                    _this._template.dataContext = ds;
                }
            });
        };
        DynaContentElView.prototype._setTemplateID = function (oldTemplateID, templateID) {
            var _this = this;
            this._prevTemplateID = oldTemplateID;
            this._templateID = templateID;
            this._tDebounce.enque(function () {
                _this._templateChanging(oldTemplateID, templateID);
            });
        };
        DynaContentElView.prototype._onViewChanged = function (args) {
            var _a;
            (_a = this._viewEvents) === null || _a === void 0 ? void 0 : _a.viewChanged(args);
        };
        DynaContentElView.prototype.templateLoading = function (template) {
            if (this.getIsStateDirty()) {
                return;
            }
            var isFirstShow = !this._prevTemplateID, canShow = !!this._animation && (this._animation.isAnimateFirstShow || (!this._animation.isAnimateFirstShow && !isFirstShow));
            if (canShow) {
                this._animation.beforeShow(template, isFirstShow);
            }
        };
        DynaContentElView.prototype.templateLoaded = function (template, _error) {
            var _this = this;
            if (this.getIsStateDirty()) {
                return;
            }
            if (!dom.isContained(template.el, this.el)) {
                this.el.appendChild(template.el);
            }
            var isFirstShow = !this._prevTemplateID, canShow = !!this._animation && (this._animation.isAnimateFirstShow || (!this._animation.isAnimateFirstShow && !isFirstShow)), viewChangedArgs = { sender: this, previousView: this._prevTemplateID, currentView: this.templateID };
            if (canShow) {
                this._animation.show(template, isFirstShow).then(function () { return _this._onViewChanged(viewChangedArgs); });
            }
            else {
                this._onViewChanged(viewChangedArgs);
            }
        };
        DynaContentElView.prototype.templateUnLoading = function (_template) {
        };
        DynaContentElView.prototype._templateChanging = function (_oldName, newName) {
            var self = this;
            try {
                if (!newName && !!self._template) {
                    if (!!self._animation && self._template.isLoaded) {
                        self._animation.stop();
                        self._animation.beforeHide(self._template);
                        self._animation.hide(self._template).finally(function () {
                            if (self.getIsStateDirty()) {
                                return;
                            }
                            self._template.dispose();
                            self._template = null;
                            self.objEvents.raiseProp("template");
                        });
                    }
                    else {
                        self._template.dispose();
                        self._template = null;
                        self.objEvents.raiseProp("template");
                    }
                    return;
                }
                if (!self._template) {
                    self._template = template_4.createTemplate({
                        parentEl: null,
                        dataContext: self._dataContext,
                        templEvents: self
                    });
                    self._template.templateID = newName;
                    self.objEvents.raiseProp("template");
                    return;
                }
                if (!!self._animation && self._template.isLoaded) {
                    self._animation.stop();
                    self._animation.beforeHide(self._template);
                    self._animation.hide(self._template).finally(function () {
                        if (self.getIsStateDirty()) {
                            return;
                        }
                        self._template.templateID = newName;
                    });
                }
                else {
                    self._template.templateID = newName;
                }
            }
            catch (ex) {
                utils.err.reThrow(ex, self.handleError(ex, self));
            }
        };
        DynaContentElView.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._tDebounce.dispose();
            this._dsDebounce.dispose();
            var a = this._animation;
            this._animation = null;
            var t = this._template;
            this._template = null;
            this._viewEvents = null;
            if (sys.isBaseObj(a)) {
                a.dispose();
            }
            if (!!t) {
                t.dispose();
            }
            this._dataContext = null;
            _super.prototype.dispose.call(this);
        };
        Object.defineProperty(DynaContentElView.prototype, "template", {
            get: function () { return this._template; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DynaContentElView.prototype, "templateID", {
            get: function () {
                return this._templateID;
            },
            set: function (v) {
                var self = this, old = self._templateID;
                if (old !== v) {
                    this._setTemplateID(old, v);
                    this.objEvents.raiseProp("templateID");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DynaContentElView.prototype, "dataContext", {
            get: function () { return this._dataContext; },
            set: function (v) {
                if (this._dataContext !== v) {
                    this._setDataContext(v);
                    this.objEvents.raiseProp("dataContext");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DynaContentElView.prototype, "animation", {
            get: function () { return this._animation; },
            set: function (v) {
                if (this._animation !== v) {
                    this._animation = v;
                    this.objEvents.raiseProp("animation");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DynaContentElView.prototype, "viewEvents", {
            get: function () { return this._viewEvents; },
            set: function (v) {
                if (this._viewEvents !== v) {
                    this._viewEvents = v;
                    this.objEvents.raiseProp("viewEvents");
                }
            },
            enumerable: false,
            configurable: true
        });
        return DynaContentElView;
    }(baseview_3.BaseElView));
    exports.DynaContentElView = DynaContentElView;
    bootstrapper_12.bootstrapper.registerElView("dynacontent", DynaContentElView);
});
define("jriapp_ui/content/int", ["require", "exports", "jriapp_shared", "jriapp/utils/parser"], function (require, exports, jriapp_shared_17, parser_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseContentAttr = void 0;
    var utils = jriapp_shared_17.Utils, parseBool = utils.core.parseBool, _undefined = utils.check._undefined, parser = parser_1.Parser;
    function parseContentAttr(contentAttr) {
        var contentOptions = {
            name: null,
            readOnly: false,
            initContentFn: null,
            fieldInfo: null,
            css: null,
            template: null,
            fieldName: null,
            options: null
        };
        var tempOpts = parser.parseOptions(contentAttr);
        if (!tempOpts) {
            return contentOptions;
        }
        var attr = tempOpts;
        if (!attr.template && !!attr.fieldName) {
            contentOptions.css = attr.css;
            contentOptions.fieldName = attr.fieldName;
            if (!!attr.name) {
                contentOptions.name = attr.name;
            }
            if (!!attr.options) {
                contentOptions.options = attr.options;
            }
            if (attr.readOnly !== _undefined) {
                contentOptions.readOnly = parseBool(attr.readOnly);
            }
        }
        else if (!!attr.template) {
            contentOptions.template = attr.template;
            contentOptions.css = attr.css;
            if (attr.readOnly !== _undefined) {
                contentOptions.readOnly = parseBool(attr.readOnly);
            }
        }
        return contentOptions;
    }
    exports.parseContentAttr = parseContentAttr;
});
define("jriapp_ui/datagrid/consts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PROP_NAME = exports.txtMap = exports.css = exports.ROW_ACTION = exports.ROW_POSITION = exports.COLUMN_TYPE = void 0;
    var COLUMN_TYPE;
    (function (COLUMN_TYPE) {
        COLUMN_TYPE["DATA"] = "data";
        COLUMN_TYPE["ROW_EXPANDER"] = "row_expander";
        COLUMN_TYPE["ROW_ACTIONS"] = "row_actions";
        COLUMN_TYPE["ROW_SELECTOR"] = "row_selector";
    })(COLUMN_TYPE = exports.COLUMN_TYPE || (exports.COLUMN_TYPE = {}));
    var ROW_POSITION;
    (function (ROW_POSITION) {
        ROW_POSITION[ROW_POSITION["Up"] = 0] = "Up";
        ROW_POSITION[ROW_POSITION["Bottom"] = 1] = "Bottom";
        ROW_POSITION[ROW_POSITION["Details"] = 2] = "Details";
    })(ROW_POSITION = exports.ROW_POSITION || (exports.ROW_POSITION = {}));
    var ROW_ACTION;
    (function (ROW_ACTION) {
        ROW_ACTION[ROW_ACTION["OK"] = 0] = "OK";
        ROW_ACTION[ROW_ACTION["EDIT"] = 1] = "EDIT";
        ROW_ACTION[ROW_ACTION["CANCEL"] = 2] = "CANCEL";
        ROW_ACTION[ROW_ACTION["DELETE"] = 3] = "DELETE";
    })(ROW_ACTION = exports.ROW_ACTION || (exports.ROW_ACTION = {}));
    var css;
    (function (css) {
        css["container"] = "ria-table-container";
        css["dataTable"] = "ria-data-table";
        css["columnInfo"] = "ria-col-info";
        css["column"] = "ria-col-ex";
        css["headerDiv"] = "ria-table-header";
        css["wrapDiv"] = "ria-table-wrap";
        css["dataColumn"] = "ria-data-column";
        css["dataCell"] = "ria-data-cell";
        css["rowCollapsed"] = "ria-row-collapsed";
        css["rowExpanded"] = "ria-row-expanded";
        css["rowExpander"] = "ria-row-expander";
        css["columnSelected"] = "ria-col-selected";
        css["rowActions"] = "ria-row-actions";
        css["rowDetails"] = "ria-row-details";
        css["rowSelector"] = "ria-row-selector";
        css["rowHighlight"] = "ria-row-highlight";
        css["rowDeleted"] = "ria-row-deleted";
        css["rowError"] = "ria-row-error";
        css["fillVSpace"] = "ria-fill-vspace";
        css["nobr"] = "ria-nobr";
        css["colSortable"] = "ria-sortable";
        css["colSortAsc"] = "ria-sort-asc";
        css["colSortDesc"] = "ria-sort-desc";
    })(css = exports.css || (exports.css = {}));
    exports.txtMap = {
        img_ok: "txtOk",
        img_cancel: "txtCancel",
        img_edit: "txtEdit",
        img_delete: "txtDelete"
    };
    var PROP_NAME;
    (function (PROP_NAME) {
        PROP_NAME["isCurrent"] = "isCurrent";
        PROP_NAME["isSelected"] = "isSelected";
        PROP_NAME["sortOrder"] = "sortOrder";
        PROP_NAME["checked"] = "checked";
        PROP_NAME["editingRow"] = "editingRow";
        PROP_NAME["dataSource"] = "dataSource";
        PROP_NAME["currentRow"] = "currentRow";
        PROP_NAME["grid"] = "grid";
        PROP_NAME["animation"] = "animation";
        PROP_NAME["stateProvider"] = "stateProvider";
    })(PROP_NAME = exports.PROP_NAME || (exports.PROP_NAME = {}));
});
define("jriapp_ui/datagrid/animation", ["require", "exports", "jriapp_shared", "jriapp_ui/utils/jquery"], function (require, exports, jriapp_shared_18, jquery_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultAnimation = void 0;
    var DefaultAnimation = (function (_super) {
        __extends(DefaultAnimation, _super);
        function DefaultAnimation() {
            var _this = _super.call(this) || this;
            _this._$el = null;
            return _this;
        }
        DefaultAnimation.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            try {
                this.stop();
            }
            finally {
                _super.prototype.dispose.call(this);
            }
        };
        DefaultAnimation.prototype.beforeShow = function (el) {
            this.stop();
            this._$el = jquery_4.$(el);
            this._$el.hide();
        };
        DefaultAnimation.prototype.show = function (onEnd) {
            this._$el.slideDown(400, onEnd);
        };
        DefaultAnimation.prototype.beforeHide = function (el) {
            this.stop();
            this._$el = jquery_4.$(el);
        };
        DefaultAnimation.prototype.hide = function (onEnd) {
            this._$el.slideUp(400, onEnd);
        };
        DefaultAnimation.prototype.stop = function () {
            if (!!this._$el) {
                this._$el.finish();
                this._$el = null;
            }
        };
        return DefaultAnimation;
    }(jriapp_shared_18.BaseObject));
    exports.DefaultAnimation = DefaultAnimation;
});
define("jriapp_ui/utils/dblclick", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DblClick = void 0;
    var DblClick = (function () {
        function DblClick(interval) {
            if (interval === void 0) { interval = 0; }
            this._isDisposed = false;
            this._timer = null;
            this._interval = !interval ? 0 : interval;
            this._fnOnClick = null;
            this._fnOnDblClick = null;
        }
        DblClick.prototype.click = function () {
            var self = this;
            if (!!this._timer) {
                clearTimeout(this._timer);
                this._timer = null;
                if (!!this._fnOnDblClick) {
                    this._fnOnDblClick();
                }
                else if (!!this._fnOnClick) {
                    this._fnOnClick();
                }
            }
            else {
                if (!!this._fnOnClick) {
                    this._timer = setTimeout(function () {
                        self._timer = null;
                        if (!!self._fnOnClick) {
                            self._fnOnClick();
                        }
                    }, self._interval);
                }
            }
        };
        DblClick.prototype.add = function (fnOnClick, fnOnDblClick) {
            if (this.getIsDisposed()) {
                return;
            }
            this._fnOnClick = fnOnClick;
            this._fnOnDblClick = fnOnDblClick;
        };
        DblClick.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this._isDisposed = true;
            clearTimeout(this._timer);
            this._timer = null;
            this._fnOnClick = null;
            this._fnOnDblClick = null;
        };
        DblClick.prototype.getIsDisposed = function () {
            return this._isDisposed;
        };
        Object.defineProperty(DblClick.prototype, "interval", {
            get: function () {
                return this._interval;
            },
            set: function (v) {
                this._interval = v;
            },
            enumerable: false,
            configurable: true
        });
        return DblClick;
    }());
    exports.DblClick = DblClick;
});
define("jriapp_ui/datagrid/columns/base", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp/template", "jriapp_ui/baseview", "jriapp/bootstrapper"], function (require, exports, jriapp_shared_19, dom_14, template_5, baseview_4, bootstrapper_13) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseColumn = void 0;
    var utils = jriapp_shared_19.Utils, dom = dom_14.DomUtils, doc = dom.document, getNewID = utils.core.getNewID;
    var BaseColumn = (function (_super) {
        __extends(BaseColumn, _super);
        function BaseColumn(grid, options) {
            var _this = _super.call(this) || this;
            var self = _this;
            _this._grid = grid;
            _this._th = options.th;
            _this._options = options.colInfo;
            _this._isSelected = false;
            _this._uniqueID = getNewID("th");
            var col = doc.createElement("div");
            _this._col = col;
            dom.addClass([col], "ria-col-ex");
            if (!!_this._options.colCellCss) {
                dom.addClass([col], _this._options.colCellCss);
            }
            _this._grid._getInternal().getHeader().appendChild(col);
            bootstrapper_13.selectableProviderWeakMap.set(_this._col, _this._grid);
            dom.events.on(_this._col, "click", function () {
                grid._getInternal().setCurrentColumn(self);
                self._onColumnClicked();
            }, _this.uniqueID);
            if (!!_this._options.width) {
                _this._th.style.width = _this._options.width;
            }
            if (!!_this._options.templateID) {
                _this._template = template_5.createTemplate({ parentEl: col, templEvents: _this });
                _this._template.templateID = _this._options.templateID;
            }
            else if (!!_this._options.title) {
                col.innerHTML = _this._options.title;
            }
            if (!!_this._options.tip) {
                baseview_4.addToolTip(col, _this._options.tip, false, "bottom center");
            }
            return _this;
        }
        BaseColumn.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            bootstrapper_13.selectableProviderWeakMap.delete(this._col);
            dom.events.offNS(this.grid.table, this.uniqueID);
            if (!!this._options.tip) {
                baseview_4.addToolTip(this._col, null);
            }
            if (!!this._template) {
                this._template.dispose();
                this._template = null;
            }
            dom.events.offNS(this._col, this.uniqueID);
            this._col = null;
            this._th = null;
            this._grid = null;
            this._options = null;
            _super.prototype.dispose.call(this);
        };
        BaseColumn.prototype.templateLoading = function (_template) {
        };
        BaseColumn.prototype.templateLoaded = function (_template, _error) {
        };
        BaseColumn.prototype.templateUnLoading = function (_template) {
        };
        BaseColumn.prototype.scrollIntoView = function (isUp) {
            if (this.getIsStateDirty()) {
                return;
            }
            this._col.scrollIntoView(!!isUp);
        };
        BaseColumn.prototype.updateWidth = function () {
            this._col.style.width = this._th.offsetWidth + "px";
        };
        BaseColumn.prototype._onColumnClicked = function () {
        };
        BaseColumn.prototype.toString = function () {
            return "BaseColumn";
        };
        Object.defineProperty(BaseColumn.prototype, "uniqueID", {
            get: function () {
                return this._uniqueID;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseColumn.prototype, "width", {
            get: function () {
                return this._th.offsetWidth;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseColumn.prototype, "th", {
            get: function () {
                return this._th;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseColumn.prototype, "col", {
            get: function () {
                return this._col;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseColumn.prototype, "grid", {
            get: function () {
                return this._grid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseColumn.prototype, "options", {
            get: function () {
                return this._options;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseColumn.prototype, "title", {
            get: function () {
                return this._options.title;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseColumn.prototype, "isSelected", {
            get: function () {
                return this._isSelected;
            },
            set: function (v) {
                if (!!this._col && this._isSelected !== v) {
                    this._isSelected = v;
                    dom.setClass([this._col], "ria-col-selected", !this._isSelected);
                }
            },
            enumerable: false,
            configurable: true
        });
        return BaseColumn;
    }(jriapp_shared_19.BaseObject));
    exports.BaseColumn = BaseColumn;
});
define("jriapp_ui/datagrid/columns/expander", ["require", "exports", "jriapp/utils/dom", "jriapp_ui/datagrid/columns/base"], function (require, exports, dom_15, base_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpanderColumn = void 0;
    var dom = dom_15.DomUtils;
    var ExpanderColumn = (function (_super) {
        __extends(ExpanderColumn, _super);
        function ExpanderColumn(grid, options) {
            var _this = _super.call(this, grid, options) || this;
            dom.addClass([_this.col], "ria-row-expander");
            return _this;
        }
        ExpanderColumn.prototype.toString = function () {
            return "ExpanderColumn";
        };
        return ExpanderColumn;
    }(base_1.BaseColumn));
    exports.ExpanderColumn = ExpanderColumn;
});
define("jriapp_ui/datagrid/cells/expander", ["require", "exports", "jriapp/utils/dom", "jriapp_ui/datagrid/cells/base"], function (require, exports, dom_16, base_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExpanderCell = void 0;
    var dom = dom_16.DomUtils;
    var ExpanderCell = (function (_super) {
        __extends(ExpanderCell, _super);
        function ExpanderCell(options) {
            var _this = _super.call(this, options) || this;
            var self = _this;
            _this._click.add(function () {
                self._onCellClicked(self.row);
            });
            dom.addClass([_this.td], "ria-row-collapsed");
            dom.addClass([_this.td], "ria-row-expander");
            return _this;
        }
        ExpanderCell.prototype._onCellClicked = function (row) {
            var clickedRow = row || this.row;
            if (!clickedRow) {
                return;
            }
            _super.prototype._onCellClicked.call(this, clickedRow);
            clickedRow.isExpanded = !clickedRow.isExpanded;
        };
        ExpanderCell.prototype.toggleImage = function () {
            if (this.row.isExpanded) {
                dom.removeClass([this.td], "ria-row-collapsed");
                dom.addClass([this.td], "ria-row-expanded");
            }
            else {
                dom.removeClass([this.td], "ria-row-expanded");
                dom.addClass([this.td], "ria-row-collapsed");
            }
        };
        ExpanderCell.prototype.toString = function () {
            return "ExpanderCell";
        };
        return ExpanderCell;
    }(base_2.BaseCell));
    exports.ExpanderCell = ExpanderCell;
});
define("jriapp_ui/datagrid/columns/data", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp/bootstrapper", "jriapp_ui/datagrid/columns/base"], function (require, exports, jriapp_shared_20, dom_17, bootstrapper_14, base_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataColumn = void 0;
    var utils = jriapp_shared_20.Utils, _a = utils.core, Indexer = _a.Indexer, forEach = _a.forEach, dom = dom_17.DomUtils, boot = bootstrapper_14.bootstrapper;
    var DataColumn = (function (_super) {
        __extends(DataColumn, _super);
        function DataColumn(grid, options) {
            var _this = _super.call(this, grid, options) || this;
            _this._objCache = Indexer();
            _this._contentType = null;
            var colClass = "ria-data-column";
            _this._sortOrder = null;
            if (_this.isSortable) {
                colClass += (" " + "ria-sortable");
            }
            dom.addClass([_this.col], colClass);
            return _this;
        }
        DataColumn.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            var self = this;
            this._contentType = null;
            forEach(self._objCache, function (key) {
                self._objCache[key].dispose();
            });
            self._objCache = null;
            _super.prototype.dispose.call(this);
        };
        DataColumn.prototype._onColumnClicked = function () {
            if (this.isSortable && !!this.sortMemberName) {
                var sortOrd = this._sortOrder;
                this.grid._getInternal().resetColumnsSort();
                this.sortOrder = (sortOrd === 0) ? 1 : 0;
                this.grid.sortByColumn(this);
            }
        };
        DataColumn.prototype._cacheObject = function (key, obj) {
            this._objCache[key] = obj;
        };
        DataColumn.prototype._getCachedObject = function (key) {
            return this._objCache[key];
        };
        DataColumn.prototype._getInitContentFn = function () {
            var self = this;
            return function (content) {
                content.addOnObjectCreated(function (_, args) {
                    self._cacheObject(args.objectKey, args.result);
                    args.isCachedExternally = !!self._getCachedObject(args.objectKey);
                });
                content.addOnObjectNeeded(function (_, args) {
                    args.result = self._getCachedObject(args.objectKey);
                });
            };
        };
        DataColumn.prototype.updateContentOptions = function () {
            var contentOptions = this.options.content;
            if (!!contentOptions.fieldName) {
                contentOptions.fieldInfo = this.grid.dataSource.getFieldInfo(contentOptions.fieldName);
                if (!contentOptions.fieldInfo) {
                    throw new Error(utils.str.format(jriapp_shared_20.LocaleERRS.ERR_DBSET_INVALID_FIELDNAME, "", contentOptions.fieldName));
                }
            }
            this._contentType = boot.contentFactory.getContentType(contentOptions);
            if (boot.contentFactory.isExternallyCachable(this._contentType)) {
                contentOptions.initContentFn = this._getInitContentFn();
            }
            if (this.grid.isHasEditor) {
                contentOptions.readOnly = true;
            }
        };
        DataColumn.prototype.toString = function () {
            return "DataColumn";
        };
        Object.defineProperty(DataColumn.prototype, "contentType", {
            get: function () {
                return this._contentType;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataColumn.prototype, "isSortable", {
            get: function () {
                return !!(this.options.sortable);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataColumn.prototype, "sortMemberName", {
            get: function () {
                return this.options.sortMemberName;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataColumn.prototype, "sortOrder", {
            get: function () {
                return this._sortOrder;
            },
            set: function (v) {
                if (this._sortOrder !== v) {
                    this._sortOrder = v;
                    var styles = [(v === 0 ? "+" : "-") + "ria-sort-asc", (v === 1 ? "+" : "-") + "ria-sort-desc"];
                    dom.setClasses([this.col], styles);
                    this.objEvents.raiseProp("sortOrder");
                }
            },
            enumerable: false,
            configurable: true
        });
        return DataColumn;
    }(base_3.BaseColumn));
    exports.DataColumn = DataColumn;
});
define("jriapp_ui/datagrid/cells/data", ["require", "exports", "jriapp/utils/dom", "jriapp_ui/datagrid/cells/base"], function (require, exports, dom_18, base_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataCell = void 0;
    var dom = dom_18.DomUtils;
    var DataCell = (function (_super) {
        __extends(DataCell, _super);
        function DataCell(options) {
            var _this = _super.call(this, options) || this;
            var self = _this;
            _this._content = null;
            _this._click.interval = 350;
            _this._click.add(function () {
                self._onCellClicked(self.row);
            }, function () {
                self._onDblClicked(self.row);
            });
            dom.addClass([_this.td], "ria-data-cell");
            _this._initContent();
            return _this;
        }
        DataCell.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            if (!!this._content) {
                this._content.dispose();
                this._content = null;
            }
            _super.prototype.dispose.call(this);
        };
        DataCell.prototype._initContent = function () {
            var contentType = this.column.contentType;
            this._content = new contentType({
                parentEl: this.td,
                contentOptions: this.column.options.content,
                dataContext: this.item,
                isEditing: this.item._aspect.isEditing
            });
            this._content.render();
        };
        DataCell.prototype._beginEdit = function () {
            if (!this._content.isEditing) {
                this._content.isEditing = true;
            }
        };
        DataCell.prototype._endEdit = function (_isCanceled) {
            if (this._content.isEditing) {
                this._content.isEditing = false;
            }
        };
        DataCell.prototype.toString = function () {
            return "DataCell";
        };
        return DataCell;
    }(base_4.BaseCell));
    exports.DataCell = DataCell;
});
define("jriapp_ui/datagrid/columns/actions", ["require", "exports", "jriapp/utils/dom", "jriapp_ui/datagrid/columns/base"], function (require, exports, dom_19, base_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActionsColumn = void 0;
    var dom = dom_19.DomUtils;
    var ActionsColumn = (function (_super) {
        __extends(ActionsColumn, _super);
        function ActionsColumn(grid, options) {
            var _this = _super.call(this, grid, options) || this;
            var self = _this;
            dom.addClass([_this.col], "ria-row-actions");
            dom.events.on(_this.grid.table, "click", function (e) {
                var btn = e.target, name = btn.getAttribute("data-name"), cell = dom.getData(btn, "cell");
                self.grid.currentRow = cell.row;
                switch (name) {
                    case "img_ok":
                        self._onOk(cell);
                        break;
                    case "img_cancel":
                        self._onCancel(cell);
                        break;
                    case "img_edit":
                        self._onEdit(cell);
                        break;
                    case "img_delete":
                        self._onDelete(cell);
                        break;
                }
            }, {
                nmspace: _this.uniqueID,
                matchElement: function (el) {
                    var attr = el.getAttribute("data-scope"), tag = el.tagName.toLowerCase();
                    return self.uniqueID === attr && tag === "span";
                }
            });
            _this.grid.addOnRowAction(function (_, args) {
                switch (args.action) {
                    case 0:
                        self._onOk(args.row.actionsCell);
                        break;
                    case 1:
                        self._onEdit(args.row.actionsCell);
                        break;
                    case 2:
                        self._onCancel(args.row.actionsCell);
                        break;
                    case 3:
                        self._onDelete(args.row.actionsCell);
                        break;
                }
            }, _this.uniqueID);
            return _this;
        }
        ActionsColumn.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            dom.events.offNS(this.grid.table, this.uniqueID);
            this.grid.objEvents.offNS(this.uniqueID);
            _super.prototype.dispose.call(this);
        };
        ActionsColumn.prototype._onOk = function (cell) {
            if (!cell.row) {
                return;
            }
            cell.row.endEdit();
            cell.update();
        };
        ActionsColumn.prototype._onCancel = function (cell) {
            if (!cell.row) {
                return;
            }
            cell.row.cancelEdit();
            cell.update();
        };
        ActionsColumn.prototype._onDelete = function (cell) {
            if (!cell.row) {
                return;
            }
            cell.row.deleteRow();
        };
        ActionsColumn.prototype._onEdit = function (cell) {
            if (!cell.row) {
                return;
            }
            cell.row.beginEdit();
            cell.update();
            this.grid.showEditDialog();
        };
        ActionsColumn.prototype.toString = function () {
            return "ActionsColumn";
        };
        return ActionsColumn;
    }(base_5.BaseColumn));
    exports.ActionsColumn = ActionsColumn;
});
define("jriapp_ui/datagrid/cells/actions", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp/int", "jriapp_ui/baseview", "jriapp_ui/datagrid/consts", "jriapp_ui/datagrid/cells/base"], function (require, exports, jriapp_shared_21, dom_20, int_1, baseview_5, consts_1, base_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActionsCell = exports.deleteName = exports.editName = void 0;
    var utils = jriapp_shared_21.Utils, dom = dom_20.DomUtils, format = utils.str.format;
    exports.editName = "img_edit", exports.deleteName = "img_delete";
    var actionsSelector = 'span[data-role="row-action"]';
    var _editBtnsHTML = ['<span data-role="row-action" data-name="img_ok" class="{0}"></span>', '<span data-role="row-action" data-name="img_cancel" class="{1}"></span>'];
    var _viewBtnsHTML = ['<span data-role="row-action" data-name="img_edit" class="{0}"></span>', '<span data-role="row-action" data-name="img_delete" class="{1}"></span>'];
    var editBtnsHTML = null, viewBtnsHTML = null;
    var ActionsCell = (function (_super) {
        __extends(ActionsCell, _super);
        function ActionsCell(options) {
            var _this = _super.call(this, options) || this;
            _this._isEditing = false;
            dom.addClass([_this.td], ["ria-row-actions", "ria-nobr"].join(" "));
            _this._createButtons(_this.row.isEditing);
            return _this;
        }
        ActionsCell.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._cleanUp(this.td);
            _super.prototype.dispose.call(this);
        };
        ActionsCell.prototype._setupButtons = function (btns) {
            var self = this, isActionsToolTips = self.grid.options.isActionsToolTips;
            for (var _i = 0, btns_1 = btns; _i < btns_1.length; _i++) {
                var btn = btns_1[_i];
                dom.setData(btn, "cell", self);
                var name_1 = btn.getAttribute("data-name");
                if (isActionsToolTips) {
                    baseview_5.addToolTip(btn, jriapp_shared_21.LocaleSTRS.TEXT[consts_1.txtMap[name_1]]);
                }
                btn.setAttribute("data-scope", self.column.uniqueID);
            }
        };
        ActionsCell.prototype._cleanUp = function (td) {
            var self = this, btns = dom.queryAll(td, actionsSelector), isActionsToolTips = self.grid.options.isActionsToolTips;
            for (var _i = 0, btns_2 = btns; _i < btns_2.length; _i++) {
                var btn = btns_2[_i];
                dom.removeData(btn);
                if (isActionsToolTips) {
                    baseview_5.addToolTip(btn, null);
                }
            }
        };
        Object.defineProperty(ActionsCell.prototype, "editBtnsHTML", {
            get: function () {
                if (!editBtnsHTML) {
                    editBtnsHTML = _editBtnsHTML.map(function (str) { return format(str, int_1.ButtonCss.OK, int_1.ButtonCss.Cancel); });
                }
                return editBtnsHTML;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ActionsCell.prototype, "viewBtnsHTML", {
            get: function () {
                if (!viewBtnsHTML) {
                    viewBtnsHTML = _viewBtnsHTML.map(function (str) { return format(str, int_1.ButtonCss.Edit, int_1.ButtonCss.Delete); });
                }
                return viewBtnsHTML;
            },
            enumerable: false,
            configurable: true
        });
        ActionsCell.prototype._createButtons = function (isEditing) {
            var self = this, td = this.td;
            this._cleanUp(td);
            td.innerHTML = "";
            var btns;
            if (isEditing) {
                self._isEditing = true;
                btns = self.editBtnsHTML.map(function (str) { return dom.fromHTML(str); }).map(function (arr) { return arr[0]; });
            }
            else {
                self._isEditing = false;
                btns = self.viewBtnsHTML.map(function (str, index) {
                    if (!self.isCanEdit && index === 0) {
                        return null;
                    }
                    else if (!self.isCanDelete && index === 1) {
                        return null;
                    }
                    else {
                        return dom.fromHTML(str);
                    }
                }).filter(function (arr) { return !!arr; }).map(function (arr) { return arr[0]; });
            }
            self._setupButtons(btns);
            dom.append(td, btns);
        };
        ActionsCell.prototype.update = function () {
            if (!this.getIsStateDirty() && this._isEditing !== this.row.isEditing) {
                this._createButtons(this.row.isEditing);
            }
        };
        ActionsCell.prototype.toString = function () {
            return "ActionsCell";
        };
        Object.defineProperty(ActionsCell.prototype, "isCanEdit", {
            get: function () {
                return this.grid.isCanEdit;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ActionsCell.prototype, "isCanDelete", {
            get: function () {
                return this.grid.isCanDelete;
            },
            enumerable: false,
            configurable: true
        });
        return ActionsCell;
    }(base_6.BaseCell));
    exports.ActionsCell = ActionsCell;
});
define("jriapp_ui/datagrid/columns/rowselector", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp_ui/datagrid/columns/base"], function (require, exports, jriapp_shared_22, dom_21, base_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RowSelectorColumn = void 0;
    var utils = jriapp_shared_22.Utils, dom = dom_21.DomUtils, doc = dom.document, _undefined = utils.check._undefined;
    var RowSelectorColumn = (function (_super) {
        __extends(RowSelectorColumn, _super);
        function RowSelectorColumn(grid, options) {
            var _this = _super.call(this, grid, options) || this;
            var self = _this;
            dom.addClass([_this.col], "ria-row-selector");
            var label = doc.createElement("label");
            var chk = doc.createElement("input");
            chk.type = "checkbox";
            chk.checked = false;
            chk.className = "ria-row-selector";
            label.className = "ria-row-selector";
            label.appendChild(chk);
            label.appendChild(doc.createElement("span"));
            _this.col.appendChild(label);
            _this._chk = chk;
            dom.events.on(chk, "change", function (e) {
                e.stopPropagation();
                self.objEvents.raiseProp("checked");
                self.grid.selectRows(chk.checked);
            }, _this.uniqueID);
            dom.events.on(_this.grid.table, "click", function (e) {
                var chk = e.target, cell = dom.getData(chk, "cell");
                if (!!cell && !cell.getIsStateDirty() && !cell.isDisabled) {
                    cell.row.isSelected = cell.checked;
                }
            }, {
                nmspace: _this.uniqueID,
                matchElement: function (el) {
                    var attr = el.getAttribute("data-scope"), tag = el.tagName.toLowerCase();
                    return self.uniqueID === attr && tag === "input";
                }
            });
            return _this;
        }
        RowSelectorColumn.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            dom.events.offNS(this._chk, this.uniqueID);
            dom.events.offNS(this.grid.table, this.uniqueID);
            _super.prototype.dispose.call(this);
        };
        RowSelectorColumn.prototype.toString = function () {
            return "RowSelectorColumn";
        };
        Object.defineProperty(RowSelectorColumn.prototype, "checked", {
            get: function () {
                if (!!this._chk) {
                    return this._chk.checked;
                }
                return _undefined;
            },
            set: function (v) {
                var bv = !!v, chk = this._chk;
                if (bv !== chk.checked) {
                    chk.checked = bv;
                    this.objEvents.raiseProp("checked");
                }
            },
            enumerable: false,
            configurable: true
        });
        return RowSelectorColumn;
    }(base_7.BaseColumn));
    exports.RowSelectorColumn = RowSelectorColumn;
});
define("jriapp_ui/datagrid/cells/rowselector", ["require", "exports", "jriapp/utils/dom", "jriapp_ui/datagrid/cells/base"], function (require, exports, dom_22, base_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RowSelectorCell = void 0;
    var dom = dom_22.DomUtils, doc = dom.document;
    var RowSelectorCell = (function (_super) {
        __extends(RowSelectorCell, _super);
        function RowSelectorCell(options) {
            var _this = _super.call(this, options) || this;
            dom.addClass([_this.td], "ria-row-selector");
            var label = doc.createElement("label");
            var chk = doc.createElement("input");
            chk.type = "checkbox";
            chk.checked = false;
            chk.className = "ria-row-selector";
            label.className = "ria-row-selector";
            chk.setAttribute("data-scope", _this.column.uniqueID);
            label.appendChild(chk);
            label.appendChild(doc.createElement("span"));
            _this.td.appendChild(label);
            _this._chk = chk;
            dom.setData(chk, "cell", _this);
            return _this;
        }
        RowSelectorCell.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            dom.removeData(this._chk);
            _super.prototype.dispose.call(this);
        };
        Object.defineProperty(RowSelectorCell.prototype, "isDisabled", {
            get: function () {
                return this._chk.disabled;
            },
            set: function (v) {
                var el = this._chk;
                if (v !== el.disabled) {
                    el.disabled = v;
                    if (v) {
                        this.checked = false;
                    }
                    this.objEvents.raiseProp("isDisabled");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RowSelectorCell.prototype, "checked", {
            get: function () {
                return this._chk.checked;
            },
            set: function (v) {
                var bv = !!v;
                if (!this.isDisabled && bv !== this._chk.checked) {
                    this._chk.checked = bv;
                }
            },
            enumerable: false,
            configurable: true
        });
        RowSelectorCell.prototype.toString = function () {
            return "RowSelectorCell";
        };
        return RowSelectorCell;
    }(base_8.BaseCell));
    exports.RowSelectorCell = RowSelectorCell;
});
define("jriapp_ui/datagrid/rows/row", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp_ui/datagrid/cells/expander", "jriapp_ui/datagrid/cells/data", "jriapp_ui/datagrid/cells/actions", "jriapp_ui/datagrid/cells/rowselector", "jriapp_ui/datagrid/columns/expander", "jriapp_ui/datagrid/columns/actions", "jriapp_ui/datagrid/columns/rowselector"], function (require, exports, jriapp_shared_23, dom_23, expander_1, data_1, actions_1, rowselector_1, expander_2, actions_2, rowselector_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Row = void 0;
    var utils = jriapp_shared_23.Utils, dom = dom_23.DomUtils, doc = dom.document, sys = utils.sys, getNewID = utils.core.getNewID;
    function fnState(row) {
        var path = row.grid.options.rowStateField, val = (!row.item || !path) ? null : sys.resolvePath(row.item, path), css = row.grid._getInternal().onRowStateChanged(row, val);
        row._setState(css);
    }
    var Row = (function (_super) {
        __extends(Row, _super);
        function Row(grid, options) {
            var _this = _super.call(this) || this;
            var item = options.item;
            _this._grid = grid;
            _this._tr = null;
            _this._item = item;
            _this._cells = [];
            _this._uniqueID = getNewID("tr");
            _this._expanderCell = null;
            _this._actionsCell = null;
            _this._rowSelectorCell = null;
            _this._isDeleted = false;
            _this._isSelected = false;
            _this._isDetached = false;
            _this._stateCss = null;
            _this._isDeleted = item._aspect.isDeleted;
            _this._loadDOM();
            return _this;
        }
        Row.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            var grid = this._grid;
            if (!!grid) {
                if (!this._isDetached) {
                    grid._getInternal().removeRow(this);
                }
            }
            this._unloadDOM();
            this._item = null;
            this._grid = null;
            _super.prototype.dispose.call(this);
        };
        Row.prototype._createCells = function () {
            var self = this, cols = self.columns, len = cols.length;
            for (var i = 0; i < len; i += 1) {
                self._cells.push(self._createCell(cols[i], i));
            }
        };
        Row.prototype._createCell = function (col, num) {
            var self = this;
            var cell;
            if (col instanceof expander_2.ExpanderColumn) {
                this._expanderCell = new expander_1.ExpanderCell({ row: self, column: col, num: num });
                cell = this._expanderCell;
            }
            else if (col instanceof actions_2.ActionsColumn) {
                this._actionsCell = new actions_1.ActionsCell({ row: self, column: col, num: num });
                cell = this._actionsCell;
            }
            else if (col instanceof rowselector_2.RowSelectorColumn) {
                this._rowSelectorCell = new rowselector_1.RowSelectorCell({ row: self, column: col, num: num });
                cell = this._rowSelectorCell;
            }
            else {
                cell = new data_1.DataCell({ row: self, column: col, num: num });
            }
            return cell;
        };
        Row.prototype._loadDOM = function () {
            if (!!this._tr) {
                return;
            }
            var self = this, tr = doc.createElement("tr");
            this._tr = tr;
            if (this._isDeleted) {
                dom.addClass([tr], "ria-row-deleted");
            }
            this._createCells();
            if (!!this._item) {
                if (!!this.isHasStateField) {
                    this._item.objEvents.onProp(this._grid.options.rowStateField, function () {
                        fnState(self);
                    }, this._uniqueID);
                }
                fnState(self);
            }
        };
        Row.prototype._unloadDOM = function () {
            if (!this._tr) {
                return;
            }
            this._item.objEvents.offNS(this._uniqueID);
            dom.removeNode(this._tr);
            var cells = this._cells, len = cells.length;
            for (var i = 0; i < len; i += 1) {
                cells[i].dispose();
            }
            this._cells = [];
            this._expanderCell = null;
            this._rowSelectorCell = null;
            this._actionsCell = null;
            this._tr = null;
        };
        Row.prototype._setState = function (css) {
            if (this._stateCss !== css) {
                var arr = [];
                if (!!this._stateCss) {
                    arr.push("-" + this._stateCss);
                }
                this._stateCss = css;
                if (!!this._stateCss) {
                    arr.push("+" + this._stateCss);
                }
                dom.setClasses([this.tr], arr);
            }
        };
        Row.prototype._onBeginEdit = function () {
            this._cells.forEach(function (cell) {
                if (cell instanceof data_1.DataCell) {
                    cell._beginEdit();
                }
            });
            if (!!this._actionsCell) {
                this._actionsCell.update();
            }
        };
        Row.prototype._onEndEdit = function (isCanceled) {
            this._cells.forEach(function (cell) {
                if (cell instanceof data_1.DataCell) {
                    cell._endEdit(isCanceled);
                }
            });
            if (!!this._actionsCell) {
                this._actionsCell.update();
            }
        };
        Row.prototype.beginEdit = function () {
            return this._item._aspect.beginEdit();
        };
        Row.prototype.endEdit = function () {
            return this._item._aspect.endEdit();
        };
        Row.prototype.cancelEdit = function () {
            return this._item._aspect.cancelEdit();
        };
        Row.prototype.deleteRow = function () {
            return this._item._aspect.deleteItem();
        };
        Row.prototype.updateErrorState = function () {
            var hasErrors = this._item._aspect.getIsHasErrors();
            dom.setClass([this._tr], "ria-row-error", !hasErrors);
        };
        Row.prototype.updateUIState = function () {
            fnState(this);
        };
        Row.prototype.scrollIntoView = function (animate, pos) {
            this.grid.scrollToRow({ row: this, animate: animate, pos: pos });
        };
        Row.prototype.toString = function () {
            return "Row";
        };
        Object.defineProperty(Row.prototype, "rect", {
            get: function () {
                return this.tr.getBoundingClientRect();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "height", {
            get: function () {
                return this.tr.offsetHeight;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "width", {
            get: function () {
                return this.tr.offsetWidth;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "tr", {
            get: function () {
                return this._tr;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "grid", {
            get: function () {
                return this._grid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "item", {
            get: function () {
                return this._item;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "cells", {
            get: function () {
                return this._cells;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "columns", {
            get: function () {
                return this._grid.columns;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "uniqueID", {
            get: function () {
                return this._uniqueID;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "itemKey", {
            get: function () {
                return (!this._item) ? null : this._item._key;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "isCurrent", {
            get: function () {
                return this.grid.currentItem === this.item;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "isSelected", {
            get: function () {
                return this._isSelected;
            },
            set: function (v) {
                if (this._isSelected !== v) {
                    this._isSelected = v;
                    if (!!this._rowSelectorCell) {
                        this._rowSelectorCell.checked = this._isSelected;
                    }
                    this.objEvents.raiseProp("isSelected");
                    this.grid._getInternal().onRowSelectionChanged(this);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "isExpanded", {
            get: function () {
                return this.grid._getInternal().isRowExpanded(this);
            },
            set: function (v) {
                if (v !== this.isExpanded) {
                    if (!v && this.isExpanded) {
                        this.grid._getInternal().expandDetails(this, false);
                    }
                    else if (v) {
                        this.grid._getInternal().expandDetails(this, true);
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "expanderCell", {
            get: function () {
                return this._expanderCell;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "actionsCell", {
            get: function () {
                return this._actionsCell;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "rowSelectorCell", {
            get: function () {
                return this._rowSelectorCell;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "isDeleted", {
            get: function () {
                return this._isDeleted;
            },
            set: function (v) {
                if (this._isDeleted !== v) {
                    this._isDeleted = v;
                    if (this._isDeleted) {
                        this.isExpanded = false;
                    }
                    dom.setClass([this._tr], "ria-row-deleted", !this._isDeleted);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "isDetached", {
            get: function () {
                return this._isDetached;
            },
            set: function (v) {
                this._isDetached = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "isEditing", {
            get: function () {
                return !!this._item && this._item._aspect.isEditing;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Row.prototype, "isHasStateField", {
            get: function () {
                return !!this._grid.options.rowStateField;
            },
            enumerable: false,
            configurable: true
        });
        return Row;
    }(jriapp_shared_23.BaseObject));
    exports.Row = Row;
});
define("jriapp_ui/datagrid/cells/base", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp/bootstrapper", "jriapp_ui/utils/dblclick"], function (require, exports, jriapp_shared_24, dom_24, bootstrapper_15, dblclick_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseCell = void 0;
    var utils = jriapp_shared_24.Utils, dom = dom_24.DomUtils, doc = dom.document, subscribeMap = bootstrapper_15.subscribeWeakMap;
    var BaseCell = (function (_super) {
        __extends(BaseCell, _super);
        function BaseCell(options) {
            var _this = _super.call(this) || this;
            options = utils.core.extend({
                row: null,
                column: null,
                num: 0
            }, options);
            _this._row = options.row;
            _this._td = doc.createElement("td");
            subscribeMap.set(_this._td, _this);
            _this._column = options.column;
            _this._num = options.num;
            if (!!_this._column.options.rowCellCss) {
                dom.addClass([_this._td], _this._column.options.rowCellCss);
            }
            _this._click = new dblclick_1.DblClick();
            _this._row.tr.appendChild(_this._td);
            return _this;
        }
        BaseCell.prototype._onCellClicked = function (_row) {
        };
        BaseCell.prototype._onDblClicked = function (_row) {
            this.grid._getInternal().onCellDblClicked(this);
        };
        BaseCell.prototype.isSubscribed = function (flag) {
            return flag === 1;
        };
        BaseCell.prototype.handle_click = function (_e) {
            this.grid._getInternal().setCurrentColumn(this.column);
            this.click();
        };
        BaseCell.prototype.click = function () {
            this.grid.currentRow = this._row;
            this._click.click();
        };
        BaseCell.prototype.scrollIntoView = function () {
            this.row.scrollIntoView();
        };
        BaseCell.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            subscribeMap.delete(this._td);
            if (!!this._click) {
                this._click.dispose();
                this._click = null;
            }
            dom.removeData(this._td);
            _super.prototype.dispose.call(this);
        };
        BaseCell.prototype.toString = function () {
            return "BaseCell";
        };
        Object.defineProperty(BaseCell.prototype, "td", {
            get: function () { return this._td; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCell.prototype, "row", {
            get: function () { return this._row; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCell.prototype, "column", {
            get: function () { return this._column; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCell.prototype, "grid", {
            get: function () {
                return this._row.grid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCell.prototype, "item", {
            get: function () { return this._row.item; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCell.prototype, "uniqueID", {
            get: function () { return this._row.uniqueID + "_" + this._num; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseCell.prototype, "num", {
            get: function () { return this._num; },
            enumerable: false,
            configurable: true
        });
        return BaseCell;
    }(jriapp_shared_24.BaseObject));
    exports.BaseCell = BaseCell;
});
define("jriapp_ui/datagrid/cells/details", ["require", "exports", "jriapp_shared", "jriapp/template", "jriapp/utils/dom"], function (require, exports, jriapp_shared_25, template_6, dom_25) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DetailsCell = void 0;
    var dom = dom_25.DomUtils, doc = dom.document;
    var DetailsCell = (function (_super) {
        __extends(DetailsCell, _super);
        function DetailsCell(options) {
            var _this = _super.call(this) || this;
            _this._row = options.row;
            _this._td = doc.createElement("td");
            _this._td.colSpan = _this.grid.columns.length;
            if (!options.details_id) {
                return _this;
            }
            _this._row.tr.appendChild(_this._td);
            _this._template = template_6.createTemplate({ parentEl: null });
            _this._template.templateID = options.details_id;
            _this._td.appendChild(_this._template.el);
            return _this;
        }
        DetailsCell.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            if (!!this._template) {
                this._template.dispose();
                this._template = null;
            }
            this._row = null;
            this._td = null;
            _super.prototype.dispose.call(this);
        };
        DetailsCell.prototype.toString = function () {
            return "DetailsCell";
        };
        Object.defineProperty(DetailsCell.prototype, "td", {
            get: function () {
                return this._td;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DetailsCell.prototype, "row", {
            get: function () {
                return this._row;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DetailsCell.prototype, "grid", {
            get: function () {
                return this._row.grid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DetailsCell.prototype, "item", {
            get: function () {
                return this._template.dataContext;
            },
            set: function (v) {
                this._template.dataContext = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DetailsCell.prototype, "template", {
            get: function () {
                return this._template;
            },
            enumerable: false,
            configurable: true
        });
        return DetailsCell;
    }(jriapp_shared_25.BaseObject));
    exports.DetailsCell = DetailsCell;
});
define("jriapp_ui/datagrid/rows/details", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp_ui/datagrid/cells/details"], function (require, exports, jriapp_shared_26, dom_26, details_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DetailsRow = void 0;
    var utils = jriapp_shared_26.Utils, coreUtils = utils.core, dom = dom_26.DomUtils, doc = dom.document, getNewID = coreUtils.getNewID;
    var DetailsRow = (function (_super) {
        __extends(DetailsRow, _super);
        function DetailsRow(options) {
            var _this = _super.call(this) || this;
            var self = _this, tr = doc.createElement("tr");
            _this._grid = options.grid;
            _this._tr = tr;
            _this._item = null;
            _this._cell = null;
            _this._parentRow = null;
            _this._isFirstShow = true;
            _this._uniqueID = getNewID("drow");
            _this._createCell(options.details_id);
            dom.addClass([tr], "ria-row-details");
            _this._grid.addOnRowExpanded(function (_, args) {
                if (!args.isExpanded && !!args.collapsedRow) {
                    self._setParentRow(null);
                }
            }, _this._uniqueID);
            return _this;
        }
        DetailsRow.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._grid.objEvents.offNS(this._uniqueID);
            if (!!this._cell) {
                this._cell.dispose();
                this._cell = null;
            }
            dom.removeNode(this._tr);
            this._item = null;
            this._tr = null;
            this._grid = null;
            _super.prototype.dispose.call(this);
        };
        DetailsRow.prototype._createCell = function (detailsId) {
            this._cell = new details_1.DetailsCell({ row: this, details_id: detailsId });
        };
        DetailsRow.prototype._setParentRow = function (row) {
            var self = this;
            if (self.getIsStateDirty()) {
                return;
            }
            this._item = null;
            this._cell.item = null;
            dom.removeNode(this.tr);
            if (!row || row.getIsStateDirty()) {
                this._parentRow = null;
                return;
            }
            this._parentRow = row;
            this._item = row.item;
            this._cell.item = this._item;
            if (this._isFirstShow) {
                this._initShow();
            }
            dom.insertAfter(this.tr, row.tr);
            this._show(function () {
                var parentRow = self._parentRow;
                if (!parentRow || parentRow.getIsStateDirty()) {
                    return;
                }
                if (self.grid.options.isUseScrollIntoDetails) {
                    parentRow.scrollIntoView(true, 2);
                }
            });
        };
        DetailsRow.prototype._initShow = function () {
            var animation = this._grid.animation;
            animation.beforeShow(this._cell.template.el);
        };
        DetailsRow.prototype._show = function (onEnd) {
            var animation = this._grid.animation;
            this._isFirstShow = false;
            animation.beforeShow(this._cell.template.el);
            animation.show(onEnd);
        };
        DetailsRow.prototype._hide = function (onEnd) {
            var animation = this._grid.animation;
            animation.beforeHide(this._cell.template.el);
            animation.hide(onEnd);
        };
        DetailsRow.prototype.toString = function () {
            return "DetailsRow";
        };
        Object.defineProperty(DetailsRow.prototype, "rect", {
            get: function () {
                return this.tr.getBoundingClientRect();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DetailsRow.prototype, "height", {
            get: function () {
                return this.tr.offsetHeight;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DetailsRow.prototype, "width", {
            get: function () {
                return this.tr.offsetHeight;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DetailsRow.prototype, "tr", {
            get: function () {
                return this._tr;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DetailsRow.prototype, "grid", {
            get: function () {
                return this._grid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DetailsRow.prototype, "item", {
            get: function () {
                return this._item;
            },
            set: function (v) {
                if (this._item !== v) {
                    this._item = v;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DetailsRow.prototype, "cell", {
            get: function () {
                return this._cell;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DetailsRow.prototype, "uniqueID", {
            get: function () {
                return this._uniqueID;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DetailsRow.prototype, "itemKey", {
            get: function () {
                return (!this._item) ? null : this._item._key;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DetailsRow.prototype, "parentRow", {
            get: function () {
                return this._parentRow;
            },
            set: function (v) {
                var self = this;
                if (v !== this._parentRow) {
                    if (!!self._parentRow) {
                        self._hide(function () {
                            self._setParentRow(v);
                        });
                    }
                    else {
                        self._setParentRow(v);
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        return DetailsRow;
    }(jriapp_shared_26.BaseObject));
    exports.DetailsRow = DetailsRow;
});
define("jriapp_ui/datagrid/cells/fillspace", ["require", "exports", "jriapp_shared", "jriapp/utils/dom"], function (require, exports, jriapp_shared_27, dom_27) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FillSpaceCell = void 0;
    var dom = dom_27.DomUtils, doc = dom.document;
    var FillSpaceCell = (function (_super) {
        __extends(FillSpaceCell, _super);
        function FillSpaceCell(options) {
            var _this = _super.call(this) || this;
            _this._row = options.row;
            _this._td = document.createElement("td");
            _this._td.colSpan = _this.grid.columns.length;
            _this._row.tr.appendChild(_this._td);
            _this._div = doc.createElement("div");
            _this._div.className = "ria-fill-vspace";
            _this._td.appendChild(_this._div);
            return _this;
        }
        FillSpaceCell.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._row = null;
            this._td = null;
            this._div = null;
            _super.prototype.dispose.call(this);
        };
        FillSpaceCell.prototype.toString = function () {
            return "FillSpaceCell";
        };
        Object.defineProperty(FillSpaceCell.prototype, "td", {
            get: function () {
                return this._td;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FillSpaceCell.prototype, "row", {
            get: function () {
                return this._row;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FillSpaceCell.prototype, "grid", {
            get: function () {
                return this._row.grid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FillSpaceCell.prototype, "div", {
            get: function () {
                return this._div;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FillSpaceCell.prototype, "height", {
            get: function () {
                return this._div.offsetHeight;
            },
            set: function (v) {
                this._div.style.height = (!v ? 0 : v) + "px";
            },
            enumerable: false,
            configurable: true
        });
        return FillSpaceCell;
    }(jriapp_shared_27.BaseObject));
    exports.FillSpaceCell = FillSpaceCell;
});
define("jriapp_ui/datagrid/rows/fillspace", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp_ui/datagrid/cells/fillspace"], function (require, exports, jriapp_shared_28, dom_28, fillspace_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FillSpaceRow = void 0;
    var dom = dom_28.DomUtils, doc = dom.document;
    var FillSpaceRow = (function (_super) {
        __extends(FillSpaceRow, _super);
        function FillSpaceRow(options) {
            var _this = _super.call(this) || this;
            var tr = doc.createElement("tr");
            _this._grid = options.grid;
            _this._tr = tr;
            _this._cell = null;
            _this._createCell();
            dom.addClass([tr], "ria-fill-vspace");
            return _this;
        }
        FillSpaceRow.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            if (!!this._cell) {
                this._cell.dispose();
                this._cell = null;
            }
            dom.removeNode(this.tr);
            this._tr = null;
            this._grid = null;
            _super.prototype.dispose.call(this);
        };
        FillSpaceRow.prototype._createCell = function () {
            this._cell = new fillspace_1.FillSpaceCell({ row: this });
        };
        FillSpaceRow.prototype.toString = function () {
            return "FillSpaceRow";
        };
        FillSpaceRow.prototype.attach = function () {
            this._grid._tBodyEl.appendChild(this.tr);
        };
        FillSpaceRow.prototype.detach = function () {
            dom.removeNode(this.tr);
        };
        Object.defineProperty(FillSpaceRow.prototype, "tr", {
            get: function () {
                return this._tr;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FillSpaceRow.prototype, "grid", {
            get: function () {
                return this._grid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FillSpaceRow.prototype, "cell", {
            get: function () {
                return this._cell;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FillSpaceRow.prototype, "height", {
            get: function () {
                return this._cell.height;
            },
            set: function (v) {
                this._cell.height = v;
            },
            enumerable: false,
            configurable: true
        });
        return FillSpaceRow;
    }(jriapp_shared_28.BaseObject));
    exports.FillSpaceRow = FillSpaceRow;
});
define("jriapp_ui/datagrid/datagrid", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp/utils/parser", "jriapp/bootstrapper", "jriapp_ui/baseview", "jriapp_ui/content/int", "jriapp_ui/dialog", "jriapp_ui/datagrid/animation", "jriapp_ui/datagrid/rows/row", "jriapp_ui/datagrid/rows/details", "jriapp_ui/datagrid/rows/fillspace", "jriapp_ui/datagrid/columns/expander", "jriapp_ui/datagrid/columns/data", "jriapp_ui/datagrid/columns/actions", "jriapp_ui/datagrid/columns/rowselector", "jriapp_ui/datagrid/rows/row", "jriapp_ui/datagrid/columns/base", "jriapp_ui/datagrid/consts", "jriapp_ui/datagrid/animation", "jriapp_ui/utils/jquery"], function (require, exports, jriapp_shared_29, dom_29, parser_2, bootstrapper_16, baseview_6, int_2, dialog_1, animation_1, row_1, details_2, fillspace_2, expander_3, data_2, actions_3, rowselector_3, row_2, base_9, consts_2, animation_2, jquery_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataGridElView = exports.DataGrid = exports.findDataGrid = exports.getDataGrids = exports.DefaultAnimation = exports.ROW_ACTION = exports.COLUMN_TYPE = exports.ROW_POSITION = exports.DataGridColumn = exports.DataGridRow = void 0;
    Object.defineProperty(exports, "DataGridRow", { enumerable: true, get: function () { return row_2.Row; } });
    Object.defineProperty(exports, "DataGridColumn", { enumerable: true, get: function () { return base_9.BaseColumn; } });
    Object.defineProperty(exports, "ROW_POSITION", { enumerable: true, get: function () { return consts_2.ROW_POSITION; } });
    Object.defineProperty(exports, "COLUMN_TYPE", { enumerable: true, get: function () { return consts_2.COLUMN_TYPE; } });
    Object.defineProperty(exports, "ROW_ACTION", { enumerable: true, get: function () { return consts_2.ROW_ACTION; } });
    Object.defineProperty(exports, "DefaultAnimation", { enumerable: true, get: function () { return animation_2.DefaultAnimation; } });
    var utils = jriapp_shared_29.Utils, format = utils.str.format, _a = utils.core, forEach = _a.forEach, merge = _a.merge, getNewID = _a.getNewID, extend = _a.extend, Indexer = _a.Indexer, ERROR = utils.err, sys = utils.sys, dom = dom_29.DomUtils, parser = parser_2.Parser, doc = dom.document, win = dom.window, boot = bootstrapper_16.bootstrapper;
    var _columnWidthInterval, _gridsCount = 0;
    var _createdGrids = Indexer();
    function getDataGrids() {
        var res = [];
        for (var key in _createdGrids) {
            res.push(_createdGrids[key]);
        }
        return res;
    }
    exports.getDataGrids = getDataGrids;
    function findDataGrid(gridName) {
        for (var key in _createdGrids) {
            var grid = _createdGrids[key];
            if (!!grid.table && grid.table.getAttribute("data-name") === gridName) {
                return grid;
            }
        }
        return null;
    }
    exports.findDataGrid = findDataGrid;
    function updateWidth() {
        _checkGridWidth();
        _columnWidthInterval = win.requestAnimationFrame(updateWidth);
    }
    function _gridCreated(grid) {
        _createdGrids[grid.uniqueID] = grid;
        _gridsCount += 1;
        if (_gridsCount === 1) {
            _columnWidthInterval = win.requestAnimationFrame(updateWidth);
        }
    }
    function _gridDestroyed(grid) {
        delete _createdGrids[grid.uniqueID];
        _gridsCount -= 1;
        if (_gridsCount === 0) {
            win.cancelAnimationFrame(_columnWidthInterval);
        }
    }
    function _checkGridWidth() {
        forEach(_createdGrids, function (id) {
            var grid = _createdGrids[id];
            if (grid.getIsStateDirty()) {
                return;
            }
            grid._getInternal().columnWidthCheck();
        });
    }
    var GRID_EVENTS;
    (function (GRID_EVENTS) {
        GRID_EVENTS["row_expanded"] = "row_expanded";
        GRID_EVENTS["row_selected"] = "row_selected";
        GRID_EVENTS["page_changed"] = "page_changed";
        GRID_EVENTS["row_state_changed"] = "row_state_changed";
        GRID_EVENTS["cell_dblclicked"] = "cell_dblclicked";
        GRID_EVENTS["row_action"] = "row_action";
        GRID_EVENTS["refresh"] = "refresh";
    })(GRID_EVENTS || (GRID_EVENTS = {}));
    var DataGrid = (function (_super) {
        __extends(DataGrid, _super);
        function DataGrid(table, options) {
            var _this = _super.call(this) || this;
            var self = _this;
            options = merge(options, {
                dataSource: null,
                animation: null,
                isUseScrollInto: true,
                isUseScrollIntoDetails: true,
                containerCss: null,
                wrapCss: null,
                headerCss: null,
                rowStateField: null,
                isCanEdit: null,
                isCanDelete: null,
                isHandleAddNew: false,
                isPrependNewRows: false,
                isPrependAllRows: false,
                isActionsToolTips: false,
                syncSetDatasource: false
            });
            if (!!options.dataSource && !sys.isCollection(options.dataSource)) {
                throw new Error(jriapp_shared_29.LocaleERRS.ERR_GRID_DATASRC_INVALID);
            }
            _this._options = options;
            _this._table = table;
            dom.addClass([table], "ria-data-table");
            _this._name = table.getAttribute("data-name");
            _this._uniqueID = getNewID("grd");
            _this._rowMap = Indexer();
            _this._rows = [];
            _this._columns = [];
            _this._expandedRow = null;
            _this._details = null;
            _this._fillSpace = null;
            _this._expanderCol = null;
            _this._actionsCol = null;
            _this._rowSelectorCol = null;
            _this._currentColumn = null;
            _this._editingRow = null;
            _this._dialog = null;
            _this._header = null;
            _this._wrapper = null;
            _this._contaner = null;
            _this._wrapTable();
            _this._scrollDebounce = new jriapp_shared_29.Debounce();
            _this._dsDebounce = new jriapp_shared_29.Debounce();
            _this._pageDebounce = new jriapp_shared_29.Debounce();
            _this._refreshCounter = 0;
            _this._selectable = {
                onKeyDown: function (key, event) {
                    self._onKeyDown(key, event);
                },
                onKeyUp: function (key, event) {
                    self._onKeyUp(key, event);
                }
            };
            _this._updateCurrent = function () { };
            var tw = table.offsetWidth;
            _this._internal = {
                isRowExpanded: function (row) {
                    return self._isRowExpanded(row);
                },
                getHeader: function () {
                    return self._header;
                },
                getContainer: function () {
                    return self._contaner;
                },
                getWrapper: function () {
                    return self._wrapper;
                },
                setCurrentColumn: function (column) {
                    self._setCurrentColumn(column);
                },
                onRowStateChanged: function (row, val) {
                    return self._onRowStateChanged(row, val);
                },
                onCellDblClicked: function (cell) {
                    self._onCellDblClicked(cell);
                },
                onRowSelectionChanged: function (row) {
                    self._onRowSelectionChanged(row);
                },
                resetColumnsSort: function () {
                    self._resetColumnsSort();
                },
                getLastRow: function () {
                    return self._getLastRow();
                },
                removeRow: function (row) {
                    self._removeRow(row);
                },
                expandDetails: function (parentRow, expanded) {
                    self._expandDetails(parentRow, expanded);
                },
                columnWidthCheck: function () {
                    if (self.getIsStateDirty()) {
                        return;
                    }
                    var tw2 = table.offsetWidth;
                    if (tw !== tw2) {
                        tw = tw2;
                        self.updateColumnsSize();
                    }
                }
            };
            _this._createColumns();
            bootstrapper_16.selectableProviderWeakMap.set(table, _this);
            _gridCreated(_this);
            var ds = _this._options.dataSource;
            _this.setDataSource(ds);
            return _this;
        }
        DataGrid.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            bootstrapper_16.selectableProviderWeakMap.delete(this._table);
            this._scrollDebounce.dispose();
            this._dsDebounce.dispose();
            this._pageDebounce.dispose();
            this._updateCurrent = function () { };
            this._clearGrid();
            this._unbindDS();
            _gridDestroyed(this);
            if (!!this._details) {
                this._details.dispose();
                this._details = null;
            }
            if (!!this._fillSpace) {
                this._fillSpace.dispose();
                this._fillSpace = null;
            }
            if (this._options.animation) {
                this._options.animation.stop();
                this._options.animation = null;
            }
            if (!!this._dialog) {
                this._dialog.dispose();
                this._dialog = null;
            }
            this._unWrapTable();
            dom.removeClass([this._table], "ria-data-table");
            dom.removeClass([this._tHeadRow], "ria-col-info");
            for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
                var col = _a[_i];
                col.dispose();
            }
            this._columns = [];
            this._table = null;
            this._options = {};
            this._selectable = null;
            this._internal = null;
            _super.prototype.dispose.call(this);
        };
        DataGrid.prototype._onKeyDown = function (key, event) {
            var ds = this.dataSource, self = this;
            if (!ds) {
                return;
            }
            var currentRow = this.currentRow;
            switch (key) {
                case 38:
                    event.preventDefault();
                    if (ds.movePrev(true)) {
                        if (self.isUseScrollInto) {
                            self.scrollToCurrent(0);
                        }
                    }
                    break;
                case 40:
                    event.preventDefault();
                    if (ds.moveNext(true)) {
                        if (self.isUseScrollInto) {
                            self.scrollToCurrent(1);
                        }
                    }
                    break;
                case 34:
                    event.preventDefault();
                    this._pageDebounce.enque(function () {
                        if (ds.pageIndex > 0) {
                            ds.pageIndex = ds.pageIndex - 1;
                        }
                    });
                    break;
                case 33:
                    event.preventDefault();
                    this._pageDebounce.enque(function () {
                        ds.pageIndex = ds.pageIndex + 1;
                    });
                    break;
                case 13:
                    if (!!currentRow && !!this._actionsCol) {
                        event.preventDefault();
                    }
                    break;
                case 27:
                    if (!!currentRow && !!this._actionsCol) {
                        if (currentRow.isEditing) {
                            event.preventDefault();
                        }
                    }
                    break;
                case 32:
                    if (!!this._rowSelectorCol && !!currentRow && (!currentRow.isExpanded && !currentRow.isEditing)) {
                        event.preventDefault();
                    }
                    break;
            }
        };
        DataGrid.prototype._onKeyUp = function (key, event) {
            var ds = this.dataSource;
            if (!ds) {
                return;
            }
            var currentRow = this.currentRow;
            switch (key) {
                case 13:
                    if (!!currentRow && !!this._actionsCol) {
                        event.preventDefault();
                        if (currentRow.isEditing) {
                            this.objEvents.raise("row_action", { row: currentRow, action: 0 });
                        }
                        else {
                            this.objEvents.raise("row_action", { row: currentRow, action: 1 });
                        }
                    }
                    break;
                case 27:
                    if (!!currentRow && !!this._actionsCol) {
                        if (currentRow.isEditing) {
                            event.preventDefault();
                            this.objEvents.raise("row_action", { row: currentRow, action: 2 });
                        }
                    }
                    break;
                case 32:
                    if (!!this._rowSelectorCol && !!currentRow && (!currentRow.isExpanded && !currentRow.isEditing)) {
                        event.preventDefault();
                        currentRow.isSelected = !currentRow.isSelected;
                    }
                    break;
            }
        };
        DataGrid.prototype._onRefresh = function (args) {
            var _this = this;
            this._refreshCounter++;
            utils.async.getTaskQueue().enque(this._getRefreshHandler(this._refreshCounter, function () { return _this.objEvents.raise("refresh", args); }));
        };
        DataGrid.prototype._onRowStateChanged = function (row, val) {
            var args = { row: row, val: val, css: null };
            this.objEvents.raise("row_state_changed", args);
            return args.css;
        };
        DataGrid.prototype._onCellDblClicked = function (cell) {
            var args = { cell: cell };
            this.objEvents.raise("cell_dblclicked", args);
        };
        DataGrid.prototype._onRowSelectionChanged = function (row) {
            this.objEvents.raise("row_selected", { row: row });
        };
        DataGrid.prototype._onDSCurrentChanged = function (prevCurrent, newCurrent) {
            if (prevCurrent !== newCurrent) {
                var oldRow = !prevCurrent ? null : this._rowMap[prevCurrent._key];
                var newRow = !newCurrent ? null : this._rowMap[newCurrent._key];
                if (!!oldRow) {
                    oldRow.objEvents.raiseProp("isCurrent");
                    dom.removeClass([oldRow.tr], "ria-row-highlight");
                }
                if (!!newRow) {
                    newRow.objEvents.raiseProp("isCurrent");
                    dom.addClass([newRow.tr], "ria-row-highlight");
                }
            }
        };
        DataGrid.prototype._onDSCollectionChanged = function (_, args) {
            var self = this;
            switch (args.changeType) {
                case 2:
                    {
                        if (args.reason === 0) {
                            self._resetColumnsSort();
                        }
                        self._refresh(args.reason === 1);
                    }
                    break;
                case 1:
                    {
                        self._appendItems(args.items);
                        self._updateTableDisplay();
                    }
                    break;
                case 0:
                    {
                        var rowpos_1 = -1;
                        args.items.forEach(function (item) {
                            var row = self._rowMap[item._key];
                            if (!!row) {
                                rowpos_1 = self._removeRow(row);
                            }
                        });
                        var rowlen = this._rows.length;
                        if (rowpos_1 > -1 && rowlen > 0) {
                            if (rowpos_1 < rowlen) {
                                this.currentRow = this._rows[rowpos_1];
                            }
                            else {
                                this.currentRow = this._rows[rowlen - 1];
                            }
                        }
                        self._updateTableDisplay();
                    }
                    break;
                case 3:
                    {
                        var row = self._rowMap[args.old_key];
                        if (!!row) {
                            delete self._rowMap[args.old_key];
                            self._rowMap[args.new_key] = row;
                        }
                    }
                    break;
                default:
                    throw new Error(format(jriapp_shared_29.LocaleERRS.ERR_COLLECTION_CHANGETYPE_INVALID, args.changeType));
            }
        };
        DataGrid.prototype._onPageChanged = function () {
            if (!!this._rowSelectorCol) {
                this._rowSelectorCol.checked = false;
            }
            this.objEvents.raise("page_changed", {});
        };
        DataGrid.prototype._onItemEdit = function (item, isBegin, isCanceled) {
            var row = this._rowMap[item._key];
            if (!row) {
                return;
            }
            if (isBegin) {
                row._onBeginEdit();
                this._editingRow = row;
            }
            else {
                row._onEndEdit(isCanceled);
                this._editingRow = null;
            }
            this.objEvents.raiseProp("editingRow");
        };
        DataGrid.prototype._onItemAdded = function (_, args) {
            var item = args.item, row = this._rowMap[item._key];
            if (!row) {
                return;
            }
            this.scrollToCurrent();
            if (this._options.isHandleAddNew && !args.isAddNewHandled) {
                args.isAddNewHandled = this.showEditDialog();
            }
        };
        DataGrid.prototype._onItemStatusChanged = function (item, oldStatus) {
            var newStatus = item._aspect.status, ds = this.dataSource, row = this._rowMap[item._key];
            if (!row) {
                return;
            }
            if (newStatus === 3) {
                row.isDeleted = true;
                var row2 = this._findUndeleted(row, true);
                if (!row2) {
                    row2 = this._findUndeleted(row, false);
                }
                if (!!row2) {
                    ds.currentItem = row2.item;
                }
            }
            else if (oldStatus === 3) {
                row.isDeleted = false;
            }
        };
        DataGrid.prototype._onDSErrorsChanged = function (_, args) {
            var row = this._rowMap[args.item._key];
            if (!row) {
                return;
            }
            row.updateErrorState();
        };
        DataGrid.prototype._updateContentOptions = function () {
            this.columns.filter(function (column) { return column instanceof data_2.DataColumn; }).forEach(function (column) {
                column.updateContentOptions();
            });
        };
        DataGrid.prototype._isRowExpanded = function (row) {
            return this._expandedRow === row;
        };
        DataGrid.prototype._setCurrentColumn = function (column) {
            if (!!this._currentColumn) {
                this._currentColumn.isSelected = false;
            }
            this._currentColumn = column;
            if (!!this._currentColumn) {
                this._currentColumn.isSelected = true;
            }
        };
        DataGrid.prototype._resetColumnsSort = function () {
            this.columns.forEach(function (col) {
                if (col instanceof data_2.DataColumn) {
                    col.sortOrder = null;
                }
            });
        };
        DataGrid.prototype._getLastRow = function () {
            if (this._rows.length === 0) {
                return null;
            }
            var i = this._rows.length - 1, row = this._rows[i];
            while (row.isDeleted && i > 0) {
                i -= 1;
                row = this._rows[i];
            }
            return (row.isDeleted) ? null : row;
        };
        DataGrid.prototype._removeRow = function (row) {
            if (this._isRowExpanded(row)) {
                this.collapseDetails();
            }
            if (this._rows.length === 0) {
                return -1;
            }
            var rowkey = row.itemKey, i = utils.arr.remove(this._rows, row);
            try {
                if (i > -1) {
                    if (!row.getIsStateDirty()) {
                        row.dispose();
                    }
                }
            }
            finally {
                if (!!this._rowMap[rowkey]) {
                    delete this._rowMap[rowkey];
                }
            }
            return i;
        };
        DataGrid.prototype._expandDetails = function (parentRow, expanded) {
            if (!this._options.details) {
                return;
            }
            if (!this._details) {
                this._details = this._createDetails();
                this._fillSpace = this._createFillSpace();
            }
            var old = this._expandedRow;
            if (old === parentRow && (!!old && expanded)) {
                return;
            }
            this._expandedRow = null;
            this._details.parentRow = null;
            if (expanded) {
                this._expandedRow = parentRow;
                this._details.parentRow = parentRow;
                this._expandedRow.expanderCell.toggleImage();
                this._fillSpace.attach();
            }
            else {
                this._expandedRow = null;
                this._details.parentRow = null;
                if (!!old) {
                    old.expanderCell.toggleImage();
                }
                this._fillSpace.detach();
                this._fillSpace.height = 0;
            }
            if (old !== parentRow && !!old) {
                old.expanderCell.toggleImage();
            }
            this.objEvents.raise("row_expanded", { collapsedRow: old, expandedRow: parentRow, isExpanded: expanded });
        };
        DataGrid.prototype._parseColumnAttr = function (columnAttr, contentAttr) {
            var defaultOp = {
                "type": "data",
                title: null,
                sortable: false,
                sortMemberName: null,
                content: null
            };
            var options;
            var tempOpts = parser.parseOptions(columnAttr);
            if (!tempOpts) {
                options = defaultOp;
            }
            else {
                options = extend(defaultOp, tempOpts);
            }
            if (!!contentAttr) {
                options.content = int_2.parseContentAttr(contentAttr);
                if (!options.sortMemberName && !!options.content.fieldName) {
                    options.sortMemberName = options.content.fieldName;
                }
            }
            return options;
        };
        DataGrid.prototype._findUndeleted = function (row, isUp) {
            if (!row) {
                return null;
            }
            if (!row.isDeleted) {
                return row;
            }
            var delIndex = this.rows.indexOf(row), len = this.rows.length;
            var i = delIndex;
            if (!isUp) {
                i -= 1;
                if (i >= 0) {
                    row = this.rows[i];
                }
                while (i >= 0 && row.isDeleted) {
                    i -= 1;
                    if (i >= 0) {
                        row = this.rows[i];
                    }
                }
                if (row.isDeleted) {
                    row = null;
                }
            }
            else {
                i += 1;
                if (i < len) {
                    row = this.rows[i];
                }
                while (i < len && row.isDeleted) {
                    i += 1;
                    if (i < len) {
                        row = this.rows[i];
                    }
                }
                if (row.isDeleted) {
                    row = null;
                }
            }
            return row;
        };
        DataGrid.prototype._updateTableDisplay = function () {
            if (!this._table) {
                return;
            }
            if (!this.dataSource || this.dataSource.count === 0) {
                this._table.style.visibility = "hidden";
            }
            else {
                this._table.style.visibility = "visible";
            }
        };
        DataGrid.prototype._getRefreshHandler = function (num, fn) {
            var _this = this;
            return function () {
                if (_this.getIsStateDirty() || _this._refreshCounter !== num) {
                    return;
                }
                fn();
            };
        };
        DataGrid.prototype._bindDS = function () {
            var _this = this;
            var self = this, ds = this.dataSource;
            if (!ds) {
                this._updateTableDisplay();
                return;
            }
            var oldCurrent = null;
            this._updateCurrent = function () {
                var coll = _this.dataSource;
                self._onDSCurrentChanged(oldCurrent, coll.currentItem);
                oldCurrent = coll.currentItem;
            };
            ds.addOnCollChanged(self._onDSCollectionChanged, self._uniqueID, self);
            ds.addOnCurrentChanged(function () {
                self._updateCurrent();
            }, self._uniqueID, self);
            ds.addOnBeginEdit(function (_, args) {
                self._onItemEdit(args.item, true, false);
            }, self._uniqueID);
            ds.addOnEndEdit(function (_, args) {
                self._onItemEdit(args.item, false, args.isCanceled);
            }, self._uniqueID);
            ds.addOnErrorsChanged(self._onDSErrorsChanged, self._uniqueID, self);
            ds.addOnStatusChanged(function (_, args) {
                self._onItemStatusChanged(args.item, args.oldStatus);
            }, self._uniqueID);
            ds.addOnItemAdded(self._onItemAdded, self._uniqueID, self);
            ds.addOnItemAdding(function () { return self.collapseDetails(); }, self._uniqueID);
        };
        DataGrid.prototype._unbindDS = function () {
            var self = this, ds = this.dataSource;
            this._updateTableDisplay();
            if (!ds) {
                return;
            }
            ds.objEvents.offNS(self._uniqueID);
        };
        DataGrid.prototype._clearGrid = function () {
            if (this._rows.length === 0) {
                return;
            }
            this.collapseDetails();
            var self = this, tbody = self._tBodyEl, newTbody = doc.createElement("tbody");
            this.table.replaceChild(newTbody, tbody);
            var rows = this._rows;
            this._rows = [];
            this._rowMap = Indexer();
            for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
                var row = rows_1[_i];
                row.isDetached = true;
                row.dispose();
            }
        };
        DataGrid.prototype._wrapTable = function () {
            var options = this._options;
            var wrapper = doc.createElement("div"), container = doc.createElement("div"), header = doc.createElement("div");
            dom.addClass([wrapper], "ria-table-wrap");
            dom.addClass([container], "ria-table-container");
            dom.addClass([header], "ria-table-header");
            if (options.wrapCss) {
                dom.addClass([wrapper], options.wrapCss);
            }
            if (options.containerCss) {
                dom.addClass([container], options.containerCss);
            }
            if (options.headerCss) {
                dom.addClass([header], options.headerCss);
            }
            dom.wrap(this.table, wrapper);
            dom.wrap(wrapper, container);
            dom.insertBefore(header, wrapper);
            dom.addClass([this._tHeadRow], "ria-col-info");
            this._wrapper = wrapper;
            this._header = header;
            this._contaner = container;
            bootstrapper_16.selectableProviderWeakMap.set(this._contaner, this);
        };
        DataGrid.prototype._unWrapTable = function () {
            if (!this._header) {
                return;
            }
            bootstrapper_16.selectableProviderWeakMap.delete(this._contaner);
            dom.removeNode(this._header);
            this._header = null;
            dom.unwrap(this.table);
            dom.unwrap(this.table);
            this._wrapper = null;
            this._contaner = null;
        };
        DataGrid.prototype._createColumns = function () {
            var self = this, headCells = this._tHeadCells, cellInfos = [];
            for (var _i = 0, headCells_1 = headCells; _i < headCells_1.length; _i++) {
                var th = headCells_1[_i];
                var attr = this._parseColumnAttr(th.getAttribute("data-column"), th.getAttribute("data-content"));
                cellInfos.push({ th: th, colInfo: attr });
            }
            for (var _a = 0, cellInfos_1 = cellInfos; _a < cellInfos_1.length; _a++) {
                var cellInfo = cellInfos_1[_a];
                var col = self._createColumn(cellInfo);
                if (!!col) {
                    self._columns.push(col);
                }
            }
            self.updateColumnsSize();
        };
        DataGrid.prototype._createColumn = function (cellInfo) {
            var col;
            switch (cellInfo.colInfo.type) {
                case "row_expander":
                    if (!this._expanderCol) {
                        col = new expander_3.ExpanderColumn(this, cellInfo);
                        this._expanderCol = col;
                    }
                    break;
                case "row_actions":
                    if (!this._actionsCol) {
                        col = new actions_3.ActionsColumn(this, cellInfo);
                        this._actionsCol = col;
                    }
                    break;
                case "row_selector":
                    if (!this._rowSelectorCol) {
                        col = new rowselector_3.RowSelectorColumn(this, cellInfo);
                        this._rowSelectorCol = col;
                    }
                    break;
                case "data":
                    col = new data_2.DataColumn(this, cellInfo);
                    break;
                default:
                    throw new Error(format(jriapp_shared_29.LocaleERRS.ERR_GRID_COLTYPE_INVALID, cellInfo.colInfo.type));
            }
            return col;
        };
        DataGrid.prototype._appendItems = function (newItems) {
            var self = this, tbody = this._tBodyEl;
            var isPrepend = self.options.isPrependAllRows;
            var isPrependNew = self.options.isPrependNewRows;
            if (newItems.length === 1) {
                var item = newItems[0];
                if (!self._rowMap[item._key]) {
                    isPrepend = isPrepend || (isPrependNew && item._aspect.isNew);
                    self._createRowForItem(tbody, item, isPrepend);
                }
            }
            else {
                var docFr = doc.createDocumentFragment();
                for (var _i = 0, newItems_1 = newItems; _i < newItems_1.length; _i++) {
                    var item = newItems_1[_i];
                    if (!self._rowMap[item._key]) {
                        self._createRowForItem(docFr, item, (isPrependNew && item._aspect.isNew));
                    }
                }
                self._addNodeToParent(tbody, docFr, isPrepend);
            }
            self._onRefresh({});
            self.updateColumnsSize();
        };
        DataGrid.prototype._refresh = function (isPageChanged) {
            var self = this, ds = this.dataSource;
            if (!ds || self.getIsStateDirty()) {
                return;
            }
            this._clearGrid();
            var docFr = doc.createDocumentFragment(), oldTbody = this._tBodyEl, newTbody = doc.createElement("tbody");
            for (var _i = 0, _a = ds.items; _i < _a.length; _i++) {
                var item = _a[_i];
                self._createRowForItem(docFr, item, false);
            }
            newTbody.appendChild(docFr);
            self.table.replaceChild(newTbody, oldTbody);
            if (isPageChanged) {
                self._onPageChanged();
            }
            if (self.isUseScrollInto) {
                self.scrollToCurrent();
            }
            self.updateColumnsSize();
            self._updateTableDisplay();
            self._updateCurrent();
            self._onRefresh({});
        };
        DataGrid.prototype._addNodeToParent = function (parent, node, prepend) {
            if (!prepend) {
                dom.append(parent, [node]);
            }
            else {
                dom.prepend(parent, node);
            }
        };
        DataGrid.prototype._createRowForItem = function (parent, item, prepend) {
            var self = this, gridRow = new row_1.Row(self, { item: item });
            self._rowMap[item._key] = gridRow;
            if (!prepend) {
                self._rows.push(gridRow);
            }
            else {
                self._rows.unshift(gridRow);
            }
            self._addNodeToParent(parent, gridRow.tr, prepend);
            return gridRow;
        };
        DataGrid.prototype._createDetails = function () {
            var detailsId = this._options.details.templateID;
            return new details_2.DetailsRow({ grid: this, details_id: detailsId });
        };
        DataGrid.prototype._createFillSpace = function () {
            return new fillspace_2.FillSpaceRow({ grid: this });
        };
        DataGrid.prototype._scrollTo = function (yPos, animate) {
            if (animate) {
                jquery_5.$(this._wrapper).animate({
                    scrollTop: yPos
                }, {
                    duration: 500,
                    specialEasing: {
                        width: "linear",
                        height: "easeOutBounce"
                    }
                });
            }
            else {
                this._wrapper.scrollTop = yPos;
            }
        };
        DataGrid.prototype.setDataSource = function (v) {
            var _this = this;
            this._unbindDS();
            this._options.dataSource = v;
            var fn_resetDS = function () {
                var ds = _this.dataSource;
                if (!!ds && !ds.getIsStateDirty()) {
                    _this._updateContentOptions();
                    _this._bindDS();
                    _this._refresh(false);
                }
                else {
                    _this._clearGrid();
                }
            };
            if (!!this._options.syncSetDatasource) {
                fn_resetDS();
            }
            else {
                this._dsDebounce.enque(fn_resetDS);
            }
        };
        DataGrid.prototype._getInternal = function () {
            return this._internal;
        };
        DataGrid.prototype.updateColumnsSize = function () {
            if (this.getIsStateDirty()) {
                return;
            }
            var width = 0;
            var header = this._header;
            for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
                var col = _a[_i];
                width += col.width;
            }
            header.style.width = (width + "px");
            for (var _b = 0, _c = this._columns; _b < _c.length; _b++) {
                var col = _c[_b];
                col.updateWidth();
            }
        };
        DataGrid.prototype.sortByColumn = function (column) {
            var ds = this.dataSource;
            if (!ds) {
                return utils.async.reject("DataGrid's datasource is not set");
            }
            var sorts = column.sortMemberName.split(";");
            var promise = ds.sort(sorts, column.sortOrder);
            return promise;
        };
        DataGrid.prototype.selectRows = function (isSelect) {
            for (var _i = 0, _a = this._rows; _i < _a.length; _i++) {
                var row = _a[_i];
                var cell = row.rowSelectorCell;
                if (!row.isDeleted && (!cell || !cell.isDisabled)) {
                    row.isSelected = isSelect;
                }
            }
        };
        DataGrid.prototype.findRowByItem = function (item) {
            var row = this._rowMap[item._key];
            return (!row) ? null : row;
        };
        DataGrid.prototype.collapseDetails = function () {
            if (!this._details) {
                return;
            }
            var old = this._expandedRow;
            if (!!old) {
                this._expandDetails(old, false);
            }
        };
        DataGrid.prototype.getSelectedRows = function () {
            var res = [];
            for (var _i = 0, _a = this._rows; _i < _a.length; _i++) {
                var row = _a[_i];
                if (!row.isDeleted) {
                    if (row.isSelected) {
                        res.push(row);
                    }
                }
            }
            return res;
        };
        DataGrid.prototype.showEditDialog = function () {
            if (!this.isHasEditor || !this._editingRow) {
                return false;
            }
            var dialogOptions;
            var item = this._editingRow.item;
            if (!item._aspect.isEditing) {
                item._aspect.beginEdit();
            }
            if (!this._dialog) {
                dialogOptions = extend({
                    dataContext: item,
                    templateID: null
                }, this._options.editor);
                this._dialog = new dialog_1.DataEditDialog(dialogOptions);
            }
            else {
                this._dialog.dataContext = item;
            }
            this._dialog.canRefresh = !!this.dataSource.permissions.canRefreshRow && !item._aspect.isNew;
            this._dialog.show();
            return true;
        };
        DataGrid.prototype.scrollToRow = function (args) {
            if (!args || !args.row) {
                return;
            }
            var row = args.row, viewport = this._wrapper;
            if (!!this._fillSpace) {
                this._fillSpace.height = 0;
            }
            var animate = !!args.animate, alignBottom = (args.pos === 1), viewPortHeight = viewport.clientHeight, viewportRect = viewport.getBoundingClientRect(), rowHeight = row.height, currentScrollTop = viewport.scrollTop;
            var offsetDiff = currentScrollTop + row.rect.top - viewportRect.top;
            if (alignBottom) {
                offsetDiff = Math.floor(offsetDiff + 1);
            }
            else {
                offsetDiff = Math.floor(offsetDiff - 1);
            }
            var contentHeight = rowHeight;
            if (row.isExpanded) {
                contentHeight = contentHeight + this._details.height;
            }
            contentHeight = Math.min(viewPortHeight, contentHeight);
            var yOffset = viewPortHeight - contentHeight;
            var yPos = offsetDiff, deltaY = 0;
            if (alignBottom) {
                yPos -= yOffset;
            }
            var maxScrollTop = this.table.offsetHeight - viewPortHeight + 1;
            if (yPos < 0) {
                yPos = 0;
            }
            else if (yPos > maxScrollTop) {
                deltaY = yPos - maxScrollTop;
            }
            if (!!this._fillSpace) {
                this._fillSpace.height = deltaY;
            }
            if ((args.pos !== 2) && (currentScrollTop < offsetDiff && currentScrollTop > (offsetDiff - yOffset))) {
                return;
            }
            this._scrollTo(yPos, animate);
        };
        DataGrid.prototype.scrollToCurrent = function (pos, animate) {
            var _this = this;
            this._scrollDebounce.enque(function () {
                _this.scrollToRow({ row: _this.currentRow, animate: animate, pos: pos });
            });
        };
        DataGrid.prototype.focus = function () {
            this.scrollToCurrent(0);
            boot.selectedControl = this;
        };
        DataGrid.prototype.addNew = function () {
            var ds = this.dataSource;
            try {
                ds.addNew();
                this.showEditDialog();
            }
            catch (ex) {
                ERROR.reThrow(ex, this.handleError(ex, this));
            }
        };
        DataGrid.prototype.addOnRowExpanded = function (fn, nmspace, context) {
            this.objEvents.on("row_expanded", fn, nmspace, context);
        };
        DataGrid.prototype.offOnRowExpanded = function (nmspace) {
            this.objEvents.off("row_expanded", nmspace);
        };
        DataGrid.prototype.addOnRowSelected = function (fn, nmspace, context) {
            this.objEvents.on("row_selected", fn, nmspace, context);
        };
        DataGrid.prototype.offOnRowSelected = function (nmspace) {
            this.objEvents.off("row_selected", nmspace);
        };
        DataGrid.prototype.addOnPageChanged = function (fn, nmspace, context) {
            this.objEvents.on("page_changed", fn, nmspace, context);
        };
        DataGrid.prototype.offOnPageChanged = function (nmspace) {
            this.objEvents.off("page_changed", nmspace);
        };
        DataGrid.prototype.addOnRefresh = function (fn, nmspace, context) {
            var _this = this;
            this.objEvents.on("refresh", fn, nmspace, context);
            utils.async.getTaskQueue().enque(this._getRefreshHandler(this._refreshCounter, function () { return fn(_this, {}); }));
        };
        DataGrid.prototype.offOnRefresh = function (nmspace) {
            this.objEvents.off("refresh", nmspace);
        };
        DataGrid.prototype.addOnRowStateChanged = function (fn, nmspace, context) {
            this.objEvents.on("row_state_changed", fn, nmspace, context);
        };
        DataGrid.prototype.offOnRowStateChanged = function (nmspace) {
            this.objEvents.off("row_state_changed", nmspace);
        };
        DataGrid.prototype.addOnCellDblClicked = function (fn, nmspace, context) {
            this.objEvents.on("cell_dblclicked", fn, nmspace, context);
        };
        DataGrid.prototype.offOnCellDblClicked = function (nmspace) {
            this.objEvents.off("cell_dblclicked", nmspace);
        };
        DataGrid.prototype.addOnRowAction = function (fn, nmspace, context) {
            this.objEvents.on("row_action", fn, nmspace, context);
        };
        DataGrid.prototype.offOnRowAction = function (nmspace) {
            this.objEvents.off("row_action", nmspace);
        };
        Object.defineProperty(DataGrid.prototype, "selectable", {
            get: function () {
                return this._selectable;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "table", {
            get: function () {
                return this._table;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "options", {
            get: function () {
                return this._options;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "_tBodyEl", {
            get: function () {
                return this.table.tBodies[0];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "_tHeadEl", {
            get: function () {
                return this.table.tHead;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "_tFootEl", {
            get: function () {
                return this.table.tFoot;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "_tHeadRow", {
            get: function () {
                if (!this._tHeadEl) {
                    return null;
                }
                var trs = this._tHeadEl.rows;
                if (trs.length === 0) {
                    return null;
                }
                return trs[0];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "_tHeadCells", {
            get: function () {
                var row = this._tHeadRow;
                return (!row) ? [] : utils.arr.fromList(row.cells);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "uniqueID", {
            get: function () {
                return this._uniqueID;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "name", {
            get: function () {
                return this._name;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "dataSource", {
            get: function () {
                return this._options.dataSource;
            },
            set: function (v) {
                if (v !== this.dataSource) {
                    this.setDataSource(v);
                    this.objEvents.raiseProp("dataSource");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "rows", {
            get: function () {
                return this._rows;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "columns", {
            get: function () {
                return this._columns;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "rowSelectorCol", {
            get: function () {
                return this._rowSelectorCol;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "currentItem", {
            get: function () {
                var ds = this.dataSource;
                return (!ds) ? null : ds.currentItem;
            },
            set: function (item) {
                var ds = this.dataSource;
                if (!ds) {
                    return;
                }
                ds.currentItem = item;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "currentRow", {
            get: function () {
                var cur = this.currentItem;
                return (!cur) ? null : this._rowMap[cur._key];
            },
            set: function (row) {
                if (!!row && !row.getIsStateDirty()) {
                    if (row.item !== this.currentItem) {
                        this.currentItem = row.item;
                    }
                }
                else {
                    this.currentItem = null;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "editingRow", {
            get: function () {
                return this._editingRow;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "isHasEditor", {
            get: function () {
                return (!!this._options.editor && !!this._options.editor.templateID);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "isCanEdit", {
            get: function () {
                if (this._options.isCanEdit !== null) {
                    return this._options.isCanEdit;
                }
                var ds = this.dataSource;
                return !!ds && ds.permissions.canEditRow;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "isCanDelete", {
            get: function () {
                if (this._options.isCanDelete !== null) {
                    return this._options.isCanDelete;
                }
                var ds = this.dataSource;
                return !!ds && ds.permissions.canDeleteRow;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "isCanAddNew", {
            get: function () {
                var ds = this.dataSource;
                return !!ds && ds.permissions.canAddRow;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "isUseScrollInto", {
            get: function () {
                return this._options.isUseScrollInto;
            },
            set: function (v) {
                this._options.isUseScrollInto = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "syncSetDatasource", {
            get: function () {
                return this._options.syncSetDatasource;
            },
            set: function (v) {
                this._options.syncSetDatasource = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGrid.prototype, "animation", {
            get: function () {
                if (!this.options.animation) {
                    this.options.animation = new animation_1.DefaultAnimation();
                }
                return this.options.animation;
            },
            enumerable: false,
            configurable: true
        });
        return DataGrid;
    }(jriapp_shared_29.BaseObject));
    exports.DataGrid = DataGrid;
    var DataGridElView = (function (_super) {
        __extends(DataGridElView, _super);
        function DataGridElView(table, options) {
            var _this = _super.call(this, table, options) || this;
            _this._stateProvider = null;
            _this._stateDebounce = new jriapp_shared_29.Debounce();
            _this._grid = new DataGrid(table, options);
            _this._bindGridEvents();
            return _this;
        }
        DataGridElView.prototype.toString = function () {
            return "DataGridElView";
        };
        DataGridElView.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._stateDebounce.dispose();
            if (!this._grid.getIsStateDirty()) {
                this._grid.dispose();
            }
            this._stateProvider = null;
            _super.prototype.dispose.call(this);
        };
        DataGridElView.prototype._bindGridEvents = function () {
            var self = this;
            this._grid.addOnRowStateChanged(function (_, args) {
                if (!!self._stateProvider) {
                    args.css = self._stateProvider.getCSS(args.row.item, args.val);
                }
            }, this.uniqueID);
            self._grid.objEvents.onProp("*", function (_, args) {
                switch (args.property) {
                    case "dataSource":
                        self.objEvents.raiseProp(args.property);
                        break;
                }
            }, self.uniqueID);
        };
        DataGridElView.prototype._setErrors = function (_el, _errors) {
        };
        Object.defineProperty(DataGridElView.prototype, "dataSource", {
            get: function () {
                return this.grid.dataSource;
            },
            set: function (v) {
                this.grid.dataSource = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGridElView.prototype, "grid", {
            get: function () {
                return this._grid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGridElView.prototype, "stateProvider", {
            get: function () {
                return this._stateProvider;
            },
            set: function (v) {
                var _this = this;
                if (v !== this._stateProvider) {
                    this._stateProvider = v;
                    this._stateDebounce.enque(function () {
                        if (!_this._grid || _this._grid.getIsStateDirty()) {
                            return;
                        }
                        for (var _i = 0, _a = _this._grid.rows; _i < _a.length; _i++) {
                            var row = _a[_i];
                            row.updateUIState();
                        }
                    });
                    this.objEvents.raiseProp("stateProvider");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGridElView.prototype, "animation", {
            get: function () {
                return this._grid.options.animation;
            },
            set: function (v) {
                if (this.animation !== v) {
                    this._grid.options.animation = v;
                    this.objEvents.raiseProp("animation");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataGridElView.prototype, "selectable", {
            get: function () {
                return this._grid.selectable;
            },
            enumerable: false,
            configurable: true
        });
        return DataGridElView;
    }(baseview_6.BaseElView));
    exports.DataGridElView = DataGridElView;
    boot.registerElView("table", DataGridElView);
    boot.registerElView("datagrid", DataGridElView);
});
define("jriapp_ui/pager", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp_ui/baseview", "jriapp_ui/baseview", "jriapp/bootstrapper"], function (require, exports, jriapp_shared_30, dom_30, baseview_7, baseview_8, bootstrapper_17) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PagerElView = exports.Pager = void 0;
    var utils = jriapp_shared_30.Utils, dom = dom_30.DomUtils, doc = dom.document, sys = utils.sys, format = utils.str.format, _a = utils.core, getNewID = _a.getNewID, extend = _a.extend, boot = bootstrapper_17.bootstrapper;
    var _STRS = jriapp_shared_30.LocaleSTRS.PAGER;
    var css;
    (function (css) {
        css["interval"] = "ria-pager-interval";
        css["pager"] = "ria-pager";
        css["info"] = "ria-pager-info";
        css["page"] = "ria-pager-page";
        css["currentPage"] = "ria-pager-current-page";
        css["otherPage"] = "ria-pager-other-page";
    })(css || (css = {}));
    function _removeToolTips(toolTips) {
        for (var _i = 0, toolTips_1 = toolTips; _i < toolTips_1.length; _i++) {
            var el = toolTips_1[_i];
            baseview_7.addToolTip(el, null);
        }
    }
    var Pager = (function (_super) {
        __extends(Pager, _super);
        function Pager(el, options) {
            var _this = _super.call(this) || this;
            options = extend({
                dataSource: null,
                showTip: true,
                showInfo: false,
                showNumbers: true,
                showPreviousAndNext: false,
                useSlider: true,
                hideOnSinglePage: true,
                sliderSize: 10
            }, options);
            var self = _this;
            _this._display = null;
            if (!!options.dataSource && !sys.isCollection(options.dataSource)) {
                throw new Error(jriapp_shared_30.LocaleERRS.ERR_PAGER_DATASRC_INVALID);
            }
            _this._options = options;
            options.sliderSize = options.sliderSize < 3 ? 3 : options.sliderSize;
            _this._el = el;
            _this._uniqueID = getNewID("pgr");
            _this._rowsPerPage = 0;
            _this._rowCount = 0;
            _this._currentPage = 1;
            _this._toolTips = [];
            _this._pageDebounce = new jriapp_shared_30.Debounce();
            _this._dsDebounce = new jriapp_shared_30.Debounce();
            dom.events.on(el, "click", function (e) {
                e.preventDefault();
                var a = e.target, page = parseInt(a.getAttribute("data-page"), 10);
                self._pageDebounce.enque(function () {
                    self.currentPage = page;
                    self._dsDebounce.enque(function () {
                        if (!!self.dataSource) {
                            self.dataSource.pageIndex = page - 1;
                        }
                    });
                });
            }, {
                nmspace: _this._uniqueID,
                matchElement: function (el) {
                    var attr = el.getAttribute("data-scope");
                    return self._uniqueID === attr;
                }
            });
            _this._bindDS();
            bootstrapper_17.selectableProviderWeakMap.set(el, _this);
            return _this;
        }
        Pager.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            bootstrapper_17.selectableProviderWeakMap.delete(this._el);
            this.parentControl = null;
            this._pageDebounce.dispose();
            this._dsDebounce.dispose();
            this._unbindDS();
            this._clearContent();
            dom.events.offNS(this._el, this._uniqueID);
            this._el = null;
            this._options = {};
            _super.prototype.dispose.call(this);
        };
        Pager.prototype._addToolTip = function (el, tip) {
            baseview_7.addToolTip(el, tip);
            if (!!tip) {
                this._toolTips.push(el);
            }
        };
        Pager.prototype._createElement = function (tag) {
            return doc.createElement(tag);
        };
        Pager.prototype._clearContent = function () {
            this._el.innerHTML = "";
            _removeToolTips(this._toolTips);
            this._toolTips = [];
        };
        Pager.prototype.render = function () {
            var div = doc.createElement("div"), docFr = doc.createDocumentFragment(), oldToolTips = this._toolTips;
            this._toolTips = [];
            dom.addClass([div], "ria-pager");
            if (this.rowsPerPage <= 0) {
                return;
            }
            var rowCount = this.rowCount, currentPage = this.currentPage, pageCount = this.pageCount;
            if (rowCount > 0) {
                if (this.showPreviousAndNext && !(this.hideOnSinglePage && (pageCount === 1))) {
                    docFr.appendChild(this._createFirst());
                    docFr.appendChild(this._createPrevious());
                    docFr.appendChild(this._createCurrent());
                    docFr.appendChild(this._createNext());
                    docFr.appendChild(this._createLast());
                }
                if (this.showNumbers && currentPage > 0 && !(this.hideOnSinglePage && (pageCount === 1))) {
                    var sliderSize = this.sliderSize;
                    var start = 1, end = pageCount, half = void 0, above = void 0, below = void 0;
                    if (this.useSlider && (sliderSize > 0) && (sliderSize < (pageCount - 3))) {
                        half = Math.floor(((sliderSize - 1) / 2));
                        above = (currentPage + half) + ((sliderSize - 1) % 2);
                        below = (currentPage - half);
                        if (below < 1) {
                            above += (1 - below);
                            below = 1;
                        }
                        if (above > pageCount) {
                            below -= (above - pageCount);
                            if (below < 1) {
                                below = 1;
                            }
                            above = pageCount;
                        }
                        start = below;
                        end = above;
                    }
                    var _start = start === 1 ? 2 : start;
                    var _end = end === pageCount ? end - 1 : end;
                    if (1 === currentPage) {
                        docFr.appendChild(this._createCurrent());
                    }
                    else {
                        docFr.appendChild(this._createOther(1));
                    }
                    if (_start > 2) {
                        if (_start === 3) {
                            docFr.appendChild(this._createOther(2));
                        }
                        else {
                            docFr.appendChild(this._createInterval());
                        }
                    }
                    for (var i = _start; i <= _end; i++) {
                        if (i === currentPage) {
                            docFr.appendChild(this._createCurrent());
                        }
                        else {
                            docFr.appendChild(this._createOther(i));
                        }
                    }
                    if (_end < (pageCount - 1)) {
                        if (_end === (pageCount - 2)) {
                            docFr.appendChild(this._createOther(pageCount - 1));
                        }
                        else {
                            docFr.appendChild(this._createInterval());
                        }
                    }
                    if (pageCount === currentPage) {
                        docFr.appendChild(this._createCurrent());
                    }
                    else {
                        docFr.appendChild(this._createOther(pageCount));
                    }
                }
            }
            if (this.showInfo && rowCount > 0 && currentPage > 0) {
                var rowsPerPage = this.rowsPerPage, start = rowCount === 0 ? 0 : (((currentPage - 1) * rowsPerPage) + 1), end = rowCount === 0 ? 0 : ((currentPage === pageCount) ? rowCount : (currentPage * rowsPerPage));
                var span = this._createElement("span");
                var info = format(_STRS.pageInfo, start, end, rowCount);
                dom.addClass([span], "ria-pager-info");
                span.innerHTML = info;
                var spacer = this._createElement("span");
                spacer.innerHTML = "&nbsp;&nbsp;";
                docFr.appendChild(spacer);
                docFr.appendChild(span);
            }
            div.appendChild(docFr);
            var old = this._el.firstChild;
            if (!old) {
                this._el.appendChild(div);
            }
            else {
                this._el.replaceChild(div, this._el.firstChild);
            }
            _removeToolTips(oldToolTips);
        };
        Pager.prototype._onPageSizeChanged = function (ds) {
            this.rowsPerPage = ds.pageSize;
        };
        Pager.prototype._onPageIndexChanged = function (ds) {
            this.currentPage = ds.pageIndex + 1;
        };
        Pager.prototype._onTotalCountChanged = function (ds) {
            this.rowCount = ds.totalCount;
        };
        Pager.prototype._bindDS = function () {
            var self = this, ds = this.dataSource;
            if (!ds) {
                return;
            }
            ds.addOnCollChanged(function (_, args) {
                switch (args.changeType) {
                    case 2:
                        {
                            if (args.reason !== 1) {
                                self._reset();
                            }
                        }
                        break;
                }
            }, self._uniqueID);
            ds.addOnPageIndexChanged(self._onPageIndexChanged, self._uniqueID, self);
            ds.addOnPageSizeChanged(self._onPageSizeChanged, self._uniqueID, self);
            ds.addOnTotalCountChanged(self._onTotalCountChanged, self._uniqueID, self);
            this._reset();
        };
        Pager.prototype._unbindDS = function () {
            var self = this, ds = this.dataSource;
            if (!ds) {
                return;
            }
            ds.objEvents.offNS(self._uniqueID);
        };
        Pager.prototype._reset = function () {
            var ds = this.dataSource;
            if (!ds) {
                this._currentPage = 1;
                this._rowsPerPage = 100;
                this._rowCount = 0;
                this.render();
                return;
            }
            this._currentPage = ds.pageIndex + 1;
            this._rowsPerPage = ds.pageSize;
            this._rowCount = ds.totalCount;
            this.render();
        };
        Pager.prototype._createLink = function (text) {
            var a = this._createElement("a");
            a.textContent = ("" + text);
            a.setAttribute("href", "javascript:void(0)");
            return a;
        };
        Pager.prototype._addScope = function (el, page) {
            el.setAttribute("data-scope", this._uniqueID);
            el.setAttribute("data-page", "" + page);
        };
        Pager.prototype._createFirst = function () {
            var span = this._createElement("span");
            if (this.showTip) {
                var tip = _STRS.firstPageTip;
                this._addToolTip(span, tip);
            }
            var a = this._createLink(_STRS.firstText);
            dom.addClass([span], "ria-pager-page");
            dom.addClass([span], "ria-pager-other-page");
            span.appendChild(a);
            this._addScope(span, 1);
            return span;
        };
        Pager.prototype._createPrevious = function () {
            var span = this._createElement("span");
            var previousPage = this.currentPage - 1;
            if (previousPage < 1) {
                previousPage = 1;
            }
            if (this.showTip) {
                var tip = format(_STRS.prevPageTip, previousPage);
                this._addToolTip(span, tip);
            }
            var a = this._createLink(_STRS.previousText);
            dom.addClass([span], "ria-pager-page");
            dom.addClass([span], "ria-pager-other-page");
            span.appendChild(a);
            this._addScope(span, previousPage);
            return span;
        };
        Pager.prototype._createCurrent = function () {
            var span = this._createElement("span"), currentPage = this.currentPage;
            span.textContent = ("" + currentPage);
            if (this.showTip) {
                this._addToolTip(span, this._buildTip(currentPage));
            }
            dom.addClass([span], "ria-pager-page");
            dom.addClass([span], "ria-pager-current-page");
            return span;
        };
        Pager.prototype._createInterval = function () {
            var span = this._createElement("span");
            dom.addClass([span], "ria-pager-interval");
            span.textContent = ("...");
            return span;
        };
        Pager.prototype._createOther = function (page) {
            var span = this._createElement("span");
            if (this.showTip) {
                var tip = this._buildTip(page);
                this._addToolTip(span, tip);
            }
            var a = this._createLink("" + page);
            dom.addClass([span], "ria-pager-page");
            dom.addClass([span], "ria-pager-other-page");
            span.appendChild(a);
            this._addScope(span, page);
            return span;
        };
        Pager.prototype._createNext = function () {
            var span = this._createElement("span"), pageCount = this.pageCount;
            var nextPage = this.currentPage + 1;
            if (nextPage > pageCount) {
                nextPage = pageCount;
            }
            if (this.showTip) {
                var tip = format(_STRS.nextPageTip, nextPage);
                this._addToolTip(span, tip);
            }
            var a = this._createLink(_STRS.nextText);
            dom.addClass([span], "ria-pager-page");
            dom.addClass([span], "ria-pager-other-page");
            span.appendChild(a);
            this._addScope(span, nextPage);
            return span;
        };
        Pager.prototype._createLast = function () {
            var span = this._createElement("span");
            if (this.showTip) {
                var tip = _STRS.lastPageTip;
                this._addToolTip(span, tip);
            }
            var a = this._createLink(_STRS.lastText);
            dom.addClass([span], "ria-pager-page");
            dom.addClass([span], "ria-pager-other-page");
            span.appendChild(a);
            this._addScope(span, this.pageCount);
            return span;
        };
        Pager.prototype._buildTip = function (page) {
            var rowsPerPage = this.rowsPerPage, rowCount = this.rowCount, start = (((page - 1) * rowsPerPage) + 1), end = (page === this.pageCount) ? rowCount : (page * rowsPerPage);
            var tip = "";
            if (page === this.currentPage) {
                tip = format(_STRS.showingTip, start, end, rowCount);
            }
            else {
                tip = format(_STRS.showTip, start, end, rowCount);
            }
            return tip;
        };
        Pager.prototype.setDataSource = function (v) {
            this._unbindDS();
            this._options.dataSource = v;
            this._bindDS();
        };
        Pager.prototype.toString = function () {
            return "Pager";
        };
        Object.defineProperty(Pager.prototype, "el", {
            get: function () {
                return this._el;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pager.prototype, "dataSource", {
            get: function () {
                return this._options.dataSource;
            },
            set: function (v) {
                if (v !== this.dataSource) {
                    this.setDataSource(v);
                    this.objEvents.raiseProp("dataSource");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pager.prototype, "pageCount", {
            get: function () {
                var rowCount = this.rowCount, rowsPerPage = this.rowsPerPage;
                var result;
                if ((rowCount === 0) || (rowsPerPage === 0)) {
                    return 0;
                }
                if ((rowCount % rowsPerPage) === 0) {
                    return (rowCount / rowsPerPage);
                }
                else {
                    result = (rowCount / rowsPerPage);
                    result = Math.floor(result) + 1;
                    return result;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pager.prototype, "rowCount", {
            get: function () {
                return this._rowCount;
            },
            set: function (v) {
                if (this._rowCount !== v) {
                    this._rowCount = v;
                    this.render();
                    this.objEvents.raiseProp("rowCount");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pager.prototype, "rowsPerPage", {
            get: function () {
                return this._rowsPerPage;
            },
            set: function (v) {
                if (this._rowsPerPage !== v) {
                    this._rowsPerPage = v;
                    this.render();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pager.prototype, "currentPage", {
            get: function () {
                return this._currentPage;
            },
            set: function (v) {
                if (this._currentPage !== v) {
                    this._currentPage = v;
                    this.render();
                    this.objEvents.raiseProp("currentPage");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pager.prototype, "useSlider", {
            get: function () {
                return this._options.useSlider;
            },
            set: function (v) {
                if (this.useSlider !== v) {
                    this._options.useSlider = v;
                    this.render();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pager.prototype, "sliderSize", {
            get: function () {
                return this._options.sliderSize;
            },
            set: function (v) {
                if (this.sliderSize !== v) {
                    this._options.sliderSize = v;
                    this.render();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pager.prototype, "hideOnSinglePage", {
            get: function () {
                return this._options.hideOnSinglePage;
            },
            set: function (v) {
                if (this.hideOnSinglePage !== v) {
                    this._options.hideOnSinglePage = v;
                    this.render();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pager.prototype, "showTip", {
            get: function () {
                return this._options.showTip;
            },
            set: function (v) {
                if (this.showTip !== v) {
                    this._options.showTip = v;
                    this.render();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pager.prototype, "showInfo", {
            get: function () {
                return this._options.showInfo;
            },
            set: function (v) {
                if (this._options.showInfo !== v) {
                    this._options.showInfo = v;
                    this.render();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pager.prototype, "showPreviousAndNext", {
            get: function () {
                return this._options.showPreviousAndNext;
            },
            set: function (v) {
                if (this.showPreviousAndNext !== v) {
                    this._options.showPreviousAndNext = v;
                    this.render();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pager.prototype, "showNumbers", {
            get: function () {
                return this._options.showNumbers;
            },
            set: function (v) {
                if (this.showNumbers !== v) {
                    this._options.showNumbers = v;
                    this.render();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pager.prototype, "isVisible", {
            get: function () {
                var v = this.el.style.display;
                return !(v === "none");
            },
            set: function (v) {
                v = !!v;
                if (v !== this.isVisible) {
                    if (!v) {
                        this._display = this.el.style.display;
                        if (this._display === "none") {
                            this._display = null;
                        }
                        this.el.style.display = "none";
                    }
                    else {
                        this.el.style.display = (!this._display ? "" : this._display);
                    }
                    this.objEvents.raiseProp("isVisible");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pager.prototype, "selectable", {
            get: function () {
                return !this._parentControl ? null : this._parentControl.selectable;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pager.prototype, "parentControl", {
            get: function () {
                return this._parentControl;
            },
            set: function (v) {
                if (this._parentControl !== v) {
                    this._parentControl = v;
                    this.objEvents.raiseProp("parentControl");
                }
            },
            enumerable: false,
            configurable: true
        });
        return Pager;
    }(jriapp_shared_30.BaseObject));
    exports.Pager = Pager;
    var PagerElView = (function (_super) {
        __extends(PagerElView, _super);
        function PagerElView(el, options) {
            var _this = _super.call(this, el, options) || this;
            var self = _this;
            _this._pager = new Pager(el, options);
            self._pager.objEvents.onProp("*", function (_, args) {
                switch (args.property) {
                    case "dataSource":
                    case "parentControl":
                        self.objEvents.raiseProp(args.property);
                        break;
                }
            }, self.uniqueID);
            return _this;
        }
        PagerElView.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            if (!this._pager.getIsStateDirty()) {
                this._pager.dispose();
            }
            _super.prototype.dispose.call(this);
        };
        PagerElView.prototype._setErrors = function (_el, _errors) {
        };
        PagerElView.prototype.toString = function () {
            return "PagerElView";
        };
        Object.defineProperty(PagerElView.prototype, "dataSource", {
            get: function () {
                return this._pager.dataSource;
            },
            set: function (v) {
                this._pager.dataSource = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PagerElView.prototype, "pager", {
            get: function () {
                return this._pager;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PagerElView.prototype, "selectable", {
            get: function () {
                return this._pager.selectable;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PagerElView.prototype, "parentControl", {
            get: function () {
                return this._pager.parentControl;
            },
            set: function (v) {
                this._pager.parentControl = v;
            },
            enumerable: false,
            configurable: true
        });
        return PagerElView;
    }(baseview_8.BaseElView));
    exports.PagerElView = PagerElView;
    boot.registerElView("pager", PagerElView);
});
define("jriapp_ui/stackpanel", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp/template", "jriapp_ui/baseview", "jriapp/bootstrapper"], function (require, exports, jriapp_shared_31, dom_31, template_7, baseview_9, bootstrapper_18) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StackPanelElView = exports.StackPanel = void 0;
    var utils = jriapp_shared_31.Utils, dom = dom_31.DomUtils, doc = dom.document, sys = utils.sys, format = utils.str.format, _a = utils.core, getNewID = _a.getNewID, extend = _a.extend, Indexer = _a.Indexer, boot = bootstrapper_18.bootstrapper;
    var css;
    (function (css) {
        css["stackpanel"] = "ria-stackpanel";
        css["item"] = "ria-stackpanel-item";
        css["horizontal"] = "ria-horizontal-panel";
        css["currentItem"] = "ria-current-item";
        css["itemDeleted"] = "ria-item-deleted";
    })(css || (css = {}));
    var ORIENTATION;
    (function (ORIENTATION) {
        ORIENTATION["VERTICAL"] = "vertical";
        ORIENTATION["HORIZONTAL"] = "horizontal";
    })(ORIENTATION || (ORIENTATION = {}));
    var PNL_EVENTS;
    (function (PNL_EVENTS) {
        PNL_EVENTS["item_clicked"] = "item_clicked";
    })(PNL_EVENTS || (PNL_EVENTS = {}));
    var StackPanel = (function (_super) {
        __extends(StackPanel, _super);
        function StackPanel(el, options) {
            var _this = _super.call(this) || this;
            var self = _this;
            options = extend({
                el: null,
                dataSource: null,
                templateID: null,
                orientation: "vertical",
                syncSetDatasource: false
            }, options);
            if (!!options.dataSource && !sys.isCollection(options.dataSource)) {
                throw new Error(jriapp_shared_31.LocaleERRS.ERR_STACKPNL_DATASRC_INVALID);
            }
            if (!options.templateID) {
                throw new Error(jriapp_shared_31.LocaleERRS.ERR_STACKPNL_TEMPLATE_INVALID);
            }
            _this._options = options;
            _this._el = el;
            dom.addClass([el], "ria-stackpanel");
            var eltag = el.tagName.toLowerCase();
            _this._itemTag = (eltag === "ul" || eltag === "ol") ? "li" : "div";
            if (_this.orientation === "horizontal") {
                dom.addClass([el], "ria-horizontal-panel");
            }
            _this._debounce = new jriapp_shared_31.Debounce();
            _this._uniqueID = getNewID("pnl");
            _this._isKeyNavigation = false;
            _this._currentItem = null;
            _this._itemMap = Indexer();
            _this._selectable = {
                onKeyDown: function (key, event) {
                    self._onKeyDown(key, event);
                },
                onKeyUp: function (key, event) {
                    self._onKeyUp(key, event);
                }
            };
            dom.events.on(el, "click", function (e) {
                var el = e.target, mappedItem = dom.getData(el, "data");
                self._onItemClicked(mappedItem.el, mappedItem.item);
            }, {
                nmspace: _this.uniqueID,
                matchElement: function (el) {
                    var attr = el.getAttribute("data-scope"), tag = el.tagName.toLowerCase();
                    return self.uniqueID === attr && tag === self._itemTag;
                }
            });
            bootstrapper_18.selectableProviderWeakMap.set(el, _this);
            var ds = _this._options.dataSource;
            _this.setDataSource(ds);
            return _this;
        }
        StackPanel.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            bootstrapper_18.selectableProviderWeakMap.delete(this._el);
            this._debounce.dispose();
            this._unbindDS();
            this._clearContent();
            dom.removeClass([this._el], "ria-stackpanel");
            if (this.orientation === "horizontal") {
                dom.removeClass([this.el], "ria-horizontal-panel");
            }
            dom.events.offNS(this._el, this.uniqueID);
            this._currentItem = null;
            this._itemMap = Indexer();
            this._options = Indexer();
            _super.prototype.dispose.call(this);
        };
        StackPanel.prototype._onKeyDown = function (key, event) {
            var ds = this.dataSource, self = this;
            if (!ds) {
                return;
            }
            if (this.orientation === "horizontal") {
                switch (key) {
                    case 37:
                        event.preventDefault();
                        this._isKeyNavigation = true;
                        if (ds.movePrev(true)) {
                            self.scrollToItem(ds.currentItem, true);
                        }
                        break;
                    case 39:
                        event.preventDefault();
                        this._isKeyNavigation = true;
                        if (ds.moveNext(true)) {
                            self.scrollToItem(ds.currentItem, false);
                        }
                        break;
                }
            }
            else {
                switch (key) {
                    case 38:
                        event.preventDefault();
                        this._isKeyNavigation = true;
                        if (ds.movePrev(true)) {
                            self.scrollToItem(ds.currentItem, true);
                        }
                        break;
                    case 40:
                        event.preventDefault();
                        this._isKeyNavigation = true;
                        if (ds.moveNext(true)) {
                            self.scrollToItem(ds.currentItem, false);
                        }
                        break;
                }
            }
            this._isKeyNavigation = false;
        };
        StackPanel.prototype._onKeyUp = function (_key, _event) {
        };
        StackPanel.prototype._updateCurrent = function (item, withScroll) {
            var self = this, old = self._currentItem;
            var mappedItem;
            if (old !== item) {
                this._currentItem = item;
                if (!!old) {
                    mappedItem = self._itemMap[old._key];
                    if (!!mappedItem) {
                        dom.removeClass([mappedItem.el], "ria-current-item");
                    }
                }
                if (!!item) {
                    mappedItem = self._itemMap[item._key];
                    if (!!mappedItem) {
                        dom.addClass([mappedItem.el], "ria-current-item");
                        if (withScroll && !this._isKeyNavigation) {
                            this.scrollToCurrent(false);
                        }
                    }
                }
                this.objEvents.raiseProp("currentItem");
            }
        };
        StackPanel.prototype._onDSCurrentChanged = function () {
            var ds = this.dataSource, cur = ds.currentItem;
            this._updateCurrent(cur, !!cur);
        };
        StackPanel.prototype._onDSCollectionChanged = function (_, args) {
            var self = this;
            switch (args.changeType) {
                case 2:
                    {
                        self._refresh();
                    }
                    break;
                case 1:
                    {
                        self._appendItems(args.items);
                    }
                    break;
                case 0:
                    {
                        for (var _i = 0, _a = args.items; _i < _a.length; _i++) {
                            var item = _a[_i];
                            self._removeItem(item);
                        }
                    }
                    break;
                case 3:
                    {
                        var mappedItem = self._itemMap[args.old_key];
                        if (!!mappedItem) {
                            delete self._itemMap[args.old_key];
                            self._itemMap[args.new_key] = mappedItem;
                        }
                    }
                    break;
                default:
                    throw new Error(format(jriapp_shared_31.LocaleERRS.ERR_COLLECTION_CHANGETYPE_INVALID, args.changeType));
            }
        };
        StackPanel.prototype._onItemStatusChanged = function (item, oldStatus) {
            var newStatus = item._aspect.status, obj = this._itemMap[item._key];
            if (!obj) {
                return;
            }
            if (newStatus === 3) {
                dom.addClass([obj.el], "ria-item-deleted");
            }
            else if (oldStatus === 3) {
                dom.removeClass([obj.el], "ria-item-deleted");
            }
        };
        StackPanel.prototype._createTemplate = function (item, parentEl) {
            var template = template_7.createTemplate({ parentEl: parentEl, dataContext: item });
            template.templateID = this.templateID;
            return template;
        };
        StackPanel.prototype._appendItems = function (newItems) {
            var self = this, docFr = doc.createDocumentFragment();
            newItems.forEach(function (item) {
                if (!!self._itemMap[item._key]) {
                    return;
                }
                self._appendItem(docFr, item);
            });
            self.el.appendChild(docFr);
        };
        StackPanel.prototype._appendItem = function (parent, item) {
            var self = this, itemElem = doc.createElement(this._itemTag);
            dom.addClass([itemElem], "ria-stackpanel-item");
            itemElem.setAttribute("data-scope", this.uniqueID);
            parent.appendChild(itemElem);
            var mappedItem = { el: itemElem, template: null, item: item };
            dom.setData(itemElem, "data", mappedItem);
            self._itemMap[item._key] = mappedItem;
            mappedItem.template = self._createTemplate(item, mappedItem.el);
        };
        StackPanel.prototype._bindDS = function () {
            var self = this, ds = this.dataSource;
            if (!ds) {
                return;
            }
            ds.addOnCollChanged(self._onDSCollectionChanged, self._uniqueID, self);
            ds.addOnCurrentChanged(self._onDSCurrentChanged, self._uniqueID, self);
            ds.addOnStatusChanged(function (_, args) {
                self._onItemStatusChanged(args.item, args.oldStatus);
            }, self._uniqueID);
        };
        StackPanel.prototype._unbindDS = function () {
            var self = this, ds = this.dataSource;
            if (!ds) {
                return;
            }
            ds.objEvents.offNS(self._uniqueID);
        };
        StackPanel.prototype._onItemClicked = function (_div, item) {
            this._updateCurrent(item, false);
            this.dataSource.currentItem = item;
            this.objEvents.raise("item_clicked", { item: item });
        };
        StackPanel.prototype._clearContent = function () {
            var self = this, keys = Object.keys(self._itemMap);
            if (keys.length === 0) {
                return;
            }
            self._el.innerHTML = "";
            for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
                var key = keys_2[_i];
                self._removeItemByKey(key);
            }
        };
        StackPanel.prototype._removeItemByKey = function (key) {
            var self = this, mappedItem = self._itemMap[key];
            if (!mappedItem) {
                return;
            }
            delete self._itemMap[key];
            mappedItem.template.dispose();
            mappedItem.template = null;
            dom.removeNode(mappedItem.el);
        };
        StackPanel.prototype._removeItem = function (item) {
            this._removeItemByKey(item._key);
        };
        StackPanel.prototype._refresh = function () {
            var ds = this.dataSource, self = this;
            this._clearContent();
            if (!ds) {
                return;
            }
            var docFr = doc.createDocumentFragment();
            for (var _i = 0, _a = ds.items; _i < _a.length; _i++) {
                var item = _a[_i];
                self._appendItem(docFr, item);
            }
            self.el.appendChild(docFr);
        };
        StackPanel.prototype.setDataSource = function (v) {
            var _this = this;
            this._unbindDS();
            this._options.dataSource = v;
            var fn_init = function () {
                var ds = _this._options.dataSource;
                if (!!ds && !ds.getIsStateDirty()) {
                    _this._bindDS();
                    _this._refresh();
                }
                else {
                    _this._clearContent();
                }
            };
            if (!!this._options.syncSetDatasource) {
                fn_init();
            }
            else {
                this._debounce.enque(fn_init);
            }
        };
        StackPanel.prototype.addOnItemClicked = function (fn, nmspace, context) {
            this.objEvents.on("item_clicked", fn, nmspace, context);
        };
        StackPanel.prototype.offOnItemClicked = function (nmspace) {
            this.objEvents.off("item_clicked", nmspace);
        };
        StackPanel.prototype.getDivElementByItem = function (item) {
            var mappedItem = this._itemMap[item._key];
            return (!mappedItem) ? null : mappedItem.el;
        };
        StackPanel.prototype.scrollToItem = function (item, isUp) {
            if (!item) {
                return;
            }
            var mappedItem = this._itemMap[item._key];
            if (!mappedItem) {
                return;
            }
            var isVert = this.orientation === "vertical", pnl = mappedItem.el, viewport = this._el, viewportRect = viewport.getBoundingClientRect(), pnlRect = pnl.getBoundingClientRect(), viewPortSize = isVert ? viewport.clientHeight : viewport.clientWidth, itemSize = isVert ? pnl.offsetHeight : pnl.offsetWidth, currentPos = isVert ? viewport.scrollTop : viewport.scrollLeft, offsetDiff = isVert ? (currentPos + pnlRect.top - viewportRect.top) : (currentPos + pnlRect.left - viewportRect.left);
            var contentSize = Math.min(itemSize, viewPortSize);
            var offset = viewPortSize - contentSize;
            var pos = !isUp ? Math.floor(offsetDiff - offset + 1) : Math.floor(offsetDiff - 1);
            if (pos < 0) {
                pos = 0;
            }
            if ((currentPos < offsetDiff && currentPos > (offsetDiff - offset))) {
                return;
            }
            if (isVert) {
                this._el.scrollTop = pos;
            }
            else {
                this._el.scrollLeft = pos;
            }
        };
        StackPanel.prototype.scrollToCurrent = function (isUp) {
            this.scrollToItem(this._currentItem, isUp);
        };
        StackPanel.prototype.focus = function () {
            this.scrollToCurrent(true);
            boot.selectedControl = this;
        };
        StackPanel.prototype.toString = function () {
            return "StackPanel";
        };
        Object.defineProperty(StackPanel.prototype, "selectable", {
            get: function () {
                return this._selectable;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StackPanel.prototype, "el", {
            get: function () {
                return this._el;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StackPanel.prototype, "uniqueID", {
            get: function () {
                return this._uniqueID;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StackPanel.prototype, "orientation", {
            get: function () {
                return this._options.orientation;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StackPanel.prototype, "templateID", {
            get: function () {
                return this._options.templateID;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StackPanel.prototype, "dataSource", {
            get: function () {
                return this._options.dataSource;
            },
            set: function (v) {
                if (v !== this.dataSource) {
                    this.setDataSource(v);
                    this.objEvents.raiseProp("dataSource");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StackPanel.prototype, "currentItem", {
            get: function () {
                return this._currentItem;
            },
            enumerable: false,
            configurable: true
        });
        return StackPanel;
    }(jriapp_shared_31.BaseObject));
    exports.StackPanel = StackPanel;
    var StackPanelElView = (function (_super) {
        __extends(StackPanelElView, _super);
        function StackPanelElView(el, options) {
            var _this = _super.call(this, el, options) || this;
            var self = _this;
            _this._panelEvents = null;
            _this._panel = new StackPanel(el, options);
            _this._panel.addOnItemClicked(function (_, args) {
                if (!!self._panelEvents) {
                    self._panelEvents.onItemClicked(args.item);
                }
            }, _this.uniqueID);
            _this._panel.objEvents.onProp("*", function (_, args) {
                switch (args.property) {
                    case "dataSource":
                        self.objEvents.raiseProp(args.property);
                        break;
                }
            }, self.uniqueID);
            return _this;
        }
        StackPanelElView.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            if (!this._panel.getIsStateDirty()) {
                this._panel.dispose();
            }
            this._panelEvents = null;
            _super.prototype.dispose.call(this);
        };
        StackPanelElView.prototype.toString = function () {
            return "StackPanelElView";
        };
        Object.defineProperty(StackPanelElView.prototype, "dataSource", {
            get: function () {
                return this._panel.dataSource;
            },
            set: function (v) {
                this._panel.dataSource = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StackPanelElView.prototype, "panelEvents", {
            get: function () {
                return this._panelEvents;
            },
            set: function (v) {
                var old = this._panelEvents;
                if (v !== old) {
                    this._panelEvents = v;
                    this.objEvents.raiseProp("panelEvents");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StackPanelElView.prototype, "panel", {
            get: function () {
                return this._panel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StackPanelElView.prototype, "selectable", {
            get: function () {
                return this._panel.selectable;
            },
            enumerable: false,
            configurable: true
        });
        return StackPanelElView;
    }(baseview_9.BaseElView));
    exports.StackPanelElView = StackPanelElView;
    boot.registerElView("stackpanel", StackPanelElView);
    boot.registerElView("ul", StackPanelElView);
    boot.registerElView("ol", StackPanelElView);
});
define("jriapp_ui/tabs", ["require", "exports", "jriapp_shared", "jriapp_ui/utils/jquery", "jriapp/bootstrapper", "jriapp_ui/baseview"], function (require, exports, jriapp_shared_32, jquery_6, bootstrapper_19, baseview_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TabsElView = void 0;
    var utils = jriapp_shared_32.Utils, coreUtils = utils.core;
    var TabsElView = (function (_super) {
        __extends(TabsElView, _super);
        function TabsElView(el, options) {
            var _this = _super.call(this, el, options) || this;
            _this._tabOpts = options;
            _this._tabsEvents = null;
            _this._tabsCreated = false;
            _this._createTabs();
            return _this;
        }
        TabsElView.prototype._createTabs = function () {
            var $el = jquery_6.$(this.el), self = this;
            var tabOpts = {
                activate: function () {
                    if (!!self._tabsEvents) {
                        self._tabsEvents.onTabSelected(self);
                    }
                    self.objEvents.raiseProp("tabIndex");
                }
            };
            tabOpts = coreUtils.extend(tabOpts, self._tabOpts);
            $el.tabs(tabOpts);
            utils.queue.enque(function () {
                if (self.getIsStateDirty()) {
                    return;
                }
                self._tabsCreated = true;
                self._onTabsCreated();
                self.objEvents.raiseProp("tabIndex");
            });
        };
        TabsElView.prototype._destroyTabs = function () {
            var $el = jquery_6.$(this.el);
            jquery_6.JQueryUtils.dispose$Plugin($el, "tabs");
            this._tabsCreated = false;
            if (!!this._tabsEvents) {
                this._tabsEvents.removeTabs();
            }
        };
        TabsElView.prototype._onTabsCreated = function () {
            var self = this;
            if (!!self._tabsEvents) {
                self._tabsEvents.addTabs(self);
            }
            if (!!self._tabsEvents) {
                self._tabsEvents.onTabSelected(self);
            }
        };
        TabsElView.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._destroyTabs();
            this._tabsEvents = null;
            _super.prototype.dispose.call(this);
        };
        TabsElView.prototype.toString = function () {
            return "TabsElView";
        };
        Object.defineProperty(TabsElView.prototype, "tabsEvents", {
            get: function () { return this._tabsEvents; },
            set: function (v) {
                var old = this._tabsEvents;
                if (v !== old) {
                    if (!!old) {
                        old.removeTabs();
                    }
                    this._tabsEvents = v;
                    this.objEvents.raiseProp("tabsEvents");
                    if (this._tabsCreated) {
                        this._onTabsCreated();
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TabsElView.prototype, "tabIndex", {
            get: function () {
                var $el = jquery_6.$(this.el);
                return $el.tabs("option", "active");
            },
            set: function (v) {
                var $el = jquery_6.$(this.el);
                $el.tabs("option", "active", v);
            },
            enumerable: false,
            configurable: true
        });
        return TabsElView;
    }(baseview_10.BaseElView));
    exports.TabsElView = TabsElView;
    bootstrapper_19.bootstrapper.registerElView("tabs", TabsElView);
});
define("jriapp_ui/template", ["require", "exports", "jriapp_shared", "jriapp/utils/viewchecks", "jriapp/bootstrapper", "jriapp_ui/baseview"], function (require, exports, jriapp_shared_33, viewchecks_2, bootstrapper_20, baseview_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TemplateElView = void 0;
    var utils = jriapp_shared_33.Utils, viewChecks = viewchecks_2.ViewChecks, boot = bootstrapper_20.bootstrapper, ERROR = utils.err;
    viewChecks.isTemplateElView = function (obj) {
        return !!obj && obj instanceof TemplateElView;
    };
    var TemplateElView = (function (_super) {
        __extends(TemplateElView, _super);
        function TemplateElView(el, options) {
            var _this = _super.call(this, el, options) || this;
            _this._command = null;
            return _this;
        }
        TemplateElView.prototype.invokeCommand = function (args) {
            var cmd = this._command;
            if (!!cmd) {
                cmd.execute(args);
            }
        };
        TemplateElView.prototype.templateLoading = function (_template) {
        };
        TemplateElView.prototype.templateLoaded = function (template, error) {
            if (!!error) {
                return;
            }
            var self = this;
            try {
                var args = { template: template, isLoaded: true };
                self.invokeCommand(args);
            }
            catch (ex) {
                ERROR.reThrow(ex, this.handleError(ex, this));
            }
        };
        TemplateElView.prototype.templateUnLoading = function (template) {
            var self = this;
            try {
                var args = { template: template, isLoaded: false };
                self.invokeCommand(args);
            }
            catch (ex) {
                this.handleError(ex, this);
            }
        };
        TemplateElView.prototype.toString = function () {
            return "TemplateElView";
        };
        Object.defineProperty(TemplateElView.prototype, "command", {
            get: function () {
                return this._command;
            },
            set: function (v) {
                if (v !== this._command) {
                    this._command = v;
                    this.objEvents.raiseProp("command");
                }
            },
            enumerable: false,
            configurable: true
        });
        return TemplateElView;
    }(baseview_11.BaseElView));
    exports.TemplateElView = TemplateElView;
    ;
    boot.registerElView("template", TemplateElView);
});
define("jriapp_ui/dataform", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp/utils/viewchecks", "jriapp/bootstrapper", "jriapp_ui/baseview", "jriapp_ui/content/int"], function (require, exports, jriapp_shared_34, dom_32, viewchecks_3, bootstrapper_21, baseview_12, int_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataFormElView = exports.DataForm = void 0;
    var utils = jriapp_shared_34.Utils, dom = dom_32.DomUtils, isFunc = utils.check.isFunc, getNewID = utils.core.getNewID, format = utils.str.format, sys = utils.sys, boot = bootstrapper_21.bootstrapper, viewChecks = viewchecks_3.ViewChecks, _reject = utils.async.reject;
    viewChecks.isDataForm = function (el) {
        if (!el) {
            return false;
        }
        var attr = el.getAttribute("data-view");
        return (!attr) ? false : (attr === "dataform");
    };
    viewChecks.isInsideDataForm = function (el) {
        if (!el) {
            return false;
        }
        var parent = el.parentElement;
        if (!!parent) {
            if (!viewChecks.isDataForm(parent)) {
                return viewChecks.isInsideDataForm(parent);
            }
            else {
                return true;
            }
        }
        return false;
    };
    viewChecks.isInNestedForm = function (root, forms, el) {
        var len = forms.length;
        if (len === 0) {
            return false;
        }
        var oNode = el.parentElement;
        while (!!oNode) {
            for (var i = 0; i < len; i += 1) {
                if (oNode === forms[i]) {
                    return true;
                }
            }
            if (!!root && oNode === root) {
                return false;
            }
            oNode = oNode.parentElement;
        }
        return false;
    };
    viewChecks.getParentDataForm = function (rootForm, el) {
        if (!el) {
            return null;
        }
        var parent = el.parentElement;
        if (!!parent) {
            if (parent === rootForm) {
                return rootForm;
            }
            if (viewChecks.isDataForm(parent)) {
                return parent;
            }
            else {
                return viewChecks.getParentDataForm(rootForm, parent);
            }
        }
        return null;
    };
    function getFieldInfo(obj, fieldName) {
        if (!obj) {
            return null;
        }
        if (!!obj._aspect && isFunc(obj._aspect.getFieldInfo)) {
            return obj._aspect.getFieldInfo(fieldName);
        }
        else if (isFunc(obj.getFieldInfo)) {
            return obj.getFieldInfo(fieldName);
        }
        else {
            return null;
        }
    }
    function getErrorsService() {
        return boot.getSvc("IUIErrorsService");
    }
    var DataForm = (function (_super) {
        __extends(DataForm, _super);
        function DataForm(el, options) {
            var _this = _super.call(this) || this;
            var self = _this;
            _this._el = el;
            _this._uniqueID = getNewID("frm");
            _this._dataContext = null;
            _this._errorsService = !options.formErrorsService ? getErrorsService() : options.formErrorsService;
            dom.addClass([el], "ria-dataform");
            _this._isEditing = false;
            _this._content = [];
            _this._lfTime = null;
            _this._contentCreated = false;
            _this._editable = null;
            _this._errNotification = null;
            _this._parentDataForm = null;
            _this._contentPromise = null;
            var parent = viewChecks.getParentDataForm(null, el);
            if (!!parent) {
                self._parentDataForm = _this.app.viewFactory.getElView(parent);
                self._parentDataForm.objEvents.addOnDisposed(function () {
                    if (!self.getIsStateDirty()) {
                        self.dispose();
                    }
                }, self._uniqueID);
            }
            return _this;
        }
        DataForm.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._setErrors(null);
            this._clearContent();
            dom.removeClass([this.el], "ria-dataform");
            this._unbindDS();
            var parentDataForm = this._parentDataForm;
            this._parentDataForm = null;
            if (!!parentDataForm && !parentDataForm.getIsStateDirty()) {
                parentDataForm.objEvents.offNS(this._uniqueID);
            }
            this._dataContext = null;
            this._errorsService = null;
            this._contentCreated = false;
            this._contentPromise = null;
            this._el = null;
            _super.prototype.dispose.call(this);
        };
        DataForm.prototype._getBindings = function () {
            return !this._lfTime ? [] : this._lfTime.findAll(sys.isBinding);
        };
        DataForm.prototype._createContent = function () {
            var dctx = this._dataContext, self = this;
            if (!dctx) {
                return _reject("DataForm's DataContext is not set");
            }
            var contentElements = utils.arr.fromList(this._el.querySelectorAll(DataForm._DATA_CONTENT_SELECTOR)), isEditing = this.isEditing;
            var forms = utils.arr.fromList(this._el.querySelectorAll(DataForm._DATA_FORM_SELECTOR));
            for (var _i = 0, contentElements_1 = contentElements; _i < contentElements_1.length; _i++) {
                var el = contentElements_1[_i];
                if (!viewChecks.isInNestedForm(self._el, forms, el)) {
                    var attr = el.getAttribute("data-content"), op = int_3.parseContentAttr(attr);
                    if (!!op.fieldName && !op.fieldInfo) {
                        op.fieldInfo = getFieldInfo(dctx, op.fieldName);
                        if (!op.fieldInfo) {
                            throw new Error(format(jriapp_shared_34.LocaleERRS.ERR_DBSET_INVALID_FIELDNAME, "", op.fieldName));
                        }
                    }
                    var contentType = boot.contentFactory.getContentType(op);
                    var content = new contentType({ parentEl: el, contentOptions: op, dataContext: dctx, isEditing: isEditing });
                    self._content.push(content);
                    content.render();
                }
            }
            var promise = self.app._getInternal().bindElements({
                scope: this._el,
                bind: 2,
                dataContext: dctx
            });
            return promise.then(function (lftm) {
                if (self.getIsStateDirty()) {
                    lftm.dispose();
                    return;
                }
                self._lfTime = lftm;
                var bindings = self._getBindings();
                for (var _i = 0, bindings_2 = bindings; _i < bindings_2.length; _i++) {
                    var binding = bindings_2[_i];
                    if (!binding.isSourceFixed) {
                        binding.source = dctx;
                    }
                }
                self._contentCreated = true;
            });
        };
        DataForm.prototype._updateCreatedContent = function () {
            var dctx = this._dataContext, self = this;
            try {
                for (var _i = 0, _a = this._content; _i < _a.length; _i++) {
                    var content = _a[_i];
                    content.dataContext = dctx;
                    content.isEditing = self.isEditing;
                }
                var bindings = this._getBindings();
                for (var _b = 0, bindings_3 = bindings; _b < bindings_3.length; _b++) {
                    var binding = bindings_3[_b];
                    if (!binding.isSourceFixed) {
                        binding.source = dctx;
                    }
                }
            }
            catch (ex) {
                utils.err.reThrow(ex, this.handleError(ex, this));
            }
        };
        DataForm.prototype._updateContent = function () {
            var self = this;
            try {
                if (self._contentCreated) {
                    self._updateCreatedContent();
                }
                else {
                    if (!!self._contentPromise) {
                        self._contentPromise.then(function () {
                            if (self.getIsStateDirty()) {
                                return;
                            }
                            self._updateCreatedContent();
                        }, function (err) {
                            if (self.getIsStateDirty()) {
                                return;
                            }
                            self.handleError(err, self);
                        });
                    }
                    else {
                        self._contentPromise = self._createContent();
                    }
                }
            }
            catch (ex) {
                utils.err.reThrow(ex, self.handleError(ex, self));
            }
        };
        DataForm.prototype._onDSErrorsChanged = function () {
            if (!!this._errNotification) {
                var errors = this._errNotification.getAllErrors();
                this._setErrors(errors);
            }
        };
        DataForm.prototype._bindDS = function () {
            var dataContext = this._dataContext, self = this;
            if (!dataContext) {
                return;
            }
            if (!!dataContext) {
                this._editable = sys.getEditable(dataContext);
                this._errNotification = sys.getErrorNotification(dataContext);
            }
            dataContext.objEvents.addOnDisposed(function () {
                self.dataContext = null;
            }, self._uniqueID);
            if (!!this._editable) {
                this._editable.objEvents.onProp("isEditing", self._onIsEditingChanged, self._uniqueID, self);
            }
            if (!!this._errNotification) {
                this._errNotification.addOnErrorsChanged(self._onDSErrorsChanged, self._uniqueID, self);
            }
        };
        DataForm.prototype._unbindDS = function () {
            var dataContext = this._dataContext;
            this._setErrors(null);
            if (!!dataContext && !dataContext.getIsStateDirty()) {
                dataContext.objEvents.offNS(this._uniqueID);
                if (!!this._editable) {
                    this._editable.objEvents.offNS(this._uniqueID);
                }
                if (!!this._errNotification) {
                    this._errNotification.offOnErrorsChanged(this._uniqueID);
                }
            }
            this._editable = null;
            this._errNotification = null;
        };
        DataForm.prototype._clearContent = function () {
            for (var _i = 0, _a = this._content; _i < _a.length; _i++) {
                var content = _a[_i];
                content.dispose();
            }
            this._content = [];
            if (!!this._lfTime) {
                this._lfTime.dispose();
                this._lfTime = null;
            }
            this._contentCreated = false;
        };
        DataForm.prototype._setErrors = function (errors) {
            this._errorsService.setFormErrors(this.el, errors);
        };
        DataForm.prototype._onIsEditingChanged = function () {
            this.isEditing = this._editable.isEditing;
        };
        DataForm.prototype.toString = function () {
            return "DataForm";
        };
        Object.defineProperty(DataForm.prototype, "app", {
            get: function () {
                return boot.app;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataForm.prototype, "el", {
            get: function () {
                return this._el;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataForm.prototype, "dataContext", {
            get: function () {
                return this._dataContext;
            },
            set: function (v) {
                if (v === this._dataContext) {
                    return;
                }
                if (!!v && !sys.isBaseObj(v)) {
                    throw new Error(jriapp_shared_34.LocaleERRS.ERR_DATAFRM_DCTX_INVALID);
                }
                this._unbindDS();
                this._dataContext = v;
                this._bindDS();
                this._updateContent();
                if (!!this._dataContext) {
                    if (!!this._editable && this._isEditing !== this._editable.isEditing) {
                        this.isEditing = this._editable.isEditing;
                    }
                    if (!!this._errNotification) {
                        this._onDSErrorsChanged();
                    }
                }
                this.objEvents.raiseProp("dataContext");
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataForm.prototype, "isEditing", {
            get: function () {
                return this._isEditing;
            },
            set: function (v) {
                var dataContext = this._dataContext;
                if (!dataContext) {
                    return;
                }
                var isEditing = this._isEditing;
                var editable;
                if (!!this._editable) {
                    editable = this._editable;
                }
                if (!editable && v !== isEditing) {
                    this._isEditing = v;
                    this._updateContent();
                    this.objEvents.raiseProp("isEditing");
                    return;
                }
                if (v !== isEditing && !!editable) {
                    try {
                        if (v) {
                            editable.beginEdit();
                        }
                        else {
                            editable.endEdit();
                        }
                    }
                    catch (ex) {
                        utils.err.reThrow(ex, this.handleError(ex, dataContext));
                    }
                }
                if (!!editable && editable.isEditing !== isEditing) {
                    this._isEditing = editable.isEditing;
                    this._updateContent();
                    this.objEvents.raiseProp("isEditing");
                }
            },
            enumerable: false,
            configurable: true
        });
        DataForm._DATA_FORM_SELECTOR = ["*[", "data-view", "='", "dataform", "']"].join("");
        DataForm._DATA_CONTENT_SELECTOR = ["*[", "data-content", "]:not([", "data-column", "])"].join("");
        return DataForm;
    }(jriapp_shared_34.BaseObject));
    exports.DataForm = DataForm;
    var DataFormElView = (function (_super) {
        __extends(DataFormElView, _super);
        function DataFormElView(el, options) {
            var _this = _super.call(this, el, options) || this;
            var self = _this;
            _this._form = new DataForm(el, options);
            _this._form.objEvents.onProp("dataContext", function () {
                self.objEvents.raiseProp("dataContext");
            }, _this.uniqueID);
            return _this;
        }
        DataFormElView.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            if (!this._form.getIsStateDirty()) {
                this._form.dispose();
            }
            _super.prototype.dispose.call(this);
        };
        DataFormElView.prototype._setErrors = function (_el, _errors) {
        };
        DataFormElView.prototype.toString = function () {
            return "DataFormElView";
        };
        Object.defineProperty(DataFormElView.prototype, "dataContext", {
            get: function () {
                return this._form.dataContext;
            },
            set: function (v) {
                if (this.dataContext !== v) {
                    this._form.dataContext = v;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataFormElView.prototype, "form", {
            get: function () {
                return this._form;
            },
            enumerable: false,
            configurable: true
        });
        return DataFormElView;
    }(baseview_12.BaseElView));
    exports.DataFormElView = DataFormElView;
    boot.registerElView("dataform", DataFormElView);
});
define("jriapp_ui/datepicker", ["require", "exports", "jriapp/bootstrapper", "jriapp_ui/textbox"], function (require, exports, bootstrapper_22, textbox_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DatePickerElView = void 0;
    var boot = bootstrapper_22.bootstrapper;
    var DatePickerElView = (function (_super) {
        __extends(DatePickerElView, _super);
        function DatePickerElView(el, options) {
            var _this = _super.call(this, el, options) || this;
            var datepicker = boot.getSvc("IDatepicker");
            if (!datepicker) {
                throw new Error("IDatepicker service is not registered");
            }
            datepicker.attachTo(el, options.datepicker, function (datetext) {
                el.value = datetext;
                _this.objEvents.raiseProp("value");
            });
            return _this;
        }
        DatePickerElView.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            var datepicker = boot.getSvc("IDatepicker");
            if (!datepicker) {
                throw new Error("IDatepicker service is not registered");
            }
            datepicker.detachFrom(this.el);
            _super.prototype.dispose.call(this);
        };
        DatePickerElView.prototype.toString = function () {
            return "DatePickerElView";
        };
        return DatePickerElView;
    }(textbox_4.TextBoxElView));
    exports.DatePickerElView = DatePickerElView;
    boot.registerElView("datepicker", DatePickerElView);
});
define("jriapp_ui/command", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp_ui/baseview"], function (require, exports, jriapp_shared_35, dom_33, baseview_13) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CommandElView = void 0;
    var utils = jriapp_shared_35.Utils, dom = dom_33.DomUtils;
    var CommandFlags;
    (function (CommandFlags) {
        CommandFlags[CommandFlags["PreventDefault"] = 0] = "PreventDefault";
        CommandFlags[CommandFlags["StopPropagation"] = 1] = "StopPropagation";
        CommandFlags[CommandFlags["Disabled"] = 2] = "Disabled";
        CommandFlags[CommandFlags["NoCheckCanExecute"] = 3] = "NoCheckCanExecute";
    })(CommandFlags || (CommandFlags = {}));
    var CommandElView = (function (_super) {
        __extends(CommandElView, _super);
        function CommandElView(el, options) {
            var _this = _super.call(this, el, options) || this;
            _this._command = null;
            _this._commandParam = null;
            _this._commandFlags = 0;
            _this._debounce = new jriapp_shared_35.Debounce();
            _this._setCommandFlag(!!options.preventDefault, 0);
            _this._setCommandFlag(!!options.stopPropagation, 1);
            var disabled = ("disabled" in el) && el.disabled;
            if (disabled) {
                _this._setCommandFlag(disabled, 2);
            }
            _this._setCommandFlag(!!options.noCheckCanExecute, 3);
            dom.setClass([el], "disabled", _this.isEnabled);
            return _this;
        }
        CommandElView.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            this._debounce.dispose();
            if (!!this._command) {
                this._command.offOnCanExecuteChanged(this.uniqueID);
            }
            this._command = null;
            this._commandParam = null;
            _super.prototype.dispose.call(this);
        };
        CommandElView.prototype._getCommandFlag = function (flag) {
            return !!(this._commandFlags & (1 << flag));
        };
        CommandElView.prototype._setCommandFlag = function (v, flag) {
            if (v) {
                this._commandFlags |= (1 << flag);
            }
            else {
                this._commandFlags &= ~(1 << flag);
            }
        };
        CommandElView.prototype._onCanExecuteChanged = function (cmd, _args) {
            this.isEnabled = cmd.canExecute(this._getCommandParam());
        };
        CommandElView.prototype._getCommandParam = function () {
            return this._commandParam;
        };
        CommandElView.prototype._onCommandChanged = function () {
            if (!!this._command && !this._getCommandFlag(3)) {
                this.isEnabled = this._command.canExecute(this._getCommandParam());
            }
        };
        CommandElView.prototype.invokeCommand = function () {
            var self = this;
            if (!!self.command && self.isEnabled) {
                utils.queue.enque(function () {
                    if (self.getIsStateDirty()) {
                        return;
                    }
                    try {
                        if (!!self.command && self.isEnabled) {
                            self.command.execute(self._getCommandParam());
                        }
                    }
                    catch (ex) {
                        self.handleError(ex, self);
                    }
                });
            }
        };
        CommandElView.prototype.viewMounted = function () {
            var _this = this;
            this._debounce.enque(function () {
                _this._onCommandChanged();
            });
        };
        CommandElView.prototype.toString = function () {
            return "CommandElView";
        };
        Object.defineProperty(CommandElView.prototype, "command", {
            get: function () {
                return this._command;
            },
            set: function (v) {
                var _this = this;
                if (v !== this._command) {
                    if (!!this._command && !this._getCommandFlag(3)) {
                        this._command.offOnCanExecuteChanged(this.uniqueID);
                    }
                    this._command = v;
                    if (!!this._command && !this._getCommandFlag(3)) {
                        this._command.addOnCanExecuteChanged(this._onCanExecuteChanged, this.uniqueID, this);
                    }
                    this._debounce.enque(function () {
                        _this._onCommandChanged();
                    });
                    this.objEvents.raiseProp("command");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CommandElView.prototype, "commandParam", {
            get: function () {
                return this._commandParam;
            },
            set: function (v) {
                var _this = this;
                if (v !== this._commandParam) {
                    this._commandParam = v;
                    this._debounce.enque(function () {
                        _this._onCommandChanged();
                    });
                    this.objEvents.raiseProp("commandParam");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CommandElView.prototype, "isEnabled", {
            get: function () {
                var el = this.el;
                if (("disabled" in this.el)) {
                    return !el.disabled;
                }
                else {
                    return !this._getCommandFlag(2);
                }
            },
            set: function (v) {
                var el = this.el;
                if (v !== this.isEnabled) {
                    if (("disabled" in this.el)) {
                        el.disabled = !v;
                        this._setCommandFlag(!v, 2);
                    }
                    else {
                        this._setCommandFlag(!v, 2);
                    }
                    dom.setClass([this.el], "disabled", !!v);
                    this.objEvents.raiseProp("isEnabled");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CommandElView.prototype, "preventDefault", {
            get: function () {
                return this._getCommandFlag(0);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CommandElView.prototype, "stopPropagation", {
            get: function () {
                return this._getCommandFlag(1);
            },
            enumerable: false,
            configurable: true
        });
        return CommandElView;
    }(baseview_13.BaseElView));
    exports.CommandElView = CommandElView;
});
define("jriapp_ui/anchor", ["require", "exports", "jriapp/utils/dom", "jriapp/bootstrapper", "jriapp_ui/command"], function (require, exports, dom_34, bootstrapper_23, command_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AnchorElView = void 0;
    var dom = dom_34.DomUtils, boot = bootstrapper_23.bootstrapper, subscribeMap = bootstrapper_23.subscribeWeakMap;
    var AnchorElView = (function (_super) {
        __extends(AnchorElView, _super);
        function AnchorElView(el, options) {
            var _this = _super.call(this, el, options) || this;
            var self = _this;
            _this._imageSrc = null;
            _this._image = null;
            _this._span = null;
            _this._glyph = null;
            if (!!options.imageSrc) {
                _this.imageSrc = options.imageSrc;
            }
            if (!!options.glyph) {
                _this.glyph = options.glyph;
            }
            dom.addClass([el], "ria-command-link");
            if (_this.isDelegationOn) {
                subscribeMap.set(el, _this);
                _this._setIsSubcribed(1);
            }
            else {
                dom.events.on(el, "click", function (e) {
                    self.handle_click(e);
                }, _this.uniqueID);
            }
            return _this;
        }
        AnchorElView.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            dom.removeClass([this.el], "ria-command-link");
            this.imageSrc = null;
            this.glyph = null;
            _super.prototype.dispose.call(this);
        };
        AnchorElView.prototype.handle_click = function (e) {
            if (this.stopPropagation) {
                e.stopPropagation();
            }
            if (this.preventDefault) {
                e.preventDefault();
            }
            this.onClick();
            return this.stopPropagation;
        };
        AnchorElView.prototype.onClick = function () {
            this.invokeCommand();
        };
        AnchorElView.prototype._updateImage = function (src) {
            var el = this.el;
            if (this._imageSrc === src) {
                return;
            }
            this._imageSrc = src;
            if (!!this._image && !src) {
                dom.removeNode(this._image);
                this._image = null;
                return;
            }
            if (!!src) {
                if (!this._image) {
                    el.innerHTML = "";
                    this._image = new Image();
                    el.appendChild(this._image);
                }
                this._image.src = src;
            }
        };
        AnchorElView.prototype._updateGlyph = function (glyph) {
            var el = this.el;
            if (this._glyph === glyph) {
                return;
            }
            var oldGlyph = this._glyph;
            this._glyph = glyph;
            if (!!oldGlyph && !glyph) {
                dom.removeNode(this._span);
                return;
            }
            if (!!glyph) {
                if (!this._span) {
                    el.innerHTML = "";
                    this._span = dom.document.createElement("span");
                    el.appendChild(this._span);
                }
                if (!!oldGlyph) {
                    dom.removeClass([this._span], oldGlyph);
                }
                dom.addClass([this._span], glyph);
            }
        };
        AnchorElView.prototype.toString = function () {
            return "AnchorElView";
        };
        Object.defineProperty(AnchorElView.prototype, "imageSrc", {
            get: function () { return this._imageSrc; },
            set: function (v) {
                var x = this._imageSrc;
                if (x !== v) {
                    this._updateImage(v);
                    this.objEvents.raiseProp("imageSrc");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AnchorElView.prototype, "glyph", {
            get: function () { return this._glyph; },
            set: function (v) {
                var x = this._glyph;
                if (x !== v) {
                    this._updateGlyph(v);
                    this.objEvents.raiseProp("glyph");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AnchorElView.prototype, "html", {
            get: function () {
                return this.el.innerHTML;
            },
            set: function (v) {
                var x = this.el.innerHTML;
                v = (!v) ? "" : ("" + v);
                if (x !== v) {
                    this.el.innerHTML = v;
                    this.objEvents.raiseProp("html");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AnchorElView.prototype, "text", {
            get: function () {
                return this.el.textContent;
            },
            set: function (v) {
                var x = this.el.textContent;
                v = (!v) ? "" : ("" + v);
                if (x !== v) {
                    this.el.textContent = v;
                    this.objEvents.raiseProp("text");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AnchorElView.prototype, "href", {
            get: function () {
                return this.el.href;
            },
            set: function (v) {
                var x = this.href;
                v = (!v) ? "" : ("" + v);
                if (x !== v) {
                    this.el.href = v;
                    this.objEvents.raiseProp("href");
                }
            },
            enumerable: false,
            configurable: true
        });
        return AnchorElView;
    }(command_1.CommandElView));
    exports.AnchorElView = AnchorElView;
    boot.registerElView("a", AnchorElView);
    boot.registerElView("abutton", AnchorElView);
});
define("jriapp_ui/span", ["require", "exports", "jriapp/bootstrapper", "jriapp_ui/baseview"], function (require, exports, bootstrapper_24, baseview_14) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SpanElView = void 0;
    var SpanElView = (function (_super) {
        __extends(SpanElView, _super);
        function SpanElView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SpanElView.prototype.toString = function () {
            return "SpanElView";
        };
        Object.defineProperty(SpanElView.prototype, "text", {
            get: function () {
                return this.el.textContent;
            },
            set: function (v) {
                var el = this.el, x = el.textContent, str = "" + v;
                v = (v === null ? "" : str);
                if (x !== v) {
                    el.textContent = v;
                    this.objEvents.raiseProp("text");
                    this.objEvents.raiseProp("value");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SpanElView.prototype, "value", {
            get: function () {
                return this.text;
            },
            set: function (v) {
                this.text = v;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SpanElView.prototype, "html", {
            get: function () {
                return this.el.innerHTML;
            },
            set: function (v) {
                var el = this.el, x = this.el.innerHTML, str = "" + v;
                v = v === null ? "" : str;
                if (x !== v) {
                    el.innerHTML = v;
                    this.objEvents.raiseProp("html");
                }
            },
            enumerable: false,
            configurable: true
        });
        return SpanElView;
    }(baseview_14.BaseElView));
    exports.SpanElView = SpanElView;
    bootstrapper_24.bootstrapper.registerElView("span", SpanElView);
});
define("jriapp_ui/block", ["require", "exports", "jriapp/bootstrapper", "jriapp_ui/span"], function (require, exports, bootstrapper_25, span_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BlockElView = void 0;
    var boot = bootstrapper_25.bootstrapper;
    var BlockElView = (function (_super) {
        __extends(BlockElView, _super);
        function BlockElView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BlockElView.prototype.toString = function () {
            return "BlockElView";
        };
        Object.defineProperty(BlockElView.prototype, "width", {
            get: function () {
                return this.el.offsetWidth;
            },
            set: function (v) {
                var x = this.width;
                if (v !== x) {
                    this.el.style.width = v + "px";
                    this.objEvents.raiseProp("width");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BlockElView.prototype, "height", {
            get: function () {
                return this.el.offsetHeight;
            },
            set: function (v) {
                var x = this.height;
                if (v !== x) {
                    this.el.style.height = v + "px";
                    this.objEvents.raiseProp("height");
                }
            },
            enumerable: false,
            configurable: true
        });
        return BlockElView;
    }(span_1.SpanElView));
    exports.BlockElView = BlockElView;
    boot.registerElView("block", BlockElView);
    boot.registerElView("div", BlockElView);
    boot.registerElView("section", BlockElView);
});
define("jriapp_ui/busy", ["require", "exports", "jriapp_shared", "jriapp_ui/utils/jquery", "jriapp/bootstrapper", "jriapp/utils/dom", "jriapp_ui/baseview"], function (require, exports, jriapp_shared_36, jquery_7, bootstrapper_26, dom_35, baseview_15) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BusyElView = void 0;
    var isNt = jriapp_shared_36.Utils.check.isNt, boot = bootstrapper_26.bootstrapper, dom = dom_35.DomUtils;
    var BusyElView = (function (_super) {
        __extends(BusyElView, _super);
        function BusyElView(el, options) {
            var _this = _super.call(this, el, options) || this;
            var img;
            if (!!options.img) {
                img = options.img;
            }
            else {
                img = "loader.gif";
            }
            _this._delay = 400;
            _this._timeOut = null;
            if (!isNt(options.delay)) {
                _this._delay = parseInt("" + options.delay);
            }
            _this._loaderPath = bootstrapper_26.bootstrapper.getImagePath(img);
            _this._img = new Image();
            _this._img.style.position = "absolute";
            _this._img.style.display = "none";
            _this._img.style.zIndex = "10000";
            _this._img.src = _this._loaderPath;
            _this.el.appendChild(_this._img);
            _this._isBusy = false;
            return _this;
        }
        BusyElView.prototype.dispose = function () {
            if (this.getIsDisposed()) {
                return;
            }
            this.setDisposing();
            if (!!this._timeOut) {
                clearTimeout(this._timeOut);
                this._timeOut = null;
            }
            dom.removeNode(this._img);
            _super.prototype.dispose.call(this);
        };
        BusyElView.prototype.toString = function () {
            return "BusyElView";
        };
        Object.defineProperty(BusyElView.prototype, "isBusy", {
            get: function () { return this._isBusy; },
            set: function (v) {
                var self = this, fn = function () {
                    self._timeOut = null;
                    self._img.style.display = "";
                    jquery_7.$(self._img).position({
                        "of": jquery_7.$(self.el)
                    });
                };
                if (v !== self._isBusy) {
                    self._isBusy = v;
                    if (self._isBusy) {
                        if (!!self._timeOut) {
                            clearTimeout(self._timeOut);
                            self._timeOut = null;
                        }
                        self._timeOut = setTimeout(fn, self._delay);
                    }
                    else {
                        if (!!self._timeOut) {
                            clearTimeout(self._timeOut);
                            self._timeOut = null;
                        }
                        else {
                            self._img.style.display = "none";
                        }
                    }
                    self.objEvents.raiseProp("isBusy");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BusyElView.prototype, "delay", {
            get: function () { return this._delay; },
            set: function (v) {
                if (v !== this._delay) {
                    this._delay = v;
                    this.objEvents.raiseProp("delay");
                }
            },
            enumerable: false,
            configurable: true
        });
        return BusyElView;
    }(baseview_15.BaseElView));
    exports.BusyElView = BusyElView;
    boot.registerElView("busy", BusyElView);
    boot.registerElView("busy_indicator", BusyElView);
});
define("jriapp_ui/button", ["require", "exports", "jriapp/utils/dom", "jriapp/bootstrapper", "jriapp_ui/command"], function (require, exports, dom_36, bootstrapper_27, command_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ButtonElView = void 0;
    var boot = bootstrapper_27.bootstrapper, dom = dom_36.DomUtils, subscribeMap = bootstrapper_27.subscribeWeakMap;
    var ButtonElView = (function (_super) {
        __extends(ButtonElView, _super);
        function ButtonElView(el, options) {
            var _this = _super.call(this, el, options) || this;
            var self = _this;
            _this._isButton = _this.el.tagName.toLowerCase() === "button";
            if (_this.isDelegationOn) {
                subscribeMap.set(el, _this);
                _this._setIsSubcribed(1);
            }
            else {
                dom.events.on(el, "click", function (e) {
                    self.handle_click(e);
                }, _this.uniqueID);
            }
            return _this;
        }
        ButtonElView.prototype.handle_click = function (e) {
            if (this.stopPropagation) {
                e.stopPropagation();
            }
            if (this.preventDefault) {
                e.preventDefault();
            }
            this.onClick();
            return this.stopPropagation;
        };
        ButtonElView.prototype.onClick = function () {
            this.invokeCommand();
        };
        ButtonElView.prototype.toString = function () {
            return "ButtonElView";
        };
        Object.defineProperty(ButtonElView.prototype, "value", {
            get: function () {
                return this._isButton ? this.el.textContent : this.el.value;
            },
            set: function (v) {
                var x = this.value;
                v = (!v) ? "" : ("" + v);
                if (x !== v) {
                    if (this._isButton) {
                        this.el.textContent = v;
                    }
                    else {
                        this.el.value = v;
                    }
                    this.objEvents.raiseProp("value");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ButtonElView.prototype, "text", {
            get: function () {
                return this.el.textContent;
            },
            set: function (v) {
                var x = this.el.textContent;
                v = (!v) ? "" : ("" + v);
                if (x !== v) {
                    this.el.textContent = v;
                    this.objEvents.raiseProp("text");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ButtonElView.prototype, "html", {
            get: function () {
                return this._isButton ? this.el.innerHTML : this.el.value;
            },
            set: function (v) {
                var x = this.html;
                v = (!v) ? "" : ("" + v);
                if (x !== v) {
                    if (this._isButton) {
                        this.el.innerHTML = v;
                    }
                    else {
                        this.el.value = v;
                    }
                    this.objEvents.raiseProp("html");
                }
            },
            enumerable: false,
            configurable: true
        });
        return ButtonElView;
    }(command_2.CommandElView));
    exports.ButtonElView = ButtonElView;
    boot.registerElView("input:button", ButtonElView);
    boot.registerElView("input:submit", ButtonElView);
    boot.registerElView("button", ButtonElView);
});
define("jriapp_ui/checkbox", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp/bootstrapper", "jriapp_ui/input"], function (require, exports, jriapp_shared_37, dom_37, bootstrapper_28, input_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CheckBoxElView = void 0;
    var dom = dom_37.DomUtils, isNt = jriapp_shared_37.Utils.check.isNt, boot = bootstrapper_28.bootstrapper, subscribeMap = bootstrapper_28.subscribeWeakMap;
    var CheckBoxElView = (function (_super) {
        __extends(CheckBoxElView, _super);
        function CheckBoxElView(chk, options) {
            var _this = _super.call(this, chk, options) || this;
            var self = _this;
            _this._checked = null;
            chk.checked = false;
            if (_this.isDelegationOn) {
                subscribeMap.set(_this.el, _this);
                _this._setIsSubcribed(2);
            }
            else {
                dom.events.on(_this.el, "change", function (e) {
                    e.stopPropagation();
                    self.handle_change(e);
                }, _this.uniqueID);
            }
            if (!!options.name) {
                var hidden = dom.document.createElement("input");
                hidden.type = "hidden";
                hidden.name = options.name;
                dom.insertBefore(hidden, chk);
                _this._hidden = hidden;
            }
            _this._updateState();
            return _this;
        }
        CheckBoxElView.prototype.dispose = function () {
            if (this.getIsDisposed())
                return;
            this.setDisposing();
            if (!!this._hidden) {
                dom.removeNode(this._hidden);
                this._hidden = null;
            }
            _super.prototype.dispose.call(this);
        };
        CheckBoxElView.prototype.handle_change = function (_e) {
            var chk = this.el;
            if (this.checked !== chk.checked) {
                this.checked = chk.checked;
            }
            return true;
        };
        CheckBoxElView.prototype._updateState = function () {
            dom.setClass([this.el], "ria-checked-null", !isNt(this.checked));
        };
        CheckBoxElView.prototype._setErrors = function (el, errors) {
            var parent = el.parentElement;
            var mainEl = (!!parent && parent.tagName.toLowerCase() === "label") ? parent : el;
            _super.prototype._setErrors.call(this, mainEl, errors);
        };
        CheckBoxElView.prototype.toString = function () {
            return "CheckBoxElView";
        };
        Object.defineProperty(CheckBoxElView.prototype, "checked", {
            get: function () {
                return this._checked;
            },
            set: function (v) {
                if (this._checked !== v) {
                    this._checked = v;
                    var chk = this.el;
                    chk.checked = !!v;
                    this._updateState();
                    if (!!this._hidden) {
                        this._hidden.value = !!this._checked ? "1" : (isNt(this._checked) ? "" : "0");
                    }
                    this.objEvents.raiseProp("checked");
                }
            },
            enumerable: false,
            configurable: true
        });
        return CheckBoxElView;
    }(input_2.InputElView));
    exports.CheckBoxElView = CheckBoxElView;
    boot.registerElView("input:checkbox", CheckBoxElView);
    boot.registerElView("checkbox", CheckBoxElView);
});
define("jriapp_ui/checkbox3", ["require", "exports", "jriapp_shared", "jriapp/utils/dom", "jriapp/bootstrapper", "jriapp_ui/input"], function (require, exports, jriapp_shared_38, dom_38, bootstrapper_29, input_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CheckBoxThreeStateElView = void 0;
    var isNt = jriapp_shared_38.Utils.check.isNt, dom = dom_38.DomUtils, boot = bootstrapper_29.bootstrapper, subscribeMap = bootstrapper_29.subscribeWeakMap;
    var CheckBoxThreeStateElView = (function (_super) {
        __extends(CheckBoxThreeStateElView, _super);
        function CheckBoxThreeStateElView(chk, options) {
            var _this = _super.call(this, chk, options) || this;
            var self = _this;
            _this._checked = null;
            chk.checked = false;
            chk.indeterminate = _this._checked === null;
            if (_this.isDelegationOn) {
                subscribeMap.set(_this.el, _this);
                _this._setIsSubcribed(2);
            }
            else {
                dom.events.on(_this.el, "change", function (e) {
                    e.stopPropagation();
                    self.handle_change(e);
                }, _this.uniqueID);
            }
            if (!!options.name) {
                var hidden = dom.document.createElement("input");
                hidden.type = "hidden";
                hidden.name = options.name;
                dom.insertBefore(hidden, chk);
                _this._hidden = hidden;
            }
            _this._updateState();
            return _this;
        }
        CheckBoxThreeStateElView.prototype.dispose = function () {
            if (this.getIsDisposed())
                return;
            this.setDisposing();
            if (!!this._hidden) {
                dom.removeNode(this._hidden);
                this._hidden = null;
            }
            _super.prototype.dispose.call(this);
        };
        CheckBoxThreeStateElView.prototype.handle_change = function (_e) {
            if (this.checked === null) {
                this.checked = true;
            }
            else {
                this.checked = !this.checked ? null : false;
            }
            return true;
        };
        CheckBoxThreeStateElView.prototype._updateState = function () {
            dom.setClass([this.el], "ria-checked-null", !isNt(this.checked));
        };
        CheckBoxThreeStateElView.prototype._setErrors = function (el, errors) {
            var parent = el.parentElement;
            var mainEl = (!!parent && parent.tagName.toLowerCase() === "label") ? parent : el;
            _super.prototype._setErrors.call(this, mainEl, errors);
        };
        CheckBoxThreeStateElView.prototype.toString = function () {
            return "CheckBoxThreeStateElView";
        };
        Object.defineProperty(CheckBoxThreeStateElView.prototype, "checked", {
            get: function () {
                return this._checked;
            },
            set: function (v) {
                if (this._checked !== v) {
                    this._checked = v;
                    var chk = this.el;
                    chk.checked = !!v;
                    chk.indeterminate = isNt(this._checked);
                    this._updateState();
                    if (!!this._hidden) {
                        this._hidden.value = !!this._checked ? "1" : (isNt(this._checked) ? "" : "0");
                    }
                    this.objEvents.raiseProp("checked");
                }
            },
            enumerable: false,
            configurable: true
        });
        return CheckBoxThreeStateElView;
    }(input_3.InputElView));
    exports.CheckBoxThreeStateElView = CheckBoxThreeStateElView;
    boot.registerElView("threeState", CheckBoxThreeStateElView);
    boot.registerElView("checkbox3", CheckBoxThreeStateElView);
});
define("jriapp_ui/hidden", ["require", "exports", "jriapp/bootstrapper", "jriapp_ui/input"], function (require, exports, bootstrapper_30, input_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HiddenElView = void 0;
    var HiddenElView = (function (_super) {
        __extends(HiddenElView, _super);
        function HiddenElView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        HiddenElView.prototype.toString = function () {
            return "HiddenElView";
        };
        return HiddenElView;
    }(input_4.InputElView));
    exports.HiddenElView = HiddenElView;
    bootstrapper_30.bootstrapper.registerElView("input:hidden", HiddenElView);
});
define("jriapp_ui/img", ["require", "exports", "jriapp/bootstrapper", "jriapp_ui/baseview"], function (require, exports, bootstrapper_31, baseview_16) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ImgElView = void 0;
    var ImgElView = (function (_super) {
        __extends(ImgElView, _super);
        function ImgElView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ImgElView.prototype.toString = function () {
            return "ImgElView";
        };
        Object.defineProperty(ImgElView.prototype, "src", {
            get: function () {
                return this.el.src;
            },
            set: function (v) {
                var x = this.src;
                if (x !== v) {
                    this.el.src = v;
                    this.objEvents.raiseProp("src");
                }
            },
            enumerable: false,
            configurable: true
        });
        return ImgElView;
    }(baseview_16.BaseElView));
    exports.ImgElView = ImgElView;
    bootstrapper_31.bootstrapper.registerElView("img", ImgElView);
});
define("jriapp_ui/radio", ["require", "exports", "jriapp_shared", "jriapp/bootstrapper", "jriapp_ui/checkbox"], function (require, exports, jriapp_shared_39, bootstrapper_32, checkbox_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RadioElView = void 0;
    var isNt = jriapp_shared_39.Utils.check.isNt;
    var RadioElView = (function (_super) {
        __extends(RadioElView, _super);
        function RadioElView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RadioElView.prototype.toString = function () {
            return "RadioElView";
        };
        Object.defineProperty(RadioElView.prototype, "value", {
            get: function () {
                return this.el.value;
            },
            set: function (v) {
                var strv = isNt(v) ? "" : ("" + v);
                if (strv !== this.value) {
                    this.el.value = strv;
                    this.objEvents.raiseProp("value");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RadioElView.prototype, "name", {
            get: function () {
                return this.el.name;
            },
            enumerable: false,
            configurable: true
        });
        return RadioElView;
    }(checkbox_1.CheckBoxElView));
    exports.RadioElView = RadioElView;
    bootstrapper_32.bootstrapper.registerElView("input:radio", RadioElView);
});
define("jriapp_ui/content/all", ["require", "exports", "jriapp_ui/content/basic", "jriapp_ui/content/template", "jriapp_ui/content/string", "jriapp_ui/content/multyline", "jriapp_ui/content/bool", "jriapp_ui/content/number", "jriapp_ui/content/date", "jriapp_ui/content/datetime", "jriapp_ui/content/lookup"], function (require, exports, basic_9, template_8, string_2, multyline_2, bool_2, number_2, date_2, datetime_2, lookup_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LookupContent = exports.DateTimeContent = exports.DateContent = exports.NumberContent = exports.BoolContent = exports.MultyLineContent = exports.StringContent = exports.TemplateContent = exports.BasicContent = void 0;
    Object.defineProperty(exports, "BasicContent", { enumerable: true, get: function () { return basic_9.BasicContent; } });
    Object.defineProperty(exports, "TemplateContent", { enumerable: true, get: function () { return template_8.TemplateContent; } });
    Object.defineProperty(exports, "StringContent", { enumerable: true, get: function () { return string_2.StringContent; } });
    Object.defineProperty(exports, "MultyLineContent", { enumerable: true, get: function () { return multyline_2.MultyLineContent; } });
    Object.defineProperty(exports, "BoolContent", { enumerable: true, get: function () { return bool_2.BoolContent; } });
    Object.defineProperty(exports, "NumberContent", { enumerable: true, get: function () { return number_2.NumberContent; } });
    Object.defineProperty(exports, "DateContent", { enumerable: true, get: function () { return date_2.DateContent; } });
    Object.defineProperty(exports, "DateTimeContent", { enumerable: true, get: function () { return datetime_2.DateTimeContent; } });
    Object.defineProperty(exports, "LookupContent", { enumerable: true, get: function () { return lookup_2.LookupContent; } });
});
define("jriapp_ui", ["require", "exports", "jriapp/bootstrapper", "jriapp_ui/content/factory", "jriapp_ui/utils/tooltip", "jriapp_ui/utils/datepicker", "jriapp_ui/utils/errors", "jriapp_ui/dialog", "jriapp_ui/dynacontent", "jriapp_ui/datagrid/datagrid", "jriapp_ui/pager", "jriapp_ui/listbox", "jriapp_ui/stackpanel", "jriapp_ui/tabs", "jriapp_ui/baseview", "jriapp_ui/template", "jriapp_ui/dataform", "jriapp_ui/datepicker", "jriapp_ui/anchor", "jriapp_ui/block", "jriapp_ui/busy", "jriapp_ui/button", "jriapp_ui/checkbox", "jriapp_ui/checkbox3", "jriapp_ui/command", "jriapp_ui/hidden", "jriapp_ui/img", "jriapp_ui/input", "jriapp_ui/radio", "jriapp_ui/span", "jriapp_ui/textarea", "jriapp_ui/textbox", "jriapp_ui/utils/dblclick", "jriapp_ui/utils/jquery", "jriapp_ui/content/all"], function (require, exports, bootstrapper_33, factory_1, tooltip_1, datepicker_1, errors_3, dialog_2, dynacontent_1, datagrid_1, pager_1, listbox_2, stackpanel_1, tabs_1, baseview_17, template_9, dataform_1, datepicker_2, anchor_1, block_1, busy_1, button_1, checkbox_2, checkbox3_1, command_3, hidden_1, img_1, input_5, radio_1, span_2, textarea_2, textbox_5, dblclick_2, jquery_8, all_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VERSION = exports.$ = exports.JQueryUtils = exports.DblClick = exports.TextBoxElView = exports.TextAreaElView = exports.SpanElView = exports.RadioElView = exports.InputElView = exports.ImgElView = exports.HiddenElView = exports.CommandElView = exports.CheckBoxThreeStateElView = exports.CheckBoxElView = exports.ButtonElView = exports.BusyElView = exports.BlockElView = exports.AnchorElView = exports.DatePickerElView = exports.DataFormElView = exports.DataForm = exports.TemplateElView = exports.addToolTip = exports.BaseElView = exports.ListBoxElView = exports.ListBox = exports.getDataGrids = exports.findDataGrid = exports.ROW_POSITION = exports.DataGridElView = exports.DataGridRow = exports.DataGridColumn = exports.DataGrid = exports.DynaContentElView = exports.DialogVM = exports.DataEditDialog = exports.DIALOG_ACTION = void 0;
    Object.defineProperty(exports, "DIALOG_ACTION", { enumerable: true, get: function () { return dialog_2.DIALOG_ACTION; } });
    Object.defineProperty(exports, "DataEditDialog", { enumerable: true, get: function () { return dialog_2.DataEditDialog; } });
    Object.defineProperty(exports, "DialogVM", { enumerable: true, get: function () { return dialog_2.DialogVM; } });
    Object.defineProperty(exports, "DynaContentElView", { enumerable: true, get: function () { return dynacontent_1.DynaContentElView; } });
    Object.defineProperty(exports, "DataGrid", { enumerable: true, get: function () { return datagrid_1.DataGrid; } });
    Object.defineProperty(exports, "DataGridColumn", { enumerable: true, get: function () { return datagrid_1.DataGridColumn; } });
    Object.defineProperty(exports, "DataGridRow", { enumerable: true, get: function () { return datagrid_1.DataGridRow; } });
    Object.defineProperty(exports, "DataGridElView", { enumerable: true, get: function () { return datagrid_1.DataGridElView; } });
    Object.defineProperty(exports, "ROW_POSITION", { enumerable: true, get: function () { return datagrid_1.ROW_POSITION; } });
    Object.defineProperty(exports, "findDataGrid", { enumerable: true, get: function () { return datagrid_1.findDataGrid; } });
    Object.defineProperty(exports, "getDataGrids", { enumerable: true, get: function () { return datagrid_1.getDataGrids; } });
    __exportStar(pager_1, exports);
    Object.defineProperty(exports, "ListBox", { enumerable: true, get: function () { return listbox_2.ListBox; } });
    Object.defineProperty(exports, "ListBoxElView", { enumerable: true, get: function () { return listbox_2.ListBoxElView; } });
    __exportStar(stackpanel_1, exports);
    __exportStar(tabs_1, exports);
    Object.defineProperty(exports, "BaseElView", { enumerable: true, get: function () { return baseview_17.BaseElView; } });
    Object.defineProperty(exports, "addToolTip", { enumerable: true, get: function () { return baseview_17.addToolTip; } });
    Object.defineProperty(exports, "TemplateElView", { enumerable: true, get: function () { return template_9.TemplateElView; } });
    Object.defineProperty(exports, "DataForm", { enumerable: true, get: function () { return dataform_1.DataForm; } });
    Object.defineProperty(exports, "DataFormElView", { enumerable: true, get: function () { return dataform_1.DataFormElView; } });
    Object.defineProperty(exports, "DatePickerElView", { enumerable: true, get: function () { return datepicker_2.DatePickerElView; } });
    Object.defineProperty(exports, "AnchorElView", { enumerable: true, get: function () { return anchor_1.AnchorElView; } });
    Object.defineProperty(exports, "BlockElView", { enumerable: true, get: function () { return block_1.BlockElView; } });
    Object.defineProperty(exports, "BusyElView", { enumerable: true, get: function () { return busy_1.BusyElView; } });
    Object.defineProperty(exports, "ButtonElView", { enumerable: true, get: function () { return button_1.ButtonElView; } });
    Object.defineProperty(exports, "CheckBoxElView", { enumerable: true, get: function () { return checkbox_2.CheckBoxElView; } });
    Object.defineProperty(exports, "CheckBoxThreeStateElView", { enumerable: true, get: function () { return checkbox3_1.CheckBoxThreeStateElView; } });
    Object.defineProperty(exports, "CommandElView", { enumerable: true, get: function () { return command_3.CommandElView; } });
    Object.defineProperty(exports, "HiddenElView", { enumerable: true, get: function () { return hidden_1.HiddenElView; } });
    Object.defineProperty(exports, "ImgElView", { enumerable: true, get: function () { return img_1.ImgElView; } });
    Object.defineProperty(exports, "InputElView", { enumerable: true, get: function () { return input_5.InputElView; } });
    Object.defineProperty(exports, "RadioElView", { enumerable: true, get: function () { return radio_1.RadioElView; } });
    Object.defineProperty(exports, "SpanElView", { enumerable: true, get: function () { return span_2.SpanElView; } });
    Object.defineProperty(exports, "TextAreaElView", { enumerable: true, get: function () { return textarea_2.TextAreaElView; } });
    Object.defineProperty(exports, "TextBoxElView", { enumerable: true, get: function () { return textbox_5.TextBoxElView; } });
    Object.defineProperty(exports, "DblClick", { enumerable: true, get: function () { return dblclick_2.DblClick; } });
    Object.defineProperty(exports, "JQueryUtils", { enumerable: true, get: function () { return jquery_8.JQueryUtils; } });
    Object.defineProperty(exports, "$", { enumerable: true, get: function () { return jquery_8.$; } });
    __exportStar(all_1, exports);
    exports.VERSION = "4.0.9";
    var boot = bootstrapper_33.bootstrapper;
    factory_1.initContentFactory();
    boot.registerSvc("ITooltipService", tooltip_1.createToolTipSvc());
    boot.registerSvc("IDatepicker", datepicker_1.createDatepickerSvc());
    boot.registerSvc("IUIErrorsService", errors_3.createUIErrorsSvc());
    boot.loadOwnStyle("jriapp_ui");
});

define("jriapp_ru", ["require", "exports", "jriapp_shared/lang", "jriapp/bootstrapper"], function (require, exports, lang_1, bootstrapper_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PAGER = {
        firstText: "<<",
        lastText: ">>",
        previousText: "<",
        nextText: ">",
        pageInfo: "Записи с <span class='ria-pager-info-num'>{0}</span> по <span class='ria-pager-info-num'>{1}</span> из <span class='ria-pager-info-num'>{2}</span>",
        firstPageTip: "на 1 страницу",
        prevPageTip: "назад на {0}",
        nextPageTip: "вперед на {0}",
        lastPageTip: "последняя страница",
        showingTip: "записи от {0} до {1} из {2}",
        showTip: "показать записи от {0} до {1} из {2}"
    };
    var VALIDATE = {
        errorInfo: "Ошибки:",
        errorField: "поле:"
    };
    var TEXT = {
        txtEdit: "Редактировать",
        txtAddNew: "Добавить",
        txtDelete: "Удалить",
        txtCancel: "Отмена",
        txtOk: "ОК",
        txtRefresh: "Обновить",
        txtAskDelete: "Вы уверены, что хотите удалить запись?",
        txtSubmitting: "Сохранение данных ...",
        txtSave: "Сохранить",
        txtClose: "Закрыть",
        txtField: "Поле"
    };
    var _STRS = { PAGER: PAGER, VALIDATE: VALIDATE, TEXT: TEXT };
    var _ERRS = {
        ERR_OBJ_ALREADY_REGISTERED: "Объект с именем: {0} уже зарегестрирован и не может быть перезаписан",
        ERR_OPTIONS_ALREADY_REGISTERED: "Опции с именем: {0} уже зарегестрированы и не могут быть перезаписаны",
        ERR_APP_NEED_JQUERY: "Проект зависит от JQuery и не может без него правильно работать",
        ERR_ASSERTION_FAILED: 'Утверждение "{0}" не сработало',
        ERR_BINDING_CONTENT_NOT_FOUND: "BindingContent не найден",
        ERR_DBSET_READONLY: "Набор данных: {0} только для чтения и не может редактироваться",
        ERR_DBSET_INVALID_FIELDNAME: "В наборе данных: {0} не существует поля с именем: {1}",
        ERR_FIELD_READONLY: "Поле только для чтения и не может быть отредактировано",
        ERR_FIELD_ISNOT_NULLABLE: "Поле не может быть пустым и должно быть заполнено",
        ERR_FIELD_WRONG_TYPE: "Значение {0} имеет неверный тип данных. Оно должно иметь тип данных: {1}",
        ERR_FIELD_MAXLEN: "Значение иммет длинну большую чем разрешено в программе: {0}",
        ERR_FIELD_DATATYPE: "Неизвестный тип данных: {0}",
        ERR_FIELD_REGEX: "Значение {0} не прошло проверку на правильность",
        ERR_FIELD_RANGE: "Значение {0} выходит за диапазон {1} разрешенных значений",
        ERR_EVENT_INVALID: "Неверное имя события: {0}",
        ERR_EVENT_INVALID_FUNC: "Неверная функция для события",
        ERR_MODULE_NOT_REGISTERED: "Модуль: {0} не зарегистрирован",
        ERR_MODULE_ALREDY_REGISTERED: "Модуль: {0} уже зарегистрирован",
        ERR_PROP_NAME_EMPTY: "Имя свойства объекта пусто",
        ERR_PROP_NAME_INVALID: 'Объект не имеет свойства с именем: "{0}"',
        ERR_GLOBAL_SINGLTON: "Объект Global должен быть в единственном экземпляре",
        ERR_TEMPLATE_ALREADY_REGISTERED: "Шаблон с именем: {0} уже зарегистрирован",
        ERR_TEMPLATE_NOTREGISTERED: "Шаблон с именем: {0} не зарегистрирован",
        ERR_TEMPLATE_GROUP_NOTREGISTERED: "Группа шаблонов: {0} не зарегистрирована",
        ERR_TEMPLATE_HAS_NO_ID: "Шаблон внутри тэга SCRIPT должен иметь аттрибут ID",
        ERR_OPTIONS_HAS_NO_ID: "Опции внутри тэга SCRIPT должны иметь аттрибут ID",
        ERR_CONVERTER_NOTREGISTERED: "Конвертор: {0} не зарегистрирован",
        ERR_OPTIONS_NOTREGISTERED: "Опции: {0} не зарегистрированы",
        ERR_JQUERY_DATEPICKER_NOTFOUND: "Приложение зависит от JQuery.UI.datepicker и не может без него правильно работать",
        ERR_PARAM_INVALID: "Параметр: {0} имеет неправильное значение: {1}",
        ERR_PARAM_INVALID_TYPE: "Параметр: {0} имеет неверный тип. Его тип должен быть {1}",
        ERR_KEY_IS_EMPTY: "Значение ключа не должно быть пустым",
        ERR_KEY_IS_NOTFOUND: "Нет сущности с ключом: {0}",
        ERR_ITEM_IS_ATTACHED: "Неверная операция, по причине: Сущность уже была прикреплена к набору данных",
        ERR_ITEM_IS_DETACHED: "Неверная операция, по причине: Сущность не прикреплена к набору данных",
        ERR_ITEM_IS_NOTFOUND: "Неверная операция, по причине: Сущность не найдена",
        ERR_ITEM_NAME_COLLISION: 'В наборе данных "{0}" имя поля: "{1}" уже существует в сущности и не может быть декларирована повторно',
        ERR_DICTKEY_IS_NOTFOUND: "Неверное имя ключа: {0} в словаре. Поле с таким именем не существует",
        ERR_DICTKEY_IS_EMPTY: "Ключевое свойство: {0} в словаре должно быть заполненным",
        ERR_CONV_INVALID_DATE: "Не могу перевести строку: {0} в значение для даты (времени)",
        ERR_CONV_INVALID_NUM: "Не могу перевести строку: {0} в значение для числа",
        ERR_QUERY_NAME_NOTFOUND: "Не могу найти запрос с именем: {0}",
        ERR_QUERY_BETWEEN: 'Оператор "BETWEEN" требует два значения',
        ERR_QUERY_OPERATOR_INVALID: "Неверный оператор {0} в запросе",
        ERR_OPER_REFRESH_INVALID: "Невозможно обновить сущность в текущем состоянии",
        ERR_CALC_FIELD_DEFINE: 'Поле: "{0}" имеет неверное описание: Вычисляемые поля могут зависеть только от полей сущности',
        ERR_CALC_FIELD_SELF_DEPEND: 'Поле: "{0}" имеет неверное описание: Вычисляемые поля не могут зависеть от самих себя',
        ERR_DOMAIN_CONTEXT_INITIALIZED: "DbContext уже был иннициализирован",
        ERR_DOMAIN_CONTEXT_NOT_INITIALIZED: "DbContext не был иннициализирован",
        ERR_SVC_METH_PARAM_INVALID: "Неверный значение {1} параметра {0} для вызова сервис-метода: {2}",
        ERR_DB_LOAD_NO_QUERY: "Параметр для запроса требует заполненного значения",
        ERR_DBSET_NAME_INVALID: "Неверное имя набора данных: {0}",
        ERR_APP_NAME_NOT_UNIQUE: "Имя приложения: {0} уже зарегистрировано",
        ERR_ELVIEW_NOT_REGISTERED: "Не могу найти element view: {0}",
        ERR_ELVIEW_NOT_CREATED: "Не могу создать element view для элемента с Тэгом: {0}",
        ERR_BIND_TARGET_EMPTY: "Binding target is empty",
        ERR_BIND_TGTPATH_INVALID: "Binding targetPath has invalid value: {0}",
        ERR_BIND_MODE_INVALID: "Binding mode has invalid value: {0}",
        ERR_BIND_TARGET_INVALID: "Binding target must be a descendant of BaseObject",
        ERR_EXPR_BRACES_INVALID: "Expression {0} has no closing braces",
        ERR_APP_SETUP_INVALID: "Application's setUp method parameter must be a valid function",
        ERR_GRID_DATASRC_INVALID: "DataGrid's datasource must be a descendant of Collection type",
        ERR_COLLECTION_CHANGETYPE_INVALID: "Invalid Collection change type value: {0}",
        ERR_GRID_COLTYPE_INVALID: "Invalid Column type type value: {0}",
        ERR_PAGER_DATASRC_INVALID: "Pager datasource must be a descendant of Collection type",
        ERR_STACKPNL_DATASRC_INVALID: "StackPanel datasource must be a descendant of Collection type",
        ERR_STACKPNL_TEMPLATE_INVALID: "StackPanel templateID is not provided in the options",
        ERR_LISTBOX_DATASRC_INVALID: "ListBox datasource must be a descendant of Collection type",
        ERR_DATAFRM_DCTX_INVALID: "DataForm's dataContext must be a descendant of BaseObject type",
        ERR_DCTX_HAS_NO_FIELDINFO: "DataContext has no getFieldInfo method",
        ERR_TEMPLATE_ID_INVALID: "Элемент с TemplateID: {0} не существует",
        ERR_ITEM_DELETED_BY_ANOTHER_USER: "Запись была удалена другим пользователем",
        ERR_ACCESS_DENIED: "Операция не разрешена. Попросите администратора дать Вам права для ее осуществления",
        ERR_CONCURRENCY: "Запись была изменена другим пользователем. Обновите запись перед ее редактированием.",
        ERR_VALIDATION: "Проверка на корректность не прошла успешно. Проверьте правильность введенных данных",
        ERR_SVC_VALIDATION: "Проверка на корректность: {0}",
        ERR_SVC_ERROR: "Ошибка сервера: {0}",
        ERR_UNEXPECTED_SVC_ERROR: "Неожиданная ошибка сервера: {0}",
        ERR_ASSOC_NAME_INVALID: "Invalid association name: {0}",
        ERR_DATAVIEW_DATASRC_INVALID: "TDataView datasource must not be null and should be descendant of Collection type",
        ERR_DATAVIEW_FILTER_INVALID: "TDataView fn_filter option must be valid function which accepts entity and returns boolean value"
    };
    lang_1.assign(lang_1.STRS, _STRS);
    lang_1.assign(lang_1.ERRS, _ERRS);
    bootstrapper_1.bootstrapper.addOnInitialize(function (boot) {
        var datepicker = boot.getSvc("IDatepicker");
        if (!datepicker) {
            throw new Error("IDatepicker service is not registered");
        }
        $.datepicker.regional["ru"] = {
            closeText: "Закрыть",
            prevText: "&#x3c;Пред",
            nextText: "След&#x3e;",
            currentText: "Сегодня",
            monthNames: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь",
                "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
            monthNamesShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн",
                "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
            dayNames: ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"],
            dayNamesShort: ["вск", "пнд", "втр", "срд", "чтв", "птн", "сбт"],
            dayNamesMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
            dateFormat: "dd.mm.yy",
            firstDay: 1,
            isRTL: false
        };
        datepicker.datepickerRegion = "ru";
    });
});
