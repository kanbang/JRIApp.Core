@{
    Layout = "~/Views/Shared/_LayoutDemo.cshtml";
}
@{
    ViewBag.Title = "DataGrid Demo ";
}
@Html.AntiForgeryToken()

@section CssImport {
    <style type="text/css">
        .btn-dropdown {
            margin: 2px 2px 5px 2px;
        }

        .dropdownTableWrap {
            height: 255px;
            margin: 0px;
            padding: 0px;
            width: 100%;
        }

        #demoContent {
            height: calc(100vh - 185px);
        }

        .productTableWrap {
            height: calc(100% - 40px);
            width: 100%;
        }

        .productTableContainer {
            overflow: auto !important;
        }

        .productTableHeader {
        }

        .orderDetailTableWrap {
            max-height: 180px;
            width: 100%;
        }

        table.ria-data-table td.number-display {
            color: blue;
            font-weight: bold;
        }

        table.ria-data-table td.number-edit > input[type="text"] {
            color: black;
        }

        .ria-data-table td.weightCell {
            text-align: right;
        }

        .ria-data-table td.dateCell {
            text-align: right;
        }

        .ria-data-table td.activeCell {
            text-align: center;
        }

        .test1 > textarea {
            color: blue !important;
        }

        .weightCol {
            font-weight: bolder;
        }

        .rowInactive > td.ria-data-cell {
            color: gray;
            text-decoration: line-through;
        }

        table.ria-data-table tr:nth-child(even) {
            background-color: #ECF2F6;
        }

        .ui-datepicker select.ui-datepicker-month,
        .ui-datepicker select.ui-datepicker-year {
            min-height: 28px;
        }

        .ui-datepicker select.ui-datepicker-month {
            margin-right: 3px;
            width: 80px;
        }

        .gray-bgc {
            background-color: #ECF2F6;
        }

        .white-bgc {
            background-color: #FFFFFF;
        }


        div.someClass {
            color: gray;
        }

        div.bold span {
            font-weight: bold;
            font-size: larger;
        }

        div.bold {
            color: black;
        }

            div.bold.lsize {
                color: red;
            }

            div.bold.msize {
                color: green;
            }

            div.bold.ssize {
                color: blue;
            }

            div.bold.nsize {
                color: darkgoldenrod;
            }
    </style>
}

@section JSStaticImport {
}

@section JSDynamicImport {
    <environment include="Development">
        <script src="~/js/demo/gridDemo/main.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/demo/gridDemo/main.min.js" asp-append-version="true"></script>
    </environment>

    <script type="text/javascript">
    require(["gridDemo/main", "jriapp_ui", "jriapp_ru"],
        function (DEMO, UI, LANG) {
            $("#loading").fadeIn();

            var mainOptions = {
                service_url: null,
                permissionInfo: null,
                upload_thumb_url: null,
                templates_url: null,
                productEditTemplate_url: null,
                modelData: null,
                categoryData: null,
                sse_url: null,
                sse_clientID: null
            };

            (function (ops) {
                @*
                // the classifiers data can be loaded as an embedded in the page data (but i prefer to use a separate service call - see: 'app.productVM.filter.load()')

                ops.modelData =  @await Component.InvokeAsync("ProductModel");
                ops.categoryData = @await Component.InvokeAsync("ProductCategory");
                *@

                ops.service_url = '@Url.RouteUrl("default", new {controller = "RIAppDemoServiceEF", action = ""})';
                ops.permissionInfo = @await Component.InvokeAsync("Permissions");
                ops.upload_thumb_url = '@Url.Action("ThumbnailUpload", "Upload")';
                ops.templates_url = '@Url.Action("Download", "Templates", new {name = "DataGridDemo"})';
                ops.productEditTemplate_url = '@Url.Action("Download", "Templates", new { name = "productEditTemplate"})';
                //used to access SignalR hub
                ops.sse_url = '/quotes';

                @{
                    var client_id = Guid.NewGuid().ToString();
                }
            })(mainOptions);

            DEMO.start(mainOptions).then(function () {
                $("#page").animate({ opacity: 1 }, 1000);
                $("#loading").fadeOut(1000);
            }, function (err) {
                $("#loading").fadeOut(1000);
            });
        });
    </script>
}

<h2 class="ex8 mb-3">@ViewBag.Title</h2>

<div class="container-fluid px-0" id="page" style="opacity:0;" data-bind="this.isBusy,to=dbContext.isBusy" data-view="busy">
    <header id="title" class="text-left">
        <a id="expander" style="border-color: #eee;" class="btn btn-sm btn-outline-light align-baseline"
           data-bind="this.command,to=expanderCommand,mode=OneWay,source=headerVM"
           data-view="expander">
        </a>
        <span class="ml-1 align-baseline">Filter</span>
        <span class="ml-1 align-baseline" data-bind="this.html,to=sseMessage,mode=OneWay,source=app"></span>
    </header>

    <form id="demoHeader" data-bind="this.dataContext,source=productVM" data-view="dataform">
        <div class="form-group form-row py-2 px-4 text-left my-0" style="font-size:0.85rem;">
            <div class="col-2">
                <label for="prodNum1">Product Number:</label>
                <input type="text" class="form-control form-control-sm" id="prodNum1" placeholder="Product number"
                       data-bind-1="this.value,to=filter.prodNumber,mode=TwoWay"
                       data-bind-2="this.toolTip,to=filter.searchTextToolTip">
            </div>
            <div class="col-3 pl-0">
                <label for="prodName1">Product Name:</label>
                <input type="text" class="form-control form-control-sm" id="prodName1" placeholder="Name"
                       data-bind-1="this.value,to=filter.name,mode=TwoWay"
                       data-bind-2="this.toolTip,to=filter.searchTextToolTip" />
            </div>
            <div class="col-2 pl-0">
                <label for="prodMCat">Main Category:</label>
                @*
                    Providing the datasource through the options - not using databinding
                    bind(ParentCategories,productVM.filter) takes two arguments - the first is the path, the second is the source
                    the second parameter is optional here (without it the current dataContext would be used). Their semantics is the same as in the usual databinding.
                    We could write it without the source argument, like that -
                    data-view-options="valuePath=ProductCategoryId,textPath=Name,dataSource=bind(filter.ParentCategories)"></select>
                *@
                <select id="prodMCat" size="1" class="form-control form-control-sm"
                        data-bind="get(prodMCatDataBind1,prodMCatDataBind2)"
                        data-view-options="valuePath=ProductCategoryId,textPath=Name,dataSource=bind(ParentCategories,productVM.filter)"></select>
            </div>
            <div class="col-2 pl-0">
                <label for="prodSCat">Sub Category:</label>
                <select id="prodSCat" size="1" class="form-control form-control-sm"
                        data-bind-1="this.dataSource,to=filter.ChildCategories"
                        data-bind-2="this.selectedValue,to=filter.childCategoryId,mode=TwoWay"
                        data-bind-3="this.selectedItem,to=filter.selectedCategory,mode=TwoWay"
                        data-bind-4="this.toolTip,to=filter.selectedCategory.Name"
                        data-bind-5="this.textProvider,to=optionTextProvider"
                        data-bind-6="this.stateProvider,to=optionStateProvider"
                        data-view-options="valuePath=ProductCategoryId,textPath=Name"></select>
            </div>
            <div class="col-3 pl-0">
                <label for="prodMod">Model:</label>
                <div class="d-block w-100 text-nowrap">
                    <input id="prodMod" type="text" class="form-control form-control-sm form-control-plaintext d-inline-block text-secondary" style="width:200px;" readonly="readonly" data-view="dropdownbox"
                           data-bind-1="this.selected,to=filter.modelId,mode=TwoWay"
                           data-bind-2="this.toolTip,to=info,source=this"
                           data-view-options="valuePath=key,textPath=val,dataSource=bind(filter.prodModDic),templateId=prodModTemplate,width:'270px',height:'350px'" />
                </div>
                @*
                    <select id="prodMod" size="1" class="form-control form-control-sm"
                            data-bind-1="this.dataSource,to=filter.ProductModels"
                            data-bind-2="this.selectedValue,to=filter.modelId,mode=TwoWay"
                            data-bind-3="this.toolTip,to=filter.selectedModel.Name"
                            data-bind-4="this.selectedItem,to=filter.selectedModel,mode=TwoWay"
                            data-bind-5="this.textProvider,to=optionTextProvider"
                            data-bind-6="this.stateProvider,to=optionStateProvider"
                            data-view-options="valuePath=ProductModelId,textPath=Name"></select>
                *@
            </div>
        </div>
        <div class="form-group form-row py-2 px-4 text-left my-0">
            <div class="col-2">
                <label for="sizes">Size:</label>
                <select id="sizes" size="1" class="form-control form-control-sm"
                        data-bind-1="this.dataSource,to=filter.sizes"
                        data-bind-2="this.selectedValue,to=filter.size,mode=TwoWay"
                        data-view-options="tip:'Choose the right size',valuePath=key,textPath=val"></select>
            </div>
            <div class="col-2">
                <label for="saleStart1">Sales Start Date Begin:</label>
                <input type="text" id="saleStart1" class="form-control form-control-sm w-75 d-inline-block mr-1" placeholder="DD.MM.YYYY"
                       data-bind="this.value,to=filter.saleStart1,mode=TwoWay,converter=dateConverter"
                       data-view="datepicker"
                       data-view-options="get(salesDateOptions)" />
            </div>
            <div class="col-2 mr-auto">
                <label for="saleStart2">Sales End Date:</label>
                <input type="text" id="saleStart2" class="form-control form-control-sm w-75 d-inline-block mr-1" placeholder="DD.MM.YYYY"
                       data-bind="this.value,to=filter.saleStart2,mode=TwoWay,converter=dateConverter"
                       data-view="datepicker"
                       data-view-options="get(salesDateOptions)" />
            </div>
        </div>
        <!--this nested dataform is only to test how the dataform nesting is working!!! it is not needed here, really.-->
        <div class="form-group form-row text-left py-2 px-4" data-bind="this.dataContext" data-view="dataform">
            <div class="col">
                <button type="button" style="width:11em;" id="btn_filter" class="btn btn-info btn-sm" data-bind="this.command,to=loadCommand"><i class="fas fa-search"></i><span class="ml-1">Filter</span></button>
                <button type="button" style="width:11em;" id="btn_reset" class="btn btn-info btn-sm" data-bind="this.command,to=filter.resetCommand"><i class="fas fa-retweet"></i><span class="ml-1">Reset</span></button>
                <button type="button" style="width:11em;" class="btn btn-info btn-sm" data-bind="this.command,to=openHubCommand,source=app" data-view-options="tip:'Starts a signalR hub which returns quotes!'"><i class="fas fa-link"></i><span class="ml-1">Connect Hub</span></button>
                <button type="button" style="width:11em;" class="btn btn-info btn-sm" data-bind="this.command,to=closeHubCommand,source=app"><i class="fas fa-unlink"></i><span class="ml-1">Close Hub</span></button>
            </div>
        </div>
    </form>

    <div id="demoContent">
        <div class="row" style="height: 85%;">
            <table data-name="gridProducts" data-bind1="this.dataSource,to=dbSet,source=productVM"
                   data-bind2="this.grid,to=selectionVM.grid,mode=BackWay,source=productVM"
                   data-bind3="this.stateProvider,to=rowStateProvider,source=productVM"
                   data-view="resizable_grid"
                   data-view-options="get(gridProductsOptions,gridEditorProductsOptions,gridDetailsProductsOptions)">
                <thead>
                    <tr>
                        <th data-column="width:35px,type:row_expander,tip='Row expander'"></th>
                        <th data-column="width:50px,type:row_actions,tip='Row actions'"></th>
                        <th data-column="width:40px,type:row_selector,tip='Column selector'"></th>
                        <th data-column="width:100px,sortable:false,templateID:productNumberTemplate,tip='Product number column implemented using template!!!'" data-content="fieldName:ProductNumber,css:{readCss:'number-display',editCss:'number-edit'}"></th>
                        <th data-column="width:25%,sortable:true,title:Name,tip='Product name'" data-content="fieldName:Name"></th>
                        <th data-column="width:90px,title:'Weight',sortable:true,rowCellCss:weightCell,colCellCss:weightCol,tip='Example of a tooltip in the datagrid column''s header'" data-content="fieldName:Weight"></th>
                        <th data-column="width:15%,title=CategoryID,sortable:true,sortMemberName=ProductCategoryId" data-content="fieldName=ProductCategoryId,name:lookup,options:{dataSource=dbContext.dbSets.ProductCategory,valuePath=ProductCategoryId,textPath=Name}"></th>
                        <th data-column="width:100px,sortable:true,rowCellCss:dateCell,title='SellStartDate',tip='Start of the sales'" data-content="fieldName=SellStartDate"></th>
                        <th data-column="width:100px,sortable:true,rowCellCss:dateCell,title='SellEndDate',tip='End of the sales'" data-content="fieldName=SellEndDate"></th>
                        <th data-column="width:90px,sortable:true,rowCellCss:activeCell,title='IsActive',sortMemberName=SellEndDate" data-content="fieldName=IsActive"></th>
                        <th data-column="width:10%,title=Size,sortable:true,sortMemberName=Size" data-content="template={readID=sizeDisplayTemplate}"></th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
        <div class="row border-0 mt-3" style="height: 15%;">
            <div class="mr-3 pt-2" style="width:10em;" data-bind-1="this.templateID,to=currentTemplate,source=productVM.selectionVM"
                 data-bind-2="this.dataContext,source=productVM.selectionVM"
                 data-view="dynacontent">
            </div>
            <!--pager-->
            <div class="col-10 pl-0" data-bind-1="this.dataSource,to=dbSet,source=productVM"
                 @*when the pager is selected than the datagrid accepts keydown and keyup events*@
                 data-bind-2="this.parentControl,to=grid,source=productVM"
                 data-view="pager"
                 data-view-options="sliderSize:5,showTip:false,showInfo:true">
            </div>
            <div class="col-2 text-right">
                <button type="button" class="btn btn-info btn-sm" style="width:11em;" data-bind="this.command,to=addNewCommand,mode=OneWay,source=productVM"><i class="fas fa-plus"></i><span class="ml-1">New Product</span></button>
            </div>
        </div>
    </div>
</div>

@*
    split prodMCatDataBind into several parts for testing the get with multiple arguments!
    so the get function will convert them to multiple databinding expressions
*@
<script id="prodMCatDataBind1" type="text/x-options">
    {this.selectedValue,to=filter.parentCategoryId,mode=TwoWay}
</script>

<script id="prodMCatDataBind2" type="text/x-options">
    {this.textProvider,to=optionTextProvider}
    {this.stateProvider,to=optionStateProvider}
</script>


<script id="salesDateOptions" type="text/x-options">
    datepicker: { showOn:button,
    yearRange:'-15:c',
    changeMonth: true,
    changeYear:true,
    yearRange:'1998:2005',
    minDate:date(1998-06-01,YYYY-MM-DD),
    maxDate:date(20050707),
    test: inject('testsvc', 'param1''s value, test', {x: 123, dt1: date(startofmonth), dt2: date(endofweek) }, 100)
    }
</script>

@*
    split gridProductsOptions into several parts for testing the get with multiple arguments!
    so the get function will merge them into one options object
*@
<script id="gridProductsOptions" type="text/x-options">
    resizeMode:overflow,
    wrapCss:productTableWrap,
    containerCss:productTableContainer,
    headerCss:productTableHeader,
    rowStateField:IsActive,
    isHandleAddNew:true,
    isCanEdit:true
</script>

<script id="gridEditorProductsOptions" type="text/x-options">
    editor:bind(dialogOptions,productVM),
</script>

<script id="gridDetailsProductsOptions" type="text/x-options">
    details:{templateID:productDetailsTemplate}
</script>

<script id="editcss" type="text/x-options">
    elEditCss:'form-control form-control-sm d-inline-block'
</script>

<script id="test1css" type="text/x-options">
    editCss:'test1 form-control-plaintext'
</script>

<script id="selectedCountTemplate" type="text/x-template">
    <label>
        <span class="text-dark">Selected:</span>
        <span class="ml-2 ria-pager-info-num" data-bind="this.value,to=selectedCount,converter=smallIntConverter"></span>
    </label>
</script>

<script id="noneSelectedTemplate" type="text/x-template">
    <span class="text-dark text-capitalize">
       No rows selected
    </span>
</script>


<!--
    template for the size grid's cell - it is picked automatically by the engine
    it also shows how to bind to elementview's "classes" property
-->
<script id="sizeDisplayTemplate" type="text/x-template">
    <!--I added someClass to show that it is not deleted while classes are manipulated through the databinding-->
    <div class="someClass" data-bind-1="this.classes[*],to=Size,converter=sizeConverter"
         data-bind-2="this.classes[bold],to=IsActive">
        <span class="align-baseline text-secondary">Size:</span><span class="align-baseline ml-3" data-bind="this.value,to=Size"></span>
    </div>
</script>

<!--a template inside data grid's column-->
<script id="productNumberTemplate" type="text/x-template">
    <div class="m-0 p-0 border border-secondary rounded text-center" style="height:90%; width:95%;">
        <a class="text-white align-middle" data-name="Product Number Column"
           data-bind1="this.command,to=columnCommand,source=productVM"
           data-bind2="this.commandParam,to=currentItem,source=productVM"
           data-view-options="stopPropagation=true">Product #</a>
    </div>
</script>

<script id="prodModTemplate" type="text/x-template">
    <div class="d-flex flex-column align-items-stretch h-100">
        <div class="mb-auto" data-bind="this.isBusy,to=isLoading" data-view="busy">
            <table data-name="lookupGrid" data-view-options="wrapCss:dropdownTableWrap,isCanEdit:false,isCanDelete:false">
                <thead>
                    <tr>
                        <th data-column="width:30px,type:row_selector" />
                        <th data-column="width:95%,title:'Model'" data-content="fieldName:val,readOnly:true" />
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>

        <div class="mt-auto mb-3">
            <div class="text-center">
                <button type="button" class="btn btn-info btn-sm" style="width:6em;" data-name="btnOk">
                    <i class="fas fa-check"></i><span class="ml-2">Ok</span>
                </button>
                <button type="button" class="btn btn-info btn-sm ml-3" style="width:6em;" data-name="btnCancel">
                    <i class="fas fa-times"></i><span class="ml-2">Cancel</span>
                </button>
            </div>
        </div>
    </div>
</script>

@await Html.PartialAsync("_WaitLoad")
